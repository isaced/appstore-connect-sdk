/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CiAction } from './CiAction';
import {
    CiActionFromJSON,
    CiActionFromJSONTyped,
    CiActionToJSON,
} from './CiAction';
import type { CiBranchStartCondition } from './CiBranchStartCondition';
import {
    CiBranchStartConditionFromJSON,
    CiBranchStartConditionFromJSONTyped,
    CiBranchStartConditionToJSON,
} from './CiBranchStartCondition';
import type { CiManualBranchStartCondition } from './CiManualBranchStartCondition';
import {
    CiManualBranchStartConditionFromJSON,
    CiManualBranchStartConditionFromJSONTyped,
    CiManualBranchStartConditionToJSON,
} from './CiManualBranchStartCondition';
import type { CiManualPullRequestStartCondition } from './CiManualPullRequestStartCondition';
import {
    CiManualPullRequestStartConditionFromJSON,
    CiManualPullRequestStartConditionFromJSONTyped,
    CiManualPullRequestStartConditionToJSON,
} from './CiManualPullRequestStartCondition';
import type { CiManualTagStartCondition } from './CiManualTagStartCondition';
import {
    CiManualTagStartConditionFromJSON,
    CiManualTagStartConditionFromJSONTyped,
    CiManualTagStartConditionToJSON,
} from './CiManualTagStartCondition';
import type { CiPullRequestStartCondition } from './CiPullRequestStartCondition';
import {
    CiPullRequestStartConditionFromJSON,
    CiPullRequestStartConditionFromJSONTyped,
    CiPullRequestStartConditionToJSON,
} from './CiPullRequestStartCondition';
import type { CiScheduledStartCondition } from './CiScheduledStartCondition';
import {
    CiScheduledStartConditionFromJSON,
    CiScheduledStartConditionFromJSONTyped,
    CiScheduledStartConditionToJSON,
} from './CiScheduledStartCondition';
import type { CiTagStartCondition } from './CiTagStartCondition';
import {
    CiTagStartConditionFromJSON,
    CiTagStartConditionFromJSONTyped,
    CiTagStartConditionToJSON,
} from './CiTagStartCondition';

/**
 * 
 * @export
 * @interface CiWorkflowUpdateRequestDataAttributes
 */
export interface CiWorkflowUpdateRequestDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    description?: string;
    /**
     * 
     * @type {CiBranchStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    branchStartCondition?: CiBranchStartCondition;
    /**
     * 
     * @type {CiTagStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    tagStartCondition?: CiTagStartCondition;
    /**
     * 
     * @type {CiPullRequestStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    pullRequestStartCondition?: CiPullRequestStartCondition;
    /**
     * 
     * @type {CiScheduledStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    scheduledStartCondition?: CiScheduledStartCondition;
    /**
     * 
     * @type {CiManualBranchStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    manualBranchStartCondition?: CiManualBranchStartCondition;
    /**
     * 
     * @type {CiManualTagStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    manualTagStartCondition?: CiManualTagStartCondition;
    /**
     * 
     * @type {CiManualPullRequestStartCondition}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
    /**
     * 
     * @type {Array<CiAction>}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    actions?: Array<CiAction>;
    /**
     * 
     * @type {boolean}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    isLockedForEditing?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    clean?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CiWorkflowUpdateRequestDataAttributes
     */
    containerFilePath?: string;
}

/**
 * Check if a given object implements the CiWorkflowUpdateRequestDataAttributes interface.
 */
export function instanceOfCiWorkflowUpdateRequestDataAttributes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CiWorkflowUpdateRequestDataAttributesFromJSON(json: any): CiWorkflowUpdateRequestDataAttributes {
    return CiWorkflowUpdateRequestDataAttributesFromJSONTyped(json, false);
}

export function CiWorkflowUpdateRequestDataAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CiWorkflowUpdateRequestDataAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'branchStartCondition': !exists(json, 'branchStartCondition') ? undefined : CiBranchStartConditionFromJSON(json['branchStartCondition']),
        'tagStartCondition': !exists(json, 'tagStartCondition') ? undefined : CiTagStartConditionFromJSON(json['tagStartCondition']),
        'pullRequestStartCondition': !exists(json, 'pullRequestStartCondition') ? undefined : CiPullRequestStartConditionFromJSON(json['pullRequestStartCondition']),
        'scheduledStartCondition': !exists(json, 'scheduledStartCondition') ? undefined : CiScheduledStartConditionFromJSON(json['scheduledStartCondition']),
        'manualBranchStartCondition': !exists(json, 'manualBranchStartCondition') ? undefined : CiManualBranchStartConditionFromJSON(json['manualBranchStartCondition']),
        'manualTagStartCondition': !exists(json, 'manualTagStartCondition') ? undefined : CiManualTagStartConditionFromJSON(json['manualTagStartCondition']),
        'manualPullRequestStartCondition': !exists(json, 'manualPullRequestStartCondition') ? undefined : CiManualPullRequestStartConditionFromJSON(json['manualPullRequestStartCondition']),
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(CiActionFromJSON)),
        'isEnabled': !exists(json, 'isEnabled') ? undefined : json['isEnabled'],
        'isLockedForEditing': !exists(json, 'isLockedForEditing') ? undefined : json['isLockedForEditing'],
        'clean': !exists(json, 'clean') ? undefined : json['clean'],
        'containerFilePath': !exists(json, 'containerFilePath') ? undefined : json['containerFilePath'],
    };
}

export function CiWorkflowUpdateRequestDataAttributesToJSON(value?: CiWorkflowUpdateRequestDataAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'branchStartCondition': CiBranchStartConditionToJSON(value.branchStartCondition),
        'tagStartCondition': CiTagStartConditionToJSON(value.tagStartCondition),
        'pullRequestStartCondition': CiPullRequestStartConditionToJSON(value.pullRequestStartCondition),
        'scheduledStartCondition': CiScheduledStartConditionToJSON(value.scheduledStartCondition),
        'manualBranchStartCondition': CiManualBranchStartConditionToJSON(value.manualBranchStartCondition),
        'manualTagStartCondition': CiManualTagStartConditionToJSON(value.manualTagStartCondition),
        'manualPullRequestStartCondition': CiManualPullRequestStartConditionToJSON(value.manualPullRequestStartCondition),
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(CiActionToJSON)),
        'isEnabled': value.isEnabled,
        'isLockedForEditing': value.isLockedForEditing,
        'clean': value.clean,
        'containerFilePath': value.containerFilePath,
    };
}

