/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DiagnosticLogCallStackNode
 */
export interface DiagnosticLogCallStackNode {
    /**
     * 
     * @type {number}
     * @memberof DiagnosticLogCallStackNode
     */
    sampleCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DiagnosticLogCallStackNode
     */
    isBlameFrame?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    symbolName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    insightsCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    offsetIntoSymbol?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    binaryName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    binaryUUID?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    lineNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    offsetIntoBinaryTextSegment?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticLogCallStackNode
     */
    rawFrame?: string;
    /**
     * 
     * @type {Array<DiagnosticLogCallStackNode>}
     * @memberof DiagnosticLogCallStackNode
     */
    subFrames?: Array<DiagnosticLogCallStackNode>;
}

/**
 * Check if a given object implements the DiagnosticLogCallStackNode interface.
 */
export function instanceOfDiagnosticLogCallStackNode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DiagnosticLogCallStackNodeFromJSON(json: any): DiagnosticLogCallStackNode {
    return DiagnosticLogCallStackNodeFromJSONTyped(json, false);
}

export function DiagnosticLogCallStackNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiagnosticLogCallStackNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sampleCount': !exists(json, 'sampleCount') ? undefined : json['sampleCount'],
        'isBlameFrame': !exists(json, 'isBlameFrame') ? undefined : json['isBlameFrame'],
        'symbolName': !exists(json, 'symbolName') ? undefined : json['symbolName'],
        'insightsCategory': !exists(json, 'insightsCategory') ? undefined : json['insightsCategory'],
        'offsetIntoSymbol': !exists(json, 'offsetIntoSymbol') ? undefined : json['offsetIntoSymbol'],
        'binaryName': !exists(json, 'binaryName') ? undefined : json['binaryName'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'binaryUUID': !exists(json, 'binaryUUID') ? undefined : json['binaryUUID'],
        'lineNumber': !exists(json, 'lineNumber') ? undefined : json['lineNumber'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'offsetIntoBinaryTextSegment': !exists(json, 'offsetIntoBinaryTextSegment') ? undefined : json['offsetIntoBinaryTextSegment'],
        'rawFrame': !exists(json, 'rawFrame') ? undefined : json['rawFrame'],
        'subFrames': !exists(json, 'subFrames') ? undefined : ((json['subFrames'] as Array<any>).map(DiagnosticLogCallStackNodeFromJSON)),
    };
}

export function DiagnosticLogCallStackNodeToJSON(value?: DiagnosticLogCallStackNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sampleCount': value.sampleCount,
        'isBlameFrame': value.isBlameFrame,
        'symbolName': value.symbolName,
        'insightsCategory': value.insightsCategory,
        'offsetIntoSymbol': value.offsetIntoSymbol,
        'binaryName': value.binaryName,
        'fileName': value.fileName,
        'binaryUUID': value.binaryUUID,
        'lineNumber': value.lineNumber,
        'address': value.address,
        'offsetIntoBinaryTextSegment': value.offsetIntoBinaryTextSegment,
        'rawFrame': value.rawFrame,
        'subFrames': value.subFrames === undefined ? undefined : ((value.subFrames as Array<any>).map(DiagnosticLogCallStackNodeToJSON)),
    };
}

