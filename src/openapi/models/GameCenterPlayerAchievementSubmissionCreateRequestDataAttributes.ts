/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
 */
export interface GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    bundleId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    challengeIds?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    percentageAchieved: number;
    /**
     * 
     * @type {string}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    scopedPlayerId: string;
    /**
     * 
     * @type {Date}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    submittedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
     */
    vendorIdentifier: string;
}

/**
 * Check if a given object implements the GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes interface.
 */
export function instanceOfGameCenterPlayerAchievementSubmissionCreateRequestDataAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bundleId" in value;
    isInstance = isInstance && "percentageAchieved" in value;
    isInstance = isInstance && "scopedPlayerId" in value;
    isInstance = isInstance && "vendorIdentifier" in value;

    return isInstance;
}

export function GameCenterPlayerAchievementSubmissionCreateRequestDataAttributesFromJSON(json: any): GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes {
    return GameCenterPlayerAchievementSubmissionCreateRequestDataAttributesFromJSONTyped(json, false);
}

export function GameCenterPlayerAchievementSubmissionCreateRequestDataAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bundleId': json['bundleId'],
        'challengeIds': !exists(json, 'challengeIds') ? undefined : json['challengeIds'],
        'percentageAchieved': json['percentageAchieved'],
        'scopedPlayerId': json['scopedPlayerId'],
        'submittedDate': !exists(json, 'submittedDate') ? undefined : (new Date(json['submittedDate'])),
        'vendorIdentifier': json['vendorIdentifier'],
    };
}

export function GameCenterPlayerAchievementSubmissionCreateRequestDataAttributesToJSON(value?: GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bundleId': value.bundleId,
        'challengeIds': value.challengeIds,
        'percentageAchieved': value.percentageAchieved,
        'scopedPlayerId': value.scopedPlayerId,
        'submittedDate': value.submittedDate === undefined ? undefined : (value.submittedDate.toISOString()),
        'vendorIdentifier': value.vendorIdentifier,
    };
}

