/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentLinks } from './DocumentLinks';
import {
    DocumentLinksFromJSON,
    DocumentLinksFromJSONTyped,
    DocumentLinksToJSON,
} from './DocumentLinks';
import type { GameCenterLeaderboardSetImage } from './GameCenterLeaderboardSetImage';
import {
    GameCenterLeaderboardSetImageFromJSON,
    GameCenterLeaderboardSetImageFromJSONTyped,
    GameCenterLeaderboardSetImageToJSON,
} from './GameCenterLeaderboardSetImage';
import type { GameCenterLeaderboardSetLocalization } from './GameCenterLeaderboardSetLocalization';
import {
    GameCenterLeaderboardSetLocalizationFromJSON,
    GameCenterLeaderboardSetLocalizationFromJSONTyped,
    GameCenterLeaderboardSetLocalizationToJSON,
} from './GameCenterLeaderboardSetLocalization';

/**
 * 
 * @export
 * @interface GameCenterLeaderboardSetImageResponse
 */
export interface GameCenterLeaderboardSetImageResponse {
    /**
     * 
     * @type {GameCenterLeaderboardSetImage}
     * @memberof GameCenterLeaderboardSetImageResponse
     */
    data: GameCenterLeaderboardSetImage;
    /**
     * 
     * @type {Array<GameCenterLeaderboardSetLocalization>}
     * @memberof GameCenterLeaderboardSetImageResponse
     */
    included?: Array<GameCenterLeaderboardSetLocalization>;
    /**
     * 
     * @type {DocumentLinks}
     * @memberof GameCenterLeaderboardSetImageResponse
     */
    links: DocumentLinks;
}

/**
 * Check if a given object implements the GameCenterLeaderboardSetImageResponse interface.
 */
export function instanceOfGameCenterLeaderboardSetImageResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "links" in value;

    return isInstance;
}

export function GameCenterLeaderboardSetImageResponseFromJSON(json: any): GameCenterLeaderboardSetImageResponse {
    return GameCenterLeaderboardSetImageResponseFromJSONTyped(json, false);
}

export function GameCenterLeaderboardSetImageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameCenterLeaderboardSetImageResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': GameCenterLeaderboardSetImageFromJSON(json['data']),
        'included': !exists(json, 'included') ? undefined : ((json['included'] as Array<any>).map(GameCenterLeaderboardSetLocalizationFromJSON)),
        'links': DocumentLinksFromJSON(json['links']),
    };
}

export function GameCenterLeaderboardSetImageResponseToJSON(value?: GameCenterLeaderboardSetImageResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': GameCenterLeaderboardSetImageToJSON(value.data),
        'included': value.included === undefined ? undefined : ((value.included as Array<any>).map(GameCenterLeaderboardSetLocalizationToJSON)),
        'links': DocumentLinksToJSON(value.links),
    };
}

