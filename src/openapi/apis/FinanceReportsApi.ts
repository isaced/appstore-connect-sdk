/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface FinanceReportsGetCollectionRequest {
    filterRegionCode: Array<string>;
    filterReportDate: Array<string>;
    filterReportType: Array<FinanceReportsGetCollectionFilterReportTypeEnum>;
    filterVendorNumber: Array<string>;
}

/**
 * 
 */
export class FinanceReportsApi extends runtime.BaseAPI {

    /**
     */
    async financeReportsGetCollectionRaw(requestParameters: FinanceReportsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.filterRegionCode === null || requestParameters.filterRegionCode === undefined) {
            throw new runtime.RequiredError('filterRegionCode','Required parameter requestParameters.filterRegionCode was null or undefined when calling financeReportsGetCollection.');
        }

        if (requestParameters.filterReportDate === null || requestParameters.filterReportDate === undefined) {
            throw new runtime.RequiredError('filterReportDate','Required parameter requestParameters.filterReportDate was null or undefined when calling financeReportsGetCollection.');
        }

        if (requestParameters.filterReportType === null || requestParameters.filterReportType === undefined) {
            throw new runtime.RequiredError('filterReportType','Required parameter requestParameters.filterReportType was null or undefined when calling financeReportsGetCollection.');
        }

        if (requestParameters.filterVendorNumber === null || requestParameters.filterVendorNumber === undefined) {
            throw new runtime.RequiredError('filterVendorNumber','Required parameter requestParameters.filterVendorNumber was null or undefined when calling financeReportsGetCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterRegionCode) {
            queryParameters['filter[regionCode]'] = requestParameters.filterRegionCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterReportDate) {
            queryParameters['filter[reportDate]'] = requestParameters.filterReportDate.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterReportType) {
            queryParameters['filter[reportType]'] = requestParameters.filterReportType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVendorNumber) {
            queryParameters['filter[vendorNumber]'] = requestParameters.filterVendorNumber.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/financeReports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async financeReportsGetCollection(requestParameters: FinanceReportsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.financeReportsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FinanceReportsGetCollectionFilterReportTypeEnum = {
    Financial: 'FINANCIAL',
    FinanceDetail: 'FINANCE_DETAIL'
} as const;
export type FinanceReportsGetCollectionFilterReportTypeEnum = typeof FinanceReportsGetCollectionFilterReportTypeEnum[keyof typeof FinanceReportsGetCollectionFilterReportTypeEnum];
