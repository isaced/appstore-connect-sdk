/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppEncryptionDeclarationBuildsLinkagesRequest,
  AppEncryptionDeclarationDocumentResponse,
  AppEncryptionDeclarationResponse,
  AppEncryptionDeclarationsResponse,
  AppWithoutIncludesResponse,
  ErrorResponse,
} from '../models';
import {
    AppEncryptionDeclarationBuildsLinkagesRequestFromJSON,
    AppEncryptionDeclarationBuildsLinkagesRequestToJSON,
    AppEncryptionDeclarationDocumentResponseFromJSON,
    AppEncryptionDeclarationDocumentResponseToJSON,
    AppEncryptionDeclarationResponseFromJSON,
    AppEncryptionDeclarationResponseToJSON,
    AppEncryptionDeclarationsResponseFromJSON,
    AppEncryptionDeclarationsResponseToJSON,
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest {
    id: string;
    fieldsAppEncryptionDeclarationDocuments?: Array<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedFieldsAppEncryptionDeclarationDocumentsEnum>;
}

export interface AppEncryptionDeclarationsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<AppEncryptionDeclarationsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface AppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest {
    id: string;
    appEncryptionDeclarationBuildsLinkagesRequest: AppEncryptionDeclarationBuildsLinkagesRequest;
}

export interface AppEncryptionDeclarationsGetCollectionRequest {
    filterPlatform?: Array<AppEncryptionDeclarationsGetCollectionFilterPlatformEnum>;
    filterApp?: Array<string>;
    filterBuilds?: Array<string>;
    fieldsAppEncryptionDeclarations?: Array<AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationsEnum>;
    limit?: number;
    include?: Array<AppEncryptionDeclarationsGetCollectionIncludeEnum>;
    fieldsAppEncryptionDeclarationDocuments?: Array<AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationDocumentsEnum>;
    fieldsApps?: Array<AppEncryptionDeclarationsGetCollectionFieldsAppsEnum>;
    limitBuilds?: number;
}

export interface AppEncryptionDeclarationsGetInstanceRequest {
    id: string;
    fieldsAppEncryptionDeclarations?: Array<AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationsEnum>;
    include?: Array<AppEncryptionDeclarationsGetInstanceIncludeEnum>;
    fieldsAppEncryptionDeclarationDocuments?: Array<AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationDocumentsEnum>;
    fieldsApps?: Array<AppEncryptionDeclarationsGetInstanceFieldsAppsEnum>;
    limitBuilds?: number;
}

/**
 * 
 */
export class AppEncryptionDeclarationsApi extends runtime.BaseAPI {

    /**
     */
    async appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRaw(requestParameters: AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEncryptionDeclarationDocumentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppEncryptionDeclarationDocuments) {
            queryParameters['fields[appEncryptionDeclarationDocuments]'] = requestParameters.fieldsAppEncryptionDeclarationDocuments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEncryptionDeclarationDocumentResponseFromJSON(jsonValue));
    }

    /**
     */
    async appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated(requestParameters: AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEncryptionDeclarationDocumentResponse> {
        const response = await this.appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appEncryptionDeclarationsAppGetToOneRelatedRaw(requestParameters: AppEncryptionDeclarationsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appEncryptionDeclarationsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEncryptionDeclarations/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appEncryptionDeclarationsAppGetToOneRelated(requestParameters: AppEncryptionDeclarationsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.appEncryptionDeclarationsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appEncryptionDeclarationsBuildsCreateToManyRelationshipRaw(requestParameters: AppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appEncryptionDeclarationsBuildsCreateToManyRelationship.');
        }

        if (requestParameters.appEncryptionDeclarationBuildsLinkagesRequest === null || requestParameters.appEncryptionDeclarationBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appEncryptionDeclarationBuildsLinkagesRequest','Required parameter requestParameters.appEncryptionDeclarationBuildsLinkagesRequest was null or undefined when calling appEncryptionDeclarationsBuildsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEncryptionDeclarations/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppEncryptionDeclarationBuildsLinkagesRequestToJSON(requestParameters.appEncryptionDeclarationBuildsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appEncryptionDeclarationsBuildsCreateToManyRelationship(requestParameters: AppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appEncryptionDeclarationsBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appEncryptionDeclarationsGetCollectionRaw(requestParameters: AppEncryptionDeclarationsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEncryptionDeclarationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarationDocuments) {
            queryParameters['fields[appEncryptionDeclarationDocuments]'] = requestParameters.fieldsAppEncryptionDeclarationDocuments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEncryptionDeclarations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEncryptionDeclarationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appEncryptionDeclarationsGetCollection(requestParameters: AppEncryptionDeclarationsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEncryptionDeclarationsResponse> {
        const response = await this.appEncryptionDeclarationsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appEncryptionDeclarationsGetInstanceRaw(requestParameters: AppEncryptionDeclarationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEncryptionDeclarationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appEncryptionDeclarationsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarationDocuments) {
            queryParameters['fields[appEncryptionDeclarationDocuments]'] = requestParameters.fieldsAppEncryptionDeclarationDocuments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appEncryptionDeclarations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEncryptionDeclarationResponseFromJSON(jsonValue));
    }

    /**
     */
    async appEncryptionDeclarationsGetInstance(requestParameters: AppEncryptionDeclarationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEncryptionDeclarationResponse> {
        const response = await this.appEncryptionDeclarationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedFieldsAppEncryptionDeclarationDocumentsEnum = {
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AssetDeliveryState: 'assetDeliveryState',
    AssetToken: 'assetToken',
    DownloadUrl: 'downloadUrl',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedFieldsAppEncryptionDeclarationDocumentsEnum = typeof AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedFieldsAppEncryptionDeclarationDocumentsEnum[keyof typeof AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedFieldsAppEncryptionDeclarationDocumentsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type AppEncryptionDeclarationsAppGetToOneRelatedFieldsAppsEnum = typeof AppEncryptionDeclarationsAppGetToOneRelatedFieldsAppsEnum[keyof typeof AppEncryptionDeclarationsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetCollectionFilterPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type AppEncryptionDeclarationsGetCollectionFilterPlatformEnum = typeof AppEncryptionDeclarationsGetCollectionFilterPlatformEnum[keyof typeof AppEncryptionDeclarationsGetCollectionFilterPlatformEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationsEnum = typeof AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationsEnum[keyof typeof AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetCollectionIncludeEnum = {
    App: 'app',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    Builds: 'builds'
} as const;
export type AppEncryptionDeclarationsGetCollectionIncludeEnum = typeof AppEncryptionDeclarationsGetCollectionIncludeEnum[keyof typeof AppEncryptionDeclarationsGetCollectionIncludeEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationDocumentsEnum = {
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AssetDeliveryState: 'assetDeliveryState',
    AssetToken: 'assetToken',
    DownloadUrl: 'downloadUrl',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationDocumentsEnum = typeof AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationDocumentsEnum[keyof typeof AppEncryptionDeclarationsGetCollectionFieldsAppEncryptionDeclarationDocumentsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type AppEncryptionDeclarationsGetCollectionFieldsAppsEnum = typeof AppEncryptionDeclarationsGetCollectionFieldsAppsEnum[keyof typeof AppEncryptionDeclarationsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationsEnum = typeof AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationsEnum[keyof typeof AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetInstanceIncludeEnum = {
    App: 'app',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    Builds: 'builds'
} as const;
export type AppEncryptionDeclarationsGetInstanceIncludeEnum = typeof AppEncryptionDeclarationsGetInstanceIncludeEnum[keyof typeof AppEncryptionDeclarationsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationDocumentsEnum = {
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AssetDeliveryState: 'assetDeliveryState',
    AssetToken: 'assetToken',
    DownloadUrl: 'downloadUrl',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationDocumentsEnum = typeof AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationDocumentsEnum[keyof typeof AppEncryptionDeclarationsGetInstanceFieldsAppEncryptionDeclarationDocumentsEnum];
/**
 * @export
 */
export const AppEncryptionDeclarationsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type AppEncryptionDeclarationsGetInstanceFieldsAppsEnum = typeof AppEncryptionDeclarationsGetInstanceFieldsAppsEnum[keyof typeof AppEncryptionDeclarationsGetInstanceFieldsAppsEnum];
