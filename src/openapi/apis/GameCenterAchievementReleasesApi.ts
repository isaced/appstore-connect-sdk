/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementReleaseCreateRequest,
  GameCenterAchievementReleaseResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementReleaseCreateRequestFromJSON,
    GameCenterAchievementReleaseCreateRequestToJSON,
    GameCenterAchievementReleaseResponseFromJSON,
    GameCenterAchievementReleaseResponseToJSON,
} from '../models';

export interface GameCenterAchievementReleasesCreateInstanceRequest {
    gameCenterAchievementReleaseCreateRequest: GameCenterAchievementReleaseCreateRequest;
}

export interface GameCenterAchievementReleasesDeleteInstanceRequest {
    id: string;
}

export interface GameCenterAchievementReleasesGetInstanceRequest {
    id: string;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementReleasesGetInstanceFieldsGameCenterAchievementReleasesEnum>;
    include?: Array<GameCenterAchievementReleasesGetInstanceIncludeEnum>;
}

/**
 * 
 */
export class GameCenterAchievementReleasesApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterAchievementReleasesCreateInstanceRaw(requestParameters: GameCenterAchievementReleasesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementReleaseResponse>> {
        if (requestParameters.gameCenterAchievementReleaseCreateRequest === null || requestParameters.gameCenterAchievementReleaseCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementReleaseCreateRequest','Required parameter requestParameters.gameCenterAchievementReleaseCreateRequest was null or undefined when calling gameCenterAchievementReleasesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementReleases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementReleaseCreateRequestToJSON(requestParameters.gameCenterAchievementReleaseCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementReleaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementReleasesCreateInstance(requestParameters: GameCenterAchievementReleasesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementReleaseResponse> {
        const response = await this.gameCenterAchievementReleasesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementReleasesDeleteInstanceRaw(requestParameters: GameCenterAchievementReleasesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementReleasesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementReleases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAchievementReleasesDeleteInstance(requestParameters: GameCenterAchievementReleasesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAchievementReleasesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAchievementReleasesGetInstanceRaw(requestParameters: GameCenterAchievementReleasesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementReleaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementReleasesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementReleases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementReleaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementReleasesGetInstance(requestParameters: GameCenterAchievementReleasesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementReleaseResponse> {
        const response = await this.gameCenterAchievementReleasesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterAchievementReleasesGetInstanceFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail',
    Live: 'live'
} as const;
export type GameCenterAchievementReleasesGetInstanceFieldsGameCenterAchievementReleasesEnum = typeof GameCenterAchievementReleasesGetInstanceFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterAchievementReleasesGetInstanceFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterAchievementReleasesGetInstanceIncludeEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail'
} as const;
export type GameCenterAchievementReleasesGetInstanceIncludeEnum = typeof GameCenterAchievementReleasesGetInstanceIncludeEnum[keyof typeof GameCenterAchievementReleasesGetInstanceIncludeEnum];
