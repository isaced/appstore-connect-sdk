/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementImageResponse,
  GameCenterAchievementLocalizationCreateRequest,
  GameCenterAchievementLocalizationResponse,
  GameCenterAchievementLocalizationUpdateRequest,
  GameCenterAchievementResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementImageResponseFromJSON,
    GameCenterAchievementImageResponseToJSON,
    GameCenterAchievementLocalizationCreateRequestFromJSON,
    GameCenterAchievementLocalizationCreateRequestToJSON,
    GameCenterAchievementLocalizationResponseFromJSON,
    GameCenterAchievementLocalizationResponseToJSON,
    GameCenterAchievementLocalizationUpdateRequestFromJSON,
    GameCenterAchievementLocalizationUpdateRequestToJSON,
    GameCenterAchievementResponseFromJSON,
    GameCenterAchievementResponseToJSON,
} from '../models';

export interface GameCenterAchievementLocalizationsCreateInstanceRequest {
    gameCenterAchievementLocalizationCreateRequest: GameCenterAchievementLocalizationCreateRequest;
}

export interface GameCenterAchievementLocalizationsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterGroups?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum>;
}

export interface GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterAchievementImages?: Array<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    include?: Array<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum>;
}

export interface GameCenterAchievementLocalizationsGetInstanceRequest {
    id: string;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum>;
    include?: Array<GameCenterAchievementLocalizationsGetInstanceIncludeEnum>;
    fieldsGameCenterAchievementImages?: Array<GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum>;
}

export interface GameCenterAchievementLocalizationsUpdateInstanceRequest {
    id: string;
    gameCenterAchievementLocalizationUpdateRequest: GameCenterAchievementLocalizationUpdateRequest;
}

/**
 * 
 */
export class GameCenterAchievementLocalizationsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterAchievementLocalizationsCreateInstanceRaw(requestParameters: GameCenterAchievementLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementLocalizationResponse>> {
        if (requestParameters.gameCenterAchievementLocalizationCreateRequest === null || requestParameters.gameCenterAchievementLocalizationCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementLocalizationCreateRequest','Required parameter requestParameters.gameCenterAchievementLocalizationCreateRequest was null or undefined when calling gameCenterAchievementLocalizationsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementLocalizationCreateRequestToJSON(requestParameters.gameCenterAchievementLocalizationCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementLocalizationsCreateInstance(requestParameters: GameCenterAchievementLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementLocalizationResponse> {
        const response = await this.gameCenterAchievementLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementLocalizationsDeleteInstanceRaw(requestParameters: GameCenterAchievementLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAchievementLocalizationsDeleteInstance(requestParameters: GameCenterAchievementLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAchievementLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRaw(requestParameters: GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated(requestParameters: GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse> {
        const response = await this.gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRaw(requestParameters: GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementImages) {
            queryParameters['fields[gameCenterAchievementImages]'] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated(requestParameters: GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementImageResponse> {
        const response = await this.gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementLocalizationsGetInstanceRaw(requestParameters: GameCenterAchievementLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementImages) {
            queryParameters['fields[gameCenterAchievementImages]'] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementLocalizationsGetInstance(requestParameters: GameCenterAchievementLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementLocalizationResponse> {
        const response = await this.gameCenterAchievementLocalizationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementLocalizationsUpdateInstanceRaw(requestParameters: GameCenterAchievementLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsUpdateInstance.');
        }

        if (requestParameters.gameCenterAchievementLocalizationUpdateRequest === null || requestParameters.gameCenterAchievementLocalizationUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementLocalizationUpdateRequest','Required parameter requestParameters.gameCenterAchievementLocalizationUpdateRequest was null or undefined when calling gameCenterAchievementLocalizationsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementLocalizationUpdateRequestToJSON(requestParameters.gameCenterAchievementLocalizationUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementLocalizationsUpdateInstance(requestParameters: GameCenterAchievementLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementLocalizationResponse> {
        const response = await this.gameCenterAchievementLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail',
    Live: 'live'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    ReferenceName: 'referenceName'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum = {
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization'
} as const;
export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum = typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum[keyof typeof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGetInstanceIncludeEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage'
} as const;
export type GameCenterAchievementLocalizationsGetInstanceIncludeEnum = typeof GameCenterAchievementLocalizationsGetInstanceIncludeEnum[keyof typeof GameCenterAchievementLocalizationsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum = typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum[keyof typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum];
/**
 * @export
 */
export const GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum];
