/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterMatchmakingQueuesResponse,
  GameCenterMatchmakingRuleSetCreateRequest,
  GameCenterMatchmakingRuleSetResponse,
  GameCenterMatchmakingRuleSetUpdateRequest,
  GameCenterMatchmakingRuleSetsResponse,
  GameCenterMatchmakingRulesResponse,
  GameCenterMatchmakingTeamsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterMatchmakingQueuesResponseFromJSON,
    GameCenterMatchmakingQueuesResponseToJSON,
    GameCenterMatchmakingRuleSetCreateRequestFromJSON,
    GameCenterMatchmakingRuleSetCreateRequestToJSON,
    GameCenterMatchmakingRuleSetResponseFromJSON,
    GameCenterMatchmakingRuleSetResponseToJSON,
    GameCenterMatchmakingRuleSetUpdateRequestFromJSON,
    GameCenterMatchmakingRuleSetUpdateRequestToJSON,
    GameCenterMatchmakingRuleSetsResponseFromJSON,
    GameCenterMatchmakingRuleSetsResponseToJSON,
    GameCenterMatchmakingRulesResponseFromJSON,
    GameCenterMatchmakingRulesResponseToJSON,
    GameCenterMatchmakingTeamsResponseFromJSON,
    GameCenterMatchmakingTeamsResponseToJSON,
} from '../models';

export interface GameCenterMatchmakingRuleSetsCreateInstanceRequest {
    gameCenterMatchmakingRuleSetCreateRequest: GameCenterMatchmakingRuleSetCreateRequest;
}

export interface GameCenterMatchmakingRuleSetsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterMatchmakingRuleSetsGetCollectionRequest {
    fieldsGameCenterMatchmakingRuleSets?: Array<GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRuleSetsEnum>;
    limit?: number;
    include?: Array<GameCenterMatchmakingRuleSetsGetCollectionIncludeEnum>;
    fieldsGameCenterMatchmakingQueues?: Array<GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingQueuesEnum>;
    fieldsGameCenterMatchmakingTeams?: Array<GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingTeamsEnum>;
    fieldsGameCenterMatchmakingRules?: Array<GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRulesEnum>;
    limitMatchmakingQueues?: number;
    limitRules?: number;
    limitTeams?: number;
}

export interface GameCenterMatchmakingRuleSetsGetInstanceRequest {
    id: string;
    fieldsGameCenterMatchmakingRuleSets?: Array<GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRuleSetsEnum>;
    include?: Array<GameCenterMatchmakingRuleSetsGetInstanceIncludeEnum>;
    fieldsGameCenterMatchmakingQueues?: Array<GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingQueuesEnum>;
    fieldsGameCenterMatchmakingTeams?: Array<GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingTeamsEnum>;
    fieldsGameCenterMatchmakingRules?: Array<GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRulesEnum>;
    limitMatchmakingQueues?: number;
    limitRules?: number;
    limitTeams?: number;
}

export interface GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterMatchmakingQueues?: Array<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingQueuesEnum>;
    fieldsGameCenterMatchmakingRuleSets?: Array<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingRuleSetsEnum>;
    limit?: number;
    include?: Array<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterMatchmakingRules?: Array<GameCenterMatchmakingRuleSetsRulesGetToManyRelatedFieldsGameCenterMatchmakingRulesEnum>;
    limit?: number;
}

export interface GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterMatchmakingTeams?: Array<GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedFieldsGameCenterMatchmakingTeamsEnum>;
    limit?: number;
}

export interface GameCenterMatchmakingRuleSetsUpdateInstanceRequest {
    id: string;
    gameCenterMatchmakingRuleSetUpdateRequest: GameCenterMatchmakingRuleSetUpdateRequest;
}

/**
 * 
 */
export class GameCenterMatchmakingRuleSetsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterMatchmakingRuleSetsCreateInstanceRaw(requestParameters: GameCenterMatchmakingRuleSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRuleSetResponse>> {
        if (requestParameters.gameCenterMatchmakingRuleSetCreateRequest === null || requestParameters.gameCenterMatchmakingRuleSetCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterMatchmakingRuleSetCreateRequest','Required parameter requestParameters.gameCenterMatchmakingRuleSetCreateRequest was null or undefined when calling gameCenterMatchmakingRuleSetsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterMatchmakingRuleSetCreateRequestToJSON(requestParameters.gameCenterMatchmakingRuleSetCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRuleSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsCreateInstance(requestParameters: GameCenterMatchmakingRuleSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRuleSetResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsDeleteInstanceRaw(requestParameters: GameCenterMatchmakingRuleSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsDeleteInstance(requestParameters: GameCenterMatchmakingRuleSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterMatchmakingRuleSetsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsGetCollectionRaw(requestParameters: GameCenterMatchmakingRuleSetsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRuleSetsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterMatchmakingRuleSets) {
            queryParameters['fields[gameCenterMatchmakingRuleSets]'] = requestParameters.fieldsGameCenterMatchmakingRuleSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingQueues) {
            queryParameters['fields[gameCenterMatchmakingQueues]'] = requestParameters.fieldsGameCenterMatchmakingQueues.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingTeams) {
            queryParameters['fields[gameCenterMatchmakingTeams]'] = requestParameters.fieldsGameCenterMatchmakingTeams.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingRules) {
            queryParameters['fields[gameCenterMatchmakingRules]'] = requestParameters.fieldsGameCenterMatchmakingRules.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitMatchmakingQueues !== undefined) {
            queryParameters['limit[matchmakingQueues]'] = requestParameters.limitMatchmakingQueues;
        }

        if (requestParameters.limitRules !== undefined) {
            queryParameters['limit[rules]'] = requestParameters.limitRules;
        }

        if (requestParameters.limitTeams !== undefined) {
            queryParameters['limit[teams]'] = requestParameters.limitTeams;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRuleSetsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsGetCollection(requestParameters: GameCenterMatchmakingRuleSetsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRuleSetsResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsGetInstanceRaw(requestParameters: GameCenterMatchmakingRuleSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRuleSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterMatchmakingRuleSets) {
            queryParameters['fields[gameCenterMatchmakingRuleSets]'] = requestParameters.fieldsGameCenterMatchmakingRuleSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingQueues) {
            queryParameters['fields[gameCenterMatchmakingQueues]'] = requestParameters.fieldsGameCenterMatchmakingQueues.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingTeams) {
            queryParameters['fields[gameCenterMatchmakingTeams]'] = requestParameters.fieldsGameCenterMatchmakingTeams.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingRules) {
            queryParameters['fields[gameCenterMatchmakingRules]'] = requestParameters.fieldsGameCenterMatchmakingRules.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitMatchmakingQueues !== undefined) {
            queryParameters['limit[matchmakingQueues]'] = requestParameters.limitMatchmakingQueues;
        }

        if (requestParameters.limitRules !== undefined) {
            queryParameters['limit[rules]'] = requestParameters.limitRules;
        }

        if (requestParameters.limitTeams !== undefined) {
            queryParameters['limit[teams]'] = requestParameters.limitTeams;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRuleSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsGetInstance(requestParameters: GameCenterMatchmakingRuleSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRuleSetResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRaw(requestParameters: GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingQueuesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterMatchmakingQueues) {
            queryParameters['fields[gameCenterMatchmakingQueues]'] = requestParameters.fieldsGameCenterMatchmakingQueues.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterMatchmakingRuleSets) {
            queryParameters['fields[gameCenterMatchmakingRuleSets]'] = requestParameters.fieldsGameCenterMatchmakingRuleSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingQueuesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated(requestParameters: GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingQueuesResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsRulesGetToManyRelatedRaw(requestParameters: GameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRulesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsRulesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterMatchmakingRules) {
            queryParameters['fields[gameCenterMatchmakingRules]'] = requestParameters.fieldsGameCenterMatchmakingRules.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}/rules`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRulesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsRulesGetToManyRelated(requestParameters: GameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRulesResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsRulesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRaw(requestParameters: GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingTeamsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsTeamsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterMatchmakingTeams) {
            queryParameters['fields[gameCenterMatchmakingTeams]'] = requestParameters.fieldsGameCenterMatchmakingTeams.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingTeamsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsTeamsGetToManyRelated(requestParameters: GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingTeamsResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsUpdateInstanceRaw(requestParameters: GameCenterMatchmakingRuleSetsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRuleSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRuleSetsUpdateInstance.');
        }

        if (requestParameters.gameCenterMatchmakingRuleSetUpdateRequest === null || requestParameters.gameCenterMatchmakingRuleSetUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterMatchmakingRuleSetUpdateRequest','Required parameter requestParameters.gameCenterMatchmakingRuleSetUpdateRequest was null or undefined when calling gameCenterMatchmakingRuleSetsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRuleSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterMatchmakingRuleSetUpdateRequestToJSON(requestParameters.gameCenterMatchmakingRuleSetUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRuleSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRuleSetsUpdateInstance(requestParameters: GameCenterMatchmakingRuleSetsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRuleSetResponse> {
        const response = await this.gameCenterMatchmakingRuleSetsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRuleSetsEnum = {
    MatchmakingQueues: 'matchmakingQueues',
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleLanguageVersion: 'ruleLanguageVersion',
    Rules: 'rules',
    Teams: 'teams'
} as const;
export type GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRuleSetsEnum = typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRuleSetsEnum[keyof typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRuleSetsEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetCollectionIncludeEnum = {
    MatchmakingQueues: 'matchmakingQueues',
    Rules: 'rules',
    Teams: 'teams'
} as const;
export type GameCenterMatchmakingRuleSetsGetCollectionIncludeEnum = typeof GameCenterMatchmakingRuleSetsGetCollectionIncludeEnum[keyof typeof GameCenterMatchmakingRuleSetsGetCollectionIncludeEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingQueuesEnum = {
    ClassicMatchmakingBundleIds: 'classicMatchmakingBundleIds',
    ExperimentRuleSet: 'experimentRuleSet',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingQueuesEnum = typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingQueuesEnum[keyof typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingQueuesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingTeamsEnum = {
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingTeamsEnum = typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingTeamsEnum[keyof typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingTeamsEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRulesEnum = {
    Description: 'description',
    Expression: 'expression',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet',
    Type: 'type',
    Weight: 'weight'
} as const;
export type GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRulesEnum = typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRulesEnum[keyof typeof GameCenterMatchmakingRuleSetsGetCollectionFieldsGameCenterMatchmakingRulesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRuleSetsEnum = {
    MatchmakingQueues: 'matchmakingQueues',
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleLanguageVersion: 'ruleLanguageVersion',
    Rules: 'rules',
    Teams: 'teams'
} as const;
export type GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRuleSetsEnum = typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRuleSetsEnum[keyof typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRuleSetsEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetInstanceIncludeEnum = {
    MatchmakingQueues: 'matchmakingQueues',
    Rules: 'rules',
    Teams: 'teams'
} as const;
export type GameCenterMatchmakingRuleSetsGetInstanceIncludeEnum = typeof GameCenterMatchmakingRuleSetsGetInstanceIncludeEnum[keyof typeof GameCenterMatchmakingRuleSetsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingQueuesEnum = {
    ClassicMatchmakingBundleIds: 'classicMatchmakingBundleIds',
    ExperimentRuleSet: 'experimentRuleSet',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingQueuesEnum = typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingQueuesEnum[keyof typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingQueuesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingTeamsEnum = {
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingTeamsEnum = typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingTeamsEnum[keyof typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingTeamsEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRulesEnum = {
    Description: 'description',
    Expression: 'expression',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet',
    Type: 'type',
    Weight: 'weight'
} as const;
export type GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRulesEnum = typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRulesEnum[keyof typeof GameCenterMatchmakingRuleSetsGetInstanceFieldsGameCenterMatchmakingRulesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingQueuesEnum = {
    ClassicMatchmakingBundleIds: 'classicMatchmakingBundleIds',
    ExperimentRuleSet: 'experimentRuleSet',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingQueuesEnum = typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingQueuesEnum[keyof typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingQueuesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingRuleSetsEnum = {
    MatchmakingQueues: 'matchmakingQueues',
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleLanguageVersion: 'ruleLanguageVersion',
    Rules: 'rules',
    Teams: 'teams'
} as const;
export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingRuleSetsEnum = typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingRuleSetsEnum[keyof typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedFieldsGameCenterMatchmakingRuleSetsEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedIncludeEnum = {
    ExperimentRuleSet: 'experimentRuleSet',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedIncludeEnum = typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedIncludeEnum[keyof typeof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsRulesGetToManyRelatedFieldsGameCenterMatchmakingRulesEnum = {
    Description: 'description',
    Expression: 'expression',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet',
    Type: 'type',
    Weight: 'weight'
} as const;
export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedFieldsGameCenterMatchmakingRulesEnum = typeof GameCenterMatchmakingRuleSetsRulesGetToManyRelatedFieldsGameCenterMatchmakingRulesEnum[keyof typeof GameCenterMatchmakingRuleSetsRulesGetToManyRelatedFieldsGameCenterMatchmakingRulesEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedFieldsGameCenterMatchmakingTeamsEnum = {
    MaxPlayers: 'maxPlayers',
    MinPlayers: 'minPlayers',
    ReferenceName: 'referenceName',
    RuleSet: 'ruleSet'
} as const;
export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedFieldsGameCenterMatchmakingTeamsEnum = typeof GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedFieldsGameCenterMatchmakingTeamsEnum[keyof typeof GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedFieldsGameCenterMatchmakingTeamsEnum];
