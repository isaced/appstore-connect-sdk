/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionSubmissionCreateRequest,
  SubscriptionSubmissionResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionSubmissionCreateRequestFromJSON,
    SubscriptionSubmissionCreateRequestToJSON,
    SubscriptionSubmissionResponseFromJSON,
    SubscriptionSubmissionResponseToJSON,
} from '../models';

export interface SubscriptionSubmissionsCreateInstanceRequest {
    subscriptionSubmissionCreateRequest: SubscriptionSubmissionCreateRequest;
}

/**
 * 
 */
export class SubscriptionSubmissionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionSubmissionsCreateInstanceRaw(requestParameters: SubscriptionSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionSubmissionResponse>> {
        if (requestParameters.subscriptionSubmissionCreateRequest === null || requestParameters.subscriptionSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionSubmissionCreateRequest','Required parameter requestParameters.subscriptionSubmissionCreateRequest was null or undefined when calling subscriptionSubmissionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionSubmissionCreateRequestToJSON(requestParameters.subscriptionSubmissionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionSubmissionsCreateInstance(requestParameters: SubscriptionSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionSubmissionResponse> {
        const response = await this.subscriptionSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
