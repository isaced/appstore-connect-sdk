/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppWithoutIncludesResponse,
  AppsBetaTesterUsagesV1MetricResponse,
  BetaGroupBetaTestersLinkagesRequest,
  BetaGroupBetaTestersLinkagesResponse,
  BetaGroupBuildsLinkagesRequest,
  BetaGroupBuildsLinkagesResponse,
  BetaGroupCreateRequest,
  BetaGroupResponse,
  BetaGroupUpdateRequest,
  BetaGroupsResponse,
  BetaTestersWithoutIncludesResponse,
  BuildsWithoutIncludesResponse,
  ErrorResponse,
} from '../models';
import {
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    AppsBetaTesterUsagesV1MetricResponseFromJSON,
    AppsBetaTesterUsagesV1MetricResponseToJSON,
    BetaGroupBetaTestersLinkagesRequestFromJSON,
    BetaGroupBetaTestersLinkagesRequestToJSON,
    BetaGroupBetaTestersLinkagesResponseFromJSON,
    BetaGroupBetaTestersLinkagesResponseToJSON,
    BetaGroupBuildsLinkagesRequestFromJSON,
    BetaGroupBuildsLinkagesRequestToJSON,
    BetaGroupBuildsLinkagesResponseFromJSON,
    BetaGroupBuildsLinkagesResponseToJSON,
    BetaGroupCreateRequestFromJSON,
    BetaGroupCreateRequestToJSON,
    BetaGroupResponseFromJSON,
    BetaGroupResponseToJSON,
    BetaGroupUpdateRequestFromJSON,
    BetaGroupUpdateRequestToJSON,
    BetaGroupsResponseFromJSON,
    BetaGroupsResponseToJSON,
    BetaTestersWithoutIncludesResponseFromJSON,
    BetaTestersWithoutIncludesResponseToJSON,
    BuildsWithoutIncludesResponseFromJSON,
    BuildsWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaGroupsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaGroupsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface BetaGroupsBetaTesterUsagesGetMetricsRequest {
    id: string;
    limit?: number;
    groupBy?: Array<BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum>;
    filterBetaTesters?: string;
    period?: BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum;
}

export interface BetaGroupsBetaTestersCreateToManyRelationshipRequest {
    id: string;
    betaGroupBetaTestersLinkagesRequest: BetaGroupBetaTestersLinkagesRequest;
}

export interface BetaGroupsBetaTestersDeleteToManyRelationshipRequest {
    id: string;
    betaGroupBetaTestersLinkagesRequest: BetaGroupBetaTestersLinkagesRequest;
}

export interface BetaGroupsBetaTestersGetToManyRelatedRequest {
    id: string;
    fieldsBetaTesters?: Array<BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum>;
    limit?: number;
}

export interface BetaGroupsBetaTestersGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BetaGroupsBuildsCreateToManyRelationshipRequest {
    id: string;
    betaGroupBuildsLinkagesRequest: BetaGroupBuildsLinkagesRequest;
}

export interface BetaGroupsBuildsDeleteToManyRelationshipRequest {
    id: string;
    betaGroupBuildsLinkagesRequest: BetaGroupBuildsLinkagesRequest;
}

export interface BetaGroupsBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}

export interface BetaGroupsBuildsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BetaGroupsCreateInstanceRequest {
    betaGroupCreateRequest: BetaGroupCreateRequest;
}

export interface BetaGroupsDeleteInstanceRequest {
    id: string;
}

export interface BetaGroupsGetCollectionRequest {
    filterIsInternalGroup?: Array<string>;
    filterName?: Array<string>;
    filterPublicLink?: Array<string>;
    filterPublicLinkEnabled?: Array<string>;
    filterPublicLinkLimitEnabled?: Array<string>;
    filterApp?: Array<string>;
    filterBuilds?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<BetaGroupsGetCollectionSortEnum>;
    fieldsBetaGroups?: Array<BetaGroupsGetCollectionFieldsBetaGroupsEnum>;
    limit?: number;
    include?: Array<BetaGroupsGetCollectionIncludeEnum>;
    fieldsBetaTesters?: Array<BetaGroupsGetCollectionFieldsBetaTestersEnum>;
    fieldsApps?: Array<BetaGroupsGetCollectionFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaGroupsGetCollectionFieldsBuildsEnum>;
    limitBetaTesters?: number;
    limitBuilds?: number;
}

export interface BetaGroupsGetInstanceRequest {
    id: string;
    fieldsBetaGroups?: Array<BetaGroupsGetInstanceFieldsBetaGroupsEnum>;
    include?: Array<BetaGroupsGetInstanceIncludeEnum>;
    fieldsBetaTesters?: Array<BetaGroupsGetInstanceFieldsBetaTestersEnum>;
    fieldsApps?: Array<BetaGroupsGetInstanceFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaGroupsGetInstanceFieldsBuildsEnum>;
    limitBetaTesters?: number;
    limitBuilds?: number;
}

export interface BetaGroupsUpdateInstanceRequest {
    id: string;
    betaGroupUpdateRequest: BetaGroupUpdateRequest;
}

/**
 * 
 */
export class BetaGroupsApi extends runtime.BaseAPI {

    /**
     */
    async betaGroupsAppGetToOneRelatedRaw(requestParameters: BetaGroupsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsAppGetToOneRelated(requestParameters: BetaGroupsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.betaGroupsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters: BetaGroupsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaTesters !== undefined) {
            queryParameters['filter[betaTesters]'] = requestParameters.filterBetaTesters;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsBetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBetaTesterUsagesGetMetrics(requestParameters: BetaGroupsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsBetaTesterUsagesV1MetricResponse> {
        const response = await this.betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.');
        }

        if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBetaTestersLinkagesRequest','Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBetaTestersLinkagesRequestToJSON(requestParameters.betaGroupBetaTestersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaGroupsBetaTestersCreateToManyRelationship(requestParameters: BetaGroupsBetaTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.');
        }

        if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBetaTestersLinkagesRequest','Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBetaTestersLinkagesRequestToJSON(requestParameters.betaGroupBetaTestersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaGroupsBetaTestersDeleteToManyRelationship(requestParameters: BetaGroupsBetaTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters: BetaGroupsBetaTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTestersWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTestersWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBetaTestersGetToManyRelated(requestParameters: BetaGroupsBetaTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTestersWithoutIncludesResponse> {
        const response = await this.betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters: BetaGroupsBetaTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupBetaTestersLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupBetaTestersLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBetaTestersGetToManyRelationship(requestParameters: BetaGroupsBetaTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupBetaTestersLinkagesResponse> {
        const response = await this.betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters: BetaGroupsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.');
        }

        if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBuildsLinkagesRequest','Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBuildsLinkagesRequestToJSON(requestParameters.betaGroupBuildsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaGroupsBuildsCreateToManyRelationship(requestParameters: BetaGroupsBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters: BetaGroupsBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.');
        }

        if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaGroupBuildsLinkagesRequest','Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupBuildsLinkagesRequestToJSON(requestParameters.betaGroupBuildsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaGroupsBuildsDeleteToManyRelationship(requestParameters: BetaGroupsBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaGroupsBuildsGetToManyRelatedRaw(requestParameters: BetaGroupsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBuildsGetToManyRelated(requestParameters: BetaGroupsBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsWithoutIncludesResponse> {
        const response = await this.betaGroupsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBuildsGetToManyRelationshipRaw(requestParameters: BetaGroupsBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupBuildsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupBuildsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBuildsGetToManyRelationship(requestParameters: BetaGroupsBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupBuildsLinkagesResponse> {
        const response = await this.betaGroupsBuildsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsCreateInstanceRaw(requestParameters: BetaGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.betaGroupCreateRequest === null || requestParameters.betaGroupCreateRequest === undefined) {
            throw new runtime.RequiredError('betaGroupCreateRequest','Required parameter requestParameters.betaGroupCreateRequest was null or undefined when calling betaGroupsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupCreateRequestToJSON(requestParameters.betaGroupCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsCreateInstance(requestParameters: BetaGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsDeleteInstanceRaw(requestParameters: BetaGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaGroupsDeleteInstance(requestParameters: BetaGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaGroupsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaGroupsGetCollectionRaw(requestParameters: BetaGroupsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterIsInternalGroup) {
            queryParameters['filter[isInternalGroup]'] = requestParameters.filterIsInternalGroup.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPublicLink) {
            queryParameters['filter[publicLink]'] = requestParameters.filterPublicLink.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPublicLinkEnabled) {
            queryParameters['filter[publicLinkEnabled]'] = requestParameters.filterPublicLinkEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPublicLinkLimitEnabled) {
            queryParameters['filter[publicLinkLimitEnabled]'] = requestParameters.filterPublicLinkLimitEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBetaTesters !== undefined) {
            queryParameters['limit[betaTesters]'] = requestParameters.limitBetaTesters;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupsResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsGetCollection(requestParameters: BetaGroupsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupsResponse> {
        const response = await this.betaGroupsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsGetInstanceRaw(requestParameters: BetaGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBetaTesters !== undefined) {
            queryParameters['limit[betaTesters]'] = requestParameters.limitBetaTesters;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsGetInstance(requestParameters: BetaGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsUpdateInstanceRaw(requestParameters: BetaGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsUpdateInstance.');
        }

        if (requestParameters.betaGroupUpdateRequest === null || requestParameters.betaGroupUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaGroupUpdateRequest','Required parameter requestParameters.betaGroupUpdateRequest was null or undefined when calling betaGroupsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaGroupUpdateRequestToJSON(requestParameters.betaGroupUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsUpdateInstance(requestParameters: BetaGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupResponse> {
        const response = await this.betaGroupsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BetaGroupsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaGroupsAppGetToOneRelatedFieldsAppsEnum = typeof BetaGroupsAppGetToOneRelatedFieldsAppsEnum[keyof typeof BetaGroupsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: 'betaTesters'
} as const;
export type BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = typeof BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum[keyof typeof BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum];
/**
 * @export
 */
export const BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = typeof BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum = typeof BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum[keyof typeof BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum];
/**
 * @export
 */
export const BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum = typeof BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum[keyof typeof BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionSortEnum = {
    CreatedDate: 'createdDate',
    CreatedDate: '-createdDate',
    Name: 'name',
    Name: '-name',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkEnabled: '-publicLinkEnabled',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimit: '-publicLinkLimit'
} as const;
export type BetaGroupsGetCollectionSortEnum = typeof BetaGroupsGetCollectionSortEnum[keyof typeof BetaGroupsGetCollectionSortEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type BetaGroupsGetCollectionFieldsBetaGroupsEnum = typeof BetaGroupsGetCollectionFieldsBetaGroupsEnum[keyof typeof BetaGroupsGetCollectionFieldsBetaGroupsEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionIncludeEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds'
} as const;
export type BetaGroupsGetCollectionIncludeEnum = typeof BetaGroupsGetCollectionIncludeEnum[keyof typeof BetaGroupsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BetaGroupsGetCollectionFieldsBetaTestersEnum = typeof BetaGroupsGetCollectionFieldsBetaTestersEnum[keyof typeof BetaGroupsGetCollectionFieldsBetaTestersEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaGroupsGetCollectionFieldsAppsEnum = typeof BetaGroupsGetCollectionFieldsAppsEnum[keyof typeof BetaGroupsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const BetaGroupsGetCollectionFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaGroupsGetCollectionFieldsBuildsEnum = typeof BetaGroupsGetCollectionFieldsBuildsEnum[keyof typeof BetaGroupsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const BetaGroupsGetInstanceFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type BetaGroupsGetInstanceFieldsBetaGroupsEnum = typeof BetaGroupsGetInstanceFieldsBetaGroupsEnum[keyof typeof BetaGroupsGetInstanceFieldsBetaGroupsEnum];
/**
 * @export
 */
export const BetaGroupsGetInstanceIncludeEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds'
} as const;
export type BetaGroupsGetInstanceIncludeEnum = typeof BetaGroupsGetInstanceIncludeEnum[keyof typeof BetaGroupsGetInstanceIncludeEnum];
/**
 * @export
 */
export const BetaGroupsGetInstanceFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BetaGroupsGetInstanceFieldsBetaTestersEnum = typeof BetaGroupsGetInstanceFieldsBetaTestersEnum[keyof typeof BetaGroupsGetInstanceFieldsBetaTestersEnum];
/**
 * @export
 */
export const BetaGroupsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaGroupsGetInstanceFieldsAppsEnum = typeof BetaGroupsGetInstanceFieldsAppsEnum[keyof typeof BetaGroupsGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const BetaGroupsGetInstanceFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaGroupsGetInstanceFieldsBuildsEnum = typeof BetaGroupsGetInstanceFieldsBuildsEnum[keyof typeof BetaGroupsGetInstanceFieldsBuildsEnum];
