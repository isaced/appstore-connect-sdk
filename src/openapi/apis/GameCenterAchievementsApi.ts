/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementCreateRequest,
  GameCenterAchievementGroupAchievementLinkageRequest,
  GameCenterAchievementGroupAchievementLinkageResponse,
  GameCenterAchievementLocalizationsResponse,
  GameCenterAchievementReleasesResponse,
  GameCenterAchievementResponse,
  GameCenterAchievementUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementCreateRequestFromJSON,
    GameCenterAchievementCreateRequestToJSON,
    GameCenterAchievementGroupAchievementLinkageRequestFromJSON,
    GameCenterAchievementGroupAchievementLinkageRequestToJSON,
    GameCenterAchievementGroupAchievementLinkageResponseFromJSON,
    GameCenterAchievementGroupAchievementLinkageResponseToJSON,
    GameCenterAchievementLocalizationsResponseFromJSON,
    GameCenterAchievementLocalizationsResponseToJSON,
    GameCenterAchievementReleasesResponseFromJSON,
    GameCenterAchievementReleasesResponseToJSON,
    GameCenterAchievementResponseFromJSON,
    GameCenterAchievementResponseToJSON,
    GameCenterAchievementUpdateRequestFromJSON,
    GameCenterAchievementUpdateRequestToJSON,
} from '../models';

export interface GameCenterAchievementsCreateInstanceRequest {
    gameCenterAchievementCreateRequest: GameCenterAchievementCreateRequest;
}

export interface GameCenterAchievementsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterAchievementsGetInstanceRequest {
    id: string;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum>;
    include?: Array<GameCenterAchievementsGetInstanceIncludeEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterGroups?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum>;
}

export interface GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest {
    id: string;
}

export interface GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest {
    id: string;
    gameCenterAchievementGroupAchievementLinkageRequest: GameCenterAchievementGroupAchievementLinkageRequest;
}

export interface GameCenterAchievementsLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterAchievementImages?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum>;
}

export interface GameCenterAchievementsReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterDetail?: Array<string>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterAchievementsUpdateInstanceRequest {
    id: string;
    gameCenterAchievementUpdateRequest: GameCenterAchievementUpdateRequest;
}

/**
 * 
 */
export class GameCenterAchievementsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterAchievementsCreateInstanceRaw(requestParameters: GameCenterAchievementsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>> {
        if (requestParameters.gameCenterAchievementCreateRequest === null || requestParameters.gameCenterAchievementCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementCreateRequest','Required parameter requestParameters.gameCenterAchievementCreateRequest was null or undefined when calling gameCenterAchievementsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementCreateRequestToJSON(requestParameters.gameCenterAchievementCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsCreateInstance(requestParameters: GameCenterAchievementsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse> {
        const response = await this.gameCenterAchievementsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsDeleteInstanceRaw(requestParameters: GameCenterAchievementsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAchievementsDeleteInstance(requestParameters: GameCenterAchievementsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAchievementsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAchievementsGetInstanceRaw(requestParameters: GameCenterAchievementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsGetInstance(requestParameters: GameCenterAchievementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse> {
        const response = await this.gameCenterAchievementsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementGetToOneRelatedRaw(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementGetToOneRelated(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse> {
        const response = await this.gameCenterAchievementsGroupAchievementGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementGetToOneRelationshipRaw(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementGroupAchievementLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}/relationships/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementGroupAchievementLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementGetToOneRelationship(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementGroupAchievementLinkageResponse> {
        const response = await this.gameCenterAchievementsGroupAchievementGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementUpdateToOneRelationshipRaw(requestParameters: GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship.');
        }

        if (requestParameters.gameCenterAchievementGroupAchievementLinkageRequest === null || requestParameters.gameCenterAchievementGroupAchievementLinkageRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementGroupAchievementLinkageRequest','Required parameter requestParameters.gameCenterAchievementGroupAchievementLinkageRequest was null or undefined when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}/relationships/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementGroupAchievementLinkageRequestToJSON(requestParameters.gameCenterAchievementGroupAchievementLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAchievementsGroupAchievementUpdateToOneRelationship(requestParameters: GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAchievementsGroupAchievementUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAchievementsLocalizationsGetToManyRelatedRaw(requestParameters: GameCenterAchievementsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementImages) {
            queryParameters['fields[gameCenterAchievementImages]'] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementLocalizations) {
            queryParameters['fields[gameCenterAchievementLocalizations]'] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsLocalizationsGetToManyRelated(requestParameters: GameCenterAchievementsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementLocalizationsResponse> {
        const response = await this.gameCenterAchievementsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsReleasesGetToManyRelatedRaw(requestParameters: GameCenterAchievementsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterDetail) {
            queryParameters['filter[gameCenterDetail]'] = requestParameters.filterGameCenterDetail.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievementReleases) {
            queryParameters['fields[gameCenterAchievementReleases]'] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAchievements) {
            queryParameters['fields[gameCenterAchievements]'] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}/releases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsReleasesGetToManyRelated(requestParameters: GameCenterAchievementsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementReleasesResponse> {
        const response = await this.gameCenterAchievementsReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementsUpdateInstanceRaw(requestParameters: GameCenterAchievementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsUpdateInstance.');
        }

        if (requestParameters.gameCenterAchievementUpdateRequest === null || requestParameters.gameCenterAchievementUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementUpdateRequest','Required parameter requestParameters.gameCenterAchievementUpdateRequest was null or undefined when calling gameCenterAchievementsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementUpdateRequestToJSON(requestParameters.gameCenterAchievementUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementsUpdateInstance(requestParameters: GameCenterAchievementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse> {
        const response = await this.gameCenterAchievementsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGetInstanceIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterAchievementsGetInstanceIncludeEnum = typeof GameCenterAchievementsGetInstanceIncludeEnum[keyof typeof GameCenterAchievementsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail',
    Live: 'live'
} as const;
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum = typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail',
    Live: 'live'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    ReferenceName: 'referenceName'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum = typeof GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum = typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum];
/**
 * @export
 */
export const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: 'afterEarnedDescription',
    BeforeEarnedDescription: 'beforeEarnedDescription',
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterAchievementImage: 'gameCenterAchievementImage'
} as const;
export type GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum = typeof GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail',
    Live: 'live'
} as const;
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: 'archived',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GroupAchievement: 'groupAchievement',
    Localizations: 'localizations',
    Points: 'points',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    Repeatable: 'repeatable',
    ShowBeforeEarned: 'showBeforeEarned',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export const GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum = {
    GameCenterAchievement: 'gameCenterAchievement',
    GameCenterDetail: 'gameCenterDetail'
} as const;
export type GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum = typeof GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum];
