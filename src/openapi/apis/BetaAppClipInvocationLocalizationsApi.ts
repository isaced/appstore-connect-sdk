/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BetaAppClipInvocationLocalizationCreateRequest,
  BetaAppClipInvocationLocalizationResponse,
  BetaAppClipInvocationLocalizationUpdateRequest,
  ErrorResponse,
} from '../models';
import {
    BetaAppClipInvocationLocalizationCreateRequestFromJSON,
    BetaAppClipInvocationLocalizationCreateRequestToJSON,
    BetaAppClipInvocationLocalizationResponseFromJSON,
    BetaAppClipInvocationLocalizationResponseToJSON,
    BetaAppClipInvocationLocalizationUpdateRequestFromJSON,
    BetaAppClipInvocationLocalizationUpdateRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaAppClipInvocationLocalizationsCreateInstanceRequest {
    betaAppClipInvocationLocalizationCreateRequest: BetaAppClipInvocationLocalizationCreateRequest;
}

export interface BetaAppClipInvocationLocalizationsDeleteInstanceRequest {
    id: string;
}

export interface BetaAppClipInvocationLocalizationsUpdateInstanceRequest {
    id: string;
    betaAppClipInvocationLocalizationUpdateRequest: BetaAppClipInvocationLocalizationUpdateRequest;
}

/**
 * 
 */
export class BetaAppClipInvocationLocalizationsApi extends runtime.BaseAPI {

    /**
     */
    async betaAppClipInvocationLocalizationsCreateInstanceRaw(requestParameters: BetaAppClipInvocationLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppClipInvocationLocalizationResponse>> {
        if (requestParameters.betaAppClipInvocationLocalizationCreateRequest === null || requestParameters.betaAppClipInvocationLocalizationCreateRequest === undefined) {
            throw new runtime.RequiredError('betaAppClipInvocationLocalizationCreateRequest','Required parameter requestParameters.betaAppClipInvocationLocalizationCreateRequest was null or undefined when calling betaAppClipInvocationLocalizationsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppClipInvocationLocalizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppClipInvocationLocalizationCreateRequestToJSON(requestParameters.betaAppClipInvocationLocalizationCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppClipInvocationLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppClipInvocationLocalizationsCreateInstance(requestParameters: BetaAppClipInvocationLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppClipInvocationLocalizationResponse> {
        const response = await this.betaAppClipInvocationLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppClipInvocationLocalizationsDeleteInstanceRaw(requestParameters: BetaAppClipInvocationLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppClipInvocationLocalizationsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppClipInvocationLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaAppClipInvocationLocalizationsDeleteInstance(requestParameters: BetaAppClipInvocationLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaAppClipInvocationLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaAppClipInvocationLocalizationsUpdateInstanceRaw(requestParameters: BetaAppClipInvocationLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppClipInvocationLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppClipInvocationLocalizationsUpdateInstance.');
        }

        if (requestParameters.betaAppClipInvocationLocalizationUpdateRequest === null || requestParameters.betaAppClipInvocationLocalizationUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaAppClipInvocationLocalizationUpdateRequest','Required parameter requestParameters.betaAppClipInvocationLocalizationUpdateRequest was null or undefined when calling betaAppClipInvocationLocalizationsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppClipInvocationLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppClipInvocationLocalizationUpdateRequestToJSON(requestParameters.betaAppClipInvocationLocalizationUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppClipInvocationLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppClipInvocationLocalizationsUpdateInstance(requestParameters: BetaAppClipInvocationLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppClipInvocationLocalizationResponse> {
        const response = await this.betaAppClipInvocationLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
