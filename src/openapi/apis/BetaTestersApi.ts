/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppsWithoutIncludesResponse,
  BetaGroupsWithoutIncludesResponse,
  BetaTesterAppsLinkagesRequest,
  BetaTesterAppsLinkagesResponse,
  BetaTesterBetaGroupsLinkagesRequest,
  BetaTesterBetaGroupsLinkagesResponse,
  BetaTesterBuildsLinkagesRequest,
  BetaTesterBuildsLinkagesResponse,
  BetaTesterCreateRequest,
  BetaTesterResponse,
  BetaTesterUsagesV1MetricResponse,
  BetaTestersResponse,
  BuildsWithoutIncludesResponse,
  ErrorResponse,
} from '../models';
import {
    AppsWithoutIncludesResponseFromJSON,
    AppsWithoutIncludesResponseToJSON,
    BetaGroupsWithoutIncludesResponseFromJSON,
    BetaGroupsWithoutIncludesResponseToJSON,
    BetaTesterAppsLinkagesRequestFromJSON,
    BetaTesterAppsLinkagesRequestToJSON,
    BetaTesterAppsLinkagesResponseFromJSON,
    BetaTesterAppsLinkagesResponseToJSON,
    BetaTesterBetaGroupsLinkagesRequestFromJSON,
    BetaTesterBetaGroupsLinkagesRequestToJSON,
    BetaTesterBetaGroupsLinkagesResponseFromJSON,
    BetaTesterBetaGroupsLinkagesResponseToJSON,
    BetaTesterBuildsLinkagesRequestFromJSON,
    BetaTesterBuildsLinkagesRequestToJSON,
    BetaTesterBuildsLinkagesResponseFromJSON,
    BetaTesterBuildsLinkagesResponseToJSON,
    BetaTesterCreateRequestFromJSON,
    BetaTesterCreateRequestToJSON,
    BetaTesterResponseFromJSON,
    BetaTesterResponseToJSON,
    BetaTesterUsagesV1MetricResponseFromJSON,
    BetaTesterUsagesV1MetricResponseToJSON,
    BetaTestersResponseFromJSON,
    BetaTestersResponseToJSON,
    BuildsWithoutIncludesResponseFromJSON,
    BuildsWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaTestersAppsDeleteToManyRelationshipRequest {
    id: string;
    betaTesterAppsLinkagesRequest: BetaTesterAppsLinkagesRequest;
}

export interface BetaTestersAppsGetToManyRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaTestersAppsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
}

export interface BetaTestersAppsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BetaTestersBetaGroupsCreateToManyRelationshipRequest {
    id: string;
    betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest;
}

export interface BetaTestersBetaGroupsDeleteToManyRelationshipRequest {
    id: string;
    betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest;
}

export interface BetaTestersBetaGroupsGetToManyRelatedRequest {
    id: string;
    fieldsBetaGroups?: Array<BetaTestersBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum>;
    limit?: number;
}

export interface BetaTestersBetaGroupsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BetaTestersBetaTesterUsagesGetMetricsRequest {
    id: string;
    filterApps: string;
    limit?: number;
    period?: BetaTestersBetaTesterUsagesGetMetricsPeriodEnum;
}

export interface BetaTestersBuildsCreateToManyRelationshipRequest {
    id: string;
    betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest;
}

export interface BetaTestersBuildsDeleteToManyRelationshipRequest {
    id: string;
    betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest;
}

export interface BetaTestersBuildsGetToManyRelatedRequest {
    id: string;
    fieldsBuilds?: Array<BetaTestersBuildsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
}

export interface BetaTestersBuildsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BetaTestersCreateInstanceRequest {
    betaTesterCreateRequest: BetaTesterCreateRequest;
}

export interface BetaTestersDeleteInstanceRequest {
    id: string;
}

export interface BetaTestersGetCollectionRequest {
    filterEmail?: Array<string>;
    filterFirstName?: Array<string>;
    filterInviteType?: Array<BetaTestersGetCollectionFilterInviteTypeEnum>;
    filterLastName?: Array<string>;
    filterApps?: Array<string>;
    filterBetaGroups?: Array<string>;
    filterBuilds?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<BetaTestersGetCollectionSortEnum>;
    fieldsBetaTesters?: Array<BetaTestersGetCollectionFieldsBetaTestersEnum>;
    limit?: number;
    include?: Array<BetaTestersGetCollectionIncludeEnum>;
    fieldsApps?: Array<BetaTestersGetCollectionFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaTestersGetCollectionFieldsBuildsEnum>;
    fieldsBetaGroups?: Array<BetaTestersGetCollectionFieldsBetaGroupsEnum>;
    limitApps?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
}

export interface BetaTestersGetInstanceRequest {
    id: string;
    fieldsBetaTesters?: Array<BetaTestersGetInstanceFieldsBetaTestersEnum>;
    include?: Array<BetaTestersGetInstanceIncludeEnum>;
    fieldsApps?: Array<BetaTestersGetInstanceFieldsAppsEnum>;
    fieldsBuilds?: Array<BetaTestersGetInstanceFieldsBuildsEnum>;
    fieldsBetaGroups?: Array<BetaTestersGetInstanceFieldsBetaGroupsEnum>;
    limitApps?: number;
    limitBetaGroups?: number;
    limitBuilds?: number;
}

/**
 * 
 */
export class BetaTestersApi extends runtime.BaseAPI {

    /**
     */
    async betaTestersAppsDeleteToManyRelationshipRaw(requestParameters: BetaTestersAppsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersAppsDeleteToManyRelationship.');
        }

        if (requestParameters.betaTesterAppsLinkagesRequest === null || requestParameters.betaTesterAppsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaTesterAppsLinkagesRequest','Required parameter requestParameters.betaTesterAppsLinkagesRequest was null or undefined when calling betaTestersAppsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/apps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterAppsLinkagesRequestToJSON(requestParameters.betaTesterAppsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersAppsDeleteToManyRelationship(requestParameters: BetaTestersAppsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersAppsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersAppsGetToManyRelatedRaw(requestParameters: BetaTestersAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersAppsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/apps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersAppsGetToManyRelated(requestParameters: BetaTestersAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsWithoutIncludesResponse> {
        const response = await this.betaTestersAppsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersAppsGetToManyRelationshipRaw(requestParameters: BetaTestersAppsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterAppsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersAppsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/apps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterAppsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersAppsGetToManyRelationship(requestParameters: BetaTestersAppsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterAppsLinkagesResponse> {
        const response = await this.betaTestersAppsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBetaGroupsCreateToManyRelationshipRaw(requestParameters: BetaTestersBetaGroupsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaGroupsCreateToManyRelationship.');
        }

        if (requestParameters.betaTesterBetaGroupsLinkagesRequest === null || requestParameters.betaTesterBetaGroupsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaTesterBetaGroupsLinkagesRequest','Required parameter requestParameters.betaTesterBetaGroupsLinkagesRequest was null or undefined when calling betaTestersBetaGroupsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterBetaGroupsLinkagesRequestToJSON(requestParameters.betaTesterBetaGroupsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersBetaGroupsCreateToManyRelationship(requestParameters: BetaTestersBetaGroupsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersBetaGroupsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersBetaGroupsDeleteToManyRelationshipRaw(requestParameters: BetaTestersBetaGroupsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaGroupsDeleteToManyRelationship.');
        }

        if (requestParameters.betaTesterBetaGroupsLinkagesRequest === null || requestParameters.betaTesterBetaGroupsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaTesterBetaGroupsLinkagesRequest','Required parameter requestParameters.betaTesterBetaGroupsLinkagesRequest was null or undefined when calling betaTestersBetaGroupsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterBetaGroupsLinkagesRequestToJSON(requestParameters.betaTesterBetaGroupsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersBetaGroupsDeleteToManyRelationship(requestParameters: BetaTestersBetaGroupsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersBetaGroupsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersBetaGroupsGetToManyRelatedRaw(requestParameters: BetaTestersBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaGroupsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaGroupsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaGroupsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBetaGroupsGetToManyRelated(requestParameters: BetaTestersBetaGroupsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaGroupsWithoutIncludesResponse> {
        const response = await this.betaTestersBetaGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBetaGroupsGetToManyRelationshipRaw(requestParameters: BetaTestersBetaGroupsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterBetaGroupsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaGroupsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterBetaGroupsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBetaGroupsGetToManyRelationship(requestParameters: BetaTestersBetaGroupsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterBetaGroupsLinkagesResponse> {
        const response = await this.betaTestersBetaGroupsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters: BetaTestersBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.');
        }

        if (requestParameters.filterApps === null || requestParameters.filterApps === undefined) {
            throw new runtime.RequiredError('filterApps','Required parameter requestParameters.filterApps was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.filterApps !== undefined) {
            queryParameters['filter[apps]'] = requestParameters.filterApps;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBetaTesterUsagesGetMetrics(requestParameters: BetaTestersBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterUsagesV1MetricResponse> {
        const response = await this.betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBuildsCreateToManyRelationshipRaw(requestParameters: BetaTestersBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBuildsCreateToManyRelationship.');
        }

        if (requestParameters.betaTesterBuildsLinkagesRequest === null || requestParameters.betaTesterBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaTesterBuildsLinkagesRequest','Required parameter requestParameters.betaTesterBuildsLinkagesRequest was null or undefined when calling betaTestersBuildsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterBuildsLinkagesRequestToJSON(requestParameters.betaTesterBuildsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersBuildsCreateToManyRelationship(requestParameters: BetaTestersBuildsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersBuildsDeleteToManyRelationshipRaw(requestParameters: BetaTestersBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBuildsDeleteToManyRelationship.');
        }

        if (requestParameters.betaTesterBuildsLinkagesRequest === null || requestParameters.betaTesterBuildsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('betaTesterBuildsLinkagesRequest','Required parameter requestParameters.betaTesterBuildsLinkagesRequest was null or undefined when calling betaTestersBuildsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterBuildsLinkagesRequestToJSON(requestParameters.betaTesterBuildsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersBuildsDeleteToManyRelationship(requestParameters: BetaTestersBuildsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersBuildsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersBuildsGetToManyRelatedRaw(requestParameters: BetaTestersBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBuildsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBuildsGetToManyRelated(requestParameters: BetaTestersBuildsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsWithoutIncludesResponse> {
        const response = await this.betaTestersBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBuildsGetToManyRelationshipRaw(requestParameters: BetaTestersBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterBuildsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBuildsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterBuildsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBuildsGetToManyRelationship(requestParameters: BetaTestersBuildsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterBuildsLinkagesResponse> {
        const response = await this.betaTestersBuildsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersCreateInstanceRaw(requestParameters: BetaTestersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterResponse>> {
        if (requestParameters.betaTesterCreateRequest === null || requestParameters.betaTesterCreateRequest === undefined) {
            throw new runtime.RequiredError('betaTesterCreateRequest','Required parameter requestParameters.betaTesterCreateRequest was null or undefined when calling betaTestersCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaTesterCreateRequestToJSON(requestParameters.betaTesterCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersCreateInstance(requestParameters: BetaTestersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterResponse> {
        const response = await this.betaTestersCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersDeleteInstanceRaw(requestParameters: BetaTestersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaTestersDeleteInstance(requestParameters: BetaTestersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaTestersDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaTestersGetCollectionRaw(requestParameters: BetaTestersGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTestersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterEmail) {
            queryParameters['filter[email]'] = requestParameters.filterEmail.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterFirstName) {
            queryParameters['filter[firstName]'] = requestParameters.filterFirstName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterInviteType) {
            queryParameters['filter[inviteType]'] = requestParameters.filterInviteType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterLastName) {
            queryParameters['filter[lastName]'] = requestParameters.filterLastName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApps) {
            queryParameters['filter[apps]'] = requestParameters.filterApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaGroups) {
            queryParameters['filter[betaGroups]'] = requestParameters.filterBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitApps !== undefined) {
            queryParameters['limit[apps]'] = requestParameters.limitApps;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTestersResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersGetCollection(requestParameters: BetaTestersGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTestersResponse> {
        const response = await this.betaTestersGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersGetInstanceRaw(requestParameters: BetaTestersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitApps !== undefined) {
            queryParameters['limit[apps]'] = requestParameters.limitApps;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersGetInstance(requestParameters: BetaTestersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterResponse> {
        const response = await this.betaTestersGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BetaTestersAppsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaTestersAppsGetToManyRelatedFieldsAppsEnum = typeof BetaTestersAppsGetToManyRelatedFieldsAppsEnum[keyof typeof BetaTestersAppsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BetaTestersBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type BetaTestersBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = typeof BetaTestersBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum[keyof typeof BetaTestersBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum];
/**
 * @export
 */
export const BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = typeof BetaTestersBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof BetaTestersBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const BetaTestersBuildsGetToManyRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaTestersBuildsGetToManyRelatedFieldsBuildsEnum = typeof BetaTestersBuildsGetToManyRelatedFieldsBuildsEnum[keyof typeof BetaTestersBuildsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionFilterInviteTypeEnum = {
    Email: 'EMAIL',
    PublicLink: 'PUBLIC_LINK'
} as const;
export type BetaTestersGetCollectionFilterInviteTypeEnum = typeof BetaTestersGetCollectionFilterInviteTypeEnum[keyof typeof BetaTestersGetCollectionFilterInviteTypeEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionSortEnum = {
    Email: 'email',
    Email: '-email',
    FirstName: 'firstName',
    FirstName: '-firstName',
    InviteType: 'inviteType',
    InviteType: '-inviteType',
    LastName: 'lastName',
    LastName: '-lastName',
    State: 'state',
    State: '-state'
} as const;
export type BetaTestersGetCollectionSortEnum = typeof BetaTestersGetCollectionSortEnum[keyof typeof BetaTestersGetCollectionSortEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BetaTestersGetCollectionFieldsBetaTestersEnum = typeof BetaTestersGetCollectionFieldsBetaTestersEnum[keyof typeof BetaTestersGetCollectionFieldsBetaTestersEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionIncludeEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds'
} as const;
export type BetaTestersGetCollectionIncludeEnum = typeof BetaTestersGetCollectionIncludeEnum[keyof typeof BetaTestersGetCollectionIncludeEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaTestersGetCollectionFieldsAppsEnum = typeof BetaTestersGetCollectionFieldsAppsEnum[keyof typeof BetaTestersGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaTestersGetCollectionFieldsBuildsEnum = typeof BetaTestersGetCollectionFieldsBuildsEnum[keyof typeof BetaTestersGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const BetaTestersGetCollectionFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type BetaTestersGetCollectionFieldsBetaGroupsEnum = typeof BetaTestersGetCollectionFieldsBetaGroupsEnum[keyof typeof BetaTestersGetCollectionFieldsBetaGroupsEnum];
/**
 * @export
 */
export const BetaTestersGetInstanceFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BetaTestersGetInstanceFieldsBetaTestersEnum = typeof BetaTestersGetInstanceFieldsBetaTestersEnum[keyof typeof BetaTestersGetInstanceFieldsBetaTestersEnum];
/**
 * @export
 */
export const BetaTestersGetInstanceIncludeEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds'
} as const;
export type BetaTestersGetInstanceIncludeEnum = typeof BetaTestersGetInstanceIncludeEnum[keyof typeof BetaTestersGetInstanceIncludeEnum];
/**
 * @export
 */
export const BetaTestersGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaTestersGetInstanceFieldsAppsEnum = typeof BetaTestersGetInstanceFieldsAppsEnum[keyof typeof BetaTestersGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const BetaTestersGetInstanceFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BetaTestersGetInstanceFieldsBuildsEnum = typeof BetaTestersGetInstanceFieldsBuildsEnum[keyof typeof BetaTestersGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const BetaTestersGetInstanceFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type BetaTestersGetInstanceFieldsBetaGroupsEnum = typeof BetaTestersGetInstanceFieldsBetaGroupsEnum[keyof typeof BetaTestersGetInstanceFieldsBetaGroupsEnum];
