/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppPreOrderCreateRequest,
  AppPreOrderResponse,
  AppPreOrderUpdateRequest,
  ErrorResponse,
} from '../models';
import {
    AppPreOrderCreateRequestFromJSON,
    AppPreOrderCreateRequestToJSON,
    AppPreOrderResponseFromJSON,
    AppPreOrderResponseToJSON,
    AppPreOrderUpdateRequestFromJSON,
    AppPreOrderUpdateRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppPreOrdersCreateInstanceRequest {
    appPreOrderCreateRequest: AppPreOrderCreateRequest;
}

export interface AppPreOrdersDeleteInstanceRequest {
    id: string;
}

export interface AppPreOrdersGetInstanceRequest {
    id: string;
    fieldsAppPreOrders?: Array<AppPreOrdersGetInstanceFieldsAppPreOrdersEnum>;
    include?: Array<AppPreOrdersGetInstanceIncludeEnum>;
}

export interface AppPreOrdersUpdateInstanceRequest {
    id: string;
    appPreOrderUpdateRequest: AppPreOrderUpdateRequest;
}

/**
 * 
 */
export class AppPreOrdersApi extends runtime.BaseAPI {

    /**
     */
    async appPreOrdersCreateInstanceRaw(requestParameters: AppPreOrdersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreOrderResponse>> {
        if (requestParameters.appPreOrderCreateRequest === null || requestParameters.appPreOrderCreateRequest === undefined) {
            throw new runtime.RequiredError('appPreOrderCreateRequest','Required parameter requestParameters.appPreOrderCreateRequest was null or undefined when calling appPreOrdersCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreOrders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppPreOrderCreateRequestToJSON(requestParameters.appPreOrderCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreOrdersCreateInstance(requestParameters: AppPreOrdersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreOrderResponse> {
        const response = await this.appPreOrdersCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPreOrdersDeleteInstanceRaw(requestParameters: AppPreOrdersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreOrdersDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreOrders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPreOrdersDeleteInstance(requestParameters: AppPreOrdersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPreOrdersDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPreOrdersGetInstanceRaw(requestParameters: AppPreOrdersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreOrdersGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreOrders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreOrdersGetInstance(requestParameters: AppPreOrdersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreOrderResponse> {
        const response = await this.appPreOrdersGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPreOrdersUpdateInstanceRaw(requestParameters: AppPreOrdersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreOrdersUpdateInstance.');
        }

        if (requestParameters.appPreOrderUpdateRequest === null || requestParameters.appPreOrderUpdateRequest === undefined) {
            throw new runtime.RequiredError('appPreOrderUpdateRequest','Required parameter requestParameters.appPreOrderUpdateRequest was null or undefined when calling appPreOrdersUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreOrders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppPreOrderUpdateRequestToJSON(requestParameters.appPreOrderUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreOrdersUpdateInstance(requestParameters: AppPreOrdersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreOrderResponse> {
        const response = await this.appPreOrdersUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppPreOrdersGetInstanceFieldsAppPreOrdersEnum = {
    App: 'app',
    AppReleaseDate: 'appReleaseDate',
    PreOrderAvailableDate: 'preOrderAvailableDate'
} as const;
export type AppPreOrdersGetInstanceFieldsAppPreOrdersEnum = typeof AppPreOrdersGetInstanceFieldsAppPreOrdersEnum[keyof typeof AppPreOrdersGetInstanceFieldsAppPreOrdersEnum];
/**
 * @export
 */
export const AppPreOrdersGetInstanceIncludeEnum = {
    App: 'app'
} as const;
export type AppPreOrdersGetInstanceIncludeEnum = typeof AppPreOrdersGetInstanceIncludeEnum[keyof typeof AppPreOrdersGetInstanceIncludeEnum];
