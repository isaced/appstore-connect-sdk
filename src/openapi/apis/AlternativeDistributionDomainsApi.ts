/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlternativeDistributionDomainCreateRequest,
  AlternativeDistributionDomainResponse,
  AlternativeDistributionDomainsResponse,
  ErrorResponse,
} from '../models';
import {
    AlternativeDistributionDomainCreateRequestFromJSON,
    AlternativeDistributionDomainCreateRequestToJSON,
    AlternativeDistributionDomainResponseFromJSON,
    AlternativeDistributionDomainResponseToJSON,
    AlternativeDistributionDomainsResponseFromJSON,
    AlternativeDistributionDomainsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AlternativeDistributionDomainsCreateInstanceRequest {
    alternativeDistributionDomainCreateRequest: AlternativeDistributionDomainCreateRequest;
}

export interface AlternativeDistributionDomainsDeleteInstanceRequest {
    id: string;
}

export interface AlternativeDistributionDomainsGetCollectionRequest {
    fieldsAlternativeDistributionDomains?: Array<AlternativeDistributionDomainsGetCollectionFieldsAlternativeDistributionDomainsEnum>;
    limit?: number;
}

export interface AlternativeDistributionDomainsGetInstanceRequest {
    id: string;
    fieldsAlternativeDistributionDomains?: Array<AlternativeDistributionDomainsGetInstanceFieldsAlternativeDistributionDomainsEnum>;
}

/**
 * 
 */
export class AlternativeDistributionDomainsApi extends runtime.BaseAPI {

    /**
     */
    async alternativeDistributionDomainsCreateInstanceRaw(requestParameters: AlternativeDistributionDomainsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternativeDistributionDomainResponse>> {
        if (requestParameters.alternativeDistributionDomainCreateRequest === null || requestParameters.alternativeDistributionDomainCreateRequest === undefined) {
            throw new runtime.RequiredError('alternativeDistributionDomainCreateRequest','Required parameter requestParameters.alternativeDistributionDomainCreateRequest was null or undefined when calling alternativeDistributionDomainsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alternativeDistributionDomains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlternativeDistributionDomainCreateRequestToJSON(requestParameters.alternativeDistributionDomainCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternativeDistributionDomainResponseFromJSON(jsonValue));
    }

    /**
     */
    async alternativeDistributionDomainsCreateInstance(requestParameters: AlternativeDistributionDomainsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternativeDistributionDomainResponse> {
        const response = await this.alternativeDistributionDomainsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alternativeDistributionDomainsDeleteInstanceRaw(requestParameters: AlternativeDistributionDomainsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alternativeDistributionDomainsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alternativeDistributionDomains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async alternativeDistributionDomainsDeleteInstance(requestParameters: AlternativeDistributionDomainsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.alternativeDistributionDomainsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async alternativeDistributionDomainsGetCollectionRaw(requestParameters: AlternativeDistributionDomainsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternativeDistributionDomainsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.fieldsAlternativeDistributionDomains) {
            queryParameters['fields[alternativeDistributionDomains]'] = requestParameters.fieldsAlternativeDistributionDomains.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alternativeDistributionDomains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternativeDistributionDomainsResponseFromJSON(jsonValue));
    }

    /**
     */
    async alternativeDistributionDomainsGetCollection(requestParameters: AlternativeDistributionDomainsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternativeDistributionDomainsResponse> {
        const response = await this.alternativeDistributionDomainsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alternativeDistributionDomainsGetInstanceRaw(requestParameters: AlternativeDistributionDomainsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternativeDistributionDomainResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alternativeDistributionDomainsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAlternativeDistributionDomains) {
            queryParameters['fields[alternativeDistributionDomains]'] = requestParameters.fieldsAlternativeDistributionDomains.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alternativeDistributionDomains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternativeDistributionDomainResponseFromJSON(jsonValue));
    }

    /**
     */
    async alternativeDistributionDomainsGetInstance(requestParameters: AlternativeDistributionDomainsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternativeDistributionDomainResponse> {
        const response = await this.alternativeDistributionDomainsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AlternativeDistributionDomainsGetCollectionFieldsAlternativeDistributionDomainsEnum = {
    CreatedDate: 'createdDate',
    Domain: 'domain',
    ReferenceName: 'referenceName'
} as const;
export type AlternativeDistributionDomainsGetCollectionFieldsAlternativeDistributionDomainsEnum = typeof AlternativeDistributionDomainsGetCollectionFieldsAlternativeDistributionDomainsEnum[keyof typeof AlternativeDistributionDomainsGetCollectionFieldsAlternativeDistributionDomainsEnum];
/**
 * @export
 */
export const AlternativeDistributionDomainsGetInstanceFieldsAlternativeDistributionDomainsEnum = {
    CreatedDate: 'createdDate',
    Domain: 'domain',
    ReferenceName: 'referenceName'
} as const;
export type AlternativeDistributionDomainsGetInstanceFieldsAlternativeDistributionDomainsEnum = typeof AlternativeDistributionDomainsGetInstanceFieldsAlternativeDistributionDomainsEnum[keyof typeof AlternativeDistributionDomainsGetInstanceFieldsAlternativeDistributionDomainsEnum];
