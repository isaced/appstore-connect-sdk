/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ReviewSubmissionItemCreateRequest,
  ReviewSubmissionItemResponse,
  ReviewSubmissionItemUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReviewSubmissionItemCreateRequestFromJSON,
    ReviewSubmissionItemCreateRequestToJSON,
    ReviewSubmissionItemResponseFromJSON,
    ReviewSubmissionItemResponseToJSON,
    ReviewSubmissionItemUpdateRequestFromJSON,
    ReviewSubmissionItemUpdateRequestToJSON,
} from '../models';

export interface ReviewSubmissionItemsCreateInstanceRequest {
    reviewSubmissionItemCreateRequest: ReviewSubmissionItemCreateRequest;
}

export interface ReviewSubmissionItemsDeleteInstanceRequest {
    id: string;
}

export interface ReviewSubmissionItemsUpdateInstanceRequest {
    id: string;
    reviewSubmissionItemUpdateRequest: ReviewSubmissionItemUpdateRequest;
}

/**
 * 
 */
export class ReviewSubmissionItemsApi extends runtime.BaseAPI {

    /**
     */
    async reviewSubmissionItemsCreateInstanceRaw(requestParameters: ReviewSubmissionItemsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionItemResponse>> {
        if (requestParameters.reviewSubmissionItemCreateRequest === null || requestParameters.reviewSubmissionItemCreateRequest === undefined) {
            throw new runtime.RequiredError('reviewSubmissionItemCreateRequest','Required parameter requestParameters.reviewSubmissionItemCreateRequest was null or undefined when calling reviewSubmissionItemsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissionItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewSubmissionItemCreateRequestToJSON(requestParameters.reviewSubmissionItemCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionItemsCreateInstance(requestParameters: ReviewSubmissionItemsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionItemResponse> {
        const response = await this.reviewSubmissionItemsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reviewSubmissionItemsDeleteInstanceRaw(requestParameters: ReviewSubmissionItemsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewSubmissionItemsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissionItems/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async reviewSubmissionItemsDeleteInstance(requestParameters: ReviewSubmissionItemsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reviewSubmissionItemsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async reviewSubmissionItemsUpdateInstanceRaw(requestParameters: ReviewSubmissionItemsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewSubmissionItemResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reviewSubmissionItemsUpdateInstance.');
        }

        if (requestParameters.reviewSubmissionItemUpdateRequest === null || requestParameters.reviewSubmissionItemUpdateRequest === undefined) {
            throw new runtime.RequiredError('reviewSubmissionItemUpdateRequest','Required parameter requestParameters.reviewSubmissionItemUpdateRequest was null or undefined when calling reviewSubmissionItemsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/reviewSubmissionItems/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewSubmissionItemUpdateRequestToJSON(requestParameters.reviewSubmissionItemUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewSubmissionItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async reviewSubmissionItemsUpdateInstance(requestParameters: ReviewSubmissionItemsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewSubmissionItemResponse> {
        const response = await this.reviewSubmissionItemsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
