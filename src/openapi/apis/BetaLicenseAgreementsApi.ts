/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppWithoutIncludesResponse,
  BetaLicenseAgreementResponse,
  BetaLicenseAgreementUpdateRequest,
  BetaLicenseAgreementsResponse,
  ErrorResponse,
} from '../models';
import {
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    BetaLicenseAgreementResponseFromJSON,
    BetaLicenseAgreementResponseToJSON,
    BetaLicenseAgreementUpdateRequestFromJSON,
    BetaLicenseAgreementUpdateRequestToJSON,
    BetaLicenseAgreementsResponseFromJSON,
    BetaLicenseAgreementsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaLicenseAgreementsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface BetaLicenseAgreementsGetCollectionRequest {
    filterApp?: Array<string>;
    fieldsBetaLicenseAgreements?: Array<BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum>;
    limit?: number;
    include?: Array<BetaLicenseAgreementsGetCollectionIncludeEnum>;
    fieldsApps?: Array<BetaLicenseAgreementsGetCollectionFieldsAppsEnum>;
}

export interface BetaLicenseAgreementsGetInstanceRequest {
    id: string;
    fieldsBetaLicenseAgreements?: Array<BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum>;
    include?: Array<BetaLicenseAgreementsGetInstanceIncludeEnum>;
    fieldsApps?: Array<BetaLicenseAgreementsGetInstanceFieldsAppsEnum>;
}

export interface BetaLicenseAgreementsUpdateInstanceRequest {
    id: string;
    betaLicenseAgreementUpdateRequest: BetaLicenseAgreementUpdateRequest;
}

/**
 * 
 */
export class BetaLicenseAgreementsApi extends runtime.BaseAPI {

    /**
     */
    async betaLicenseAgreementsAppGetToOneRelatedRaw(requestParameters: BetaLicenseAgreementsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaLicenseAgreementsAppGetToOneRelated(requestParameters: BetaLicenseAgreementsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.betaLicenseAgreementsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaLicenseAgreementsGetCollectionRaw(requestParameters: BetaLicenseAgreementsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementsResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaLicenseAgreementsGetCollection(requestParameters: BetaLicenseAgreementsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementsResponse> {
        const response = await this.betaLicenseAgreementsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaLicenseAgreementsGetInstanceRaw(requestParameters: BetaLicenseAgreementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaLicenseAgreementsGetInstance(requestParameters: BetaLicenseAgreementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementResponse> {
        const response = await this.betaLicenseAgreementsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaLicenseAgreementsUpdateInstanceRaw(requestParameters: BetaLicenseAgreementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaLicenseAgreementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaLicenseAgreementsUpdateInstance.');
        }

        if (requestParameters.betaLicenseAgreementUpdateRequest === null || requestParameters.betaLicenseAgreementUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaLicenseAgreementUpdateRequest','Required parameter requestParameters.betaLicenseAgreementUpdateRequest was null or undefined when calling betaLicenseAgreementsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaLicenseAgreements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaLicenseAgreementUpdateRequestToJSON(requestParameters.betaLicenseAgreementUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaLicenseAgreementResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaLicenseAgreementsUpdateInstance(requestParameters: BetaLicenseAgreementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaLicenseAgreementResponse> {
        const response = await this.betaLicenseAgreementsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum = typeof BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum[keyof typeof BetaLicenseAgreementsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum = typeof BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum[keyof typeof BetaLicenseAgreementsGetCollectionFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetCollectionIncludeEnum = {
    App: 'app'
} as const;
export type BetaLicenseAgreementsGetCollectionIncludeEnum = typeof BetaLicenseAgreementsGetCollectionIncludeEnum[keyof typeof BetaLicenseAgreementsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaLicenseAgreementsGetCollectionFieldsAppsEnum = typeof BetaLicenseAgreementsGetCollectionFieldsAppsEnum[keyof typeof BetaLicenseAgreementsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum = typeof BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum[keyof typeof BetaLicenseAgreementsGetInstanceFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetInstanceIncludeEnum = {
    App: 'app'
} as const;
export type BetaLicenseAgreementsGetInstanceIncludeEnum = typeof BetaLicenseAgreementsGetInstanceIncludeEnum[keyof typeof BetaLicenseAgreementsGetInstanceIncludeEnum];
/**
 * @export
 */
export const BetaLicenseAgreementsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaLicenseAgreementsGetInstanceFieldsAppsEnum = typeof BetaLicenseAgreementsGetInstanceFieldsAppsEnum[keyof typeof BetaLicenseAgreementsGetInstanceFieldsAppsEnum];
