/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionOfferCodeCustomCodeCreateRequest,
  SubscriptionOfferCodeCustomCodeResponse,
  SubscriptionOfferCodeCustomCodeUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionOfferCodeCustomCodeCreateRequestFromJSON,
    SubscriptionOfferCodeCustomCodeCreateRequestToJSON,
    SubscriptionOfferCodeCustomCodeResponseFromJSON,
    SubscriptionOfferCodeCustomCodeResponseToJSON,
    SubscriptionOfferCodeCustomCodeUpdateRequestFromJSON,
    SubscriptionOfferCodeCustomCodeUpdateRequestToJSON,
} from '../models';

export interface SubscriptionOfferCodeCustomCodesCreateInstanceRequest {
    subscriptionOfferCodeCustomCodeCreateRequest: SubscriptionOfferCodeCustomCodeCreateRequest;
}

export interface SubscriptionOfferCodeCustomCodesGetInstanceRequest {
    id: string;
    fieldsSubscriptionOfferCodeCustomCodes?: Array<SubscriptionOfferCodeCustomCodesGetInstanceFieldsSubscriptionOfferCodeCustomCodesEnum>;
    include?: Array<SubscriptionOfferCodeCustomCodesGetInstanceIncludeEnum>;
}

export interface SubscriptionOfferCodeCustomCodesUpdateInstanceRequest {
    id: string;
    subscriptionOfferCodeCustomCodeUpdateRequest: SubscriptionOfferCodeCustomCodeUpdateRequest;
}

/**
 * 
 */
export class SubscriptionOfferCodeCustomCodesApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionOfferCodeCustomCodesCreateInstanceRaw(requestParameters: SubscriptionOfferCodeCustomCodesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeCustomCodeResponse>> {
        if (requestParameters.subscriptionOfferCodeCustomCodeCreateRequest === null || requestParameters.subscriptionOfferCodeCustomCodeCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionOfferCodeCustomCodeCreateRequest','Required parameter requestParameters.subscriptionOfferCodeCustomCodeCreateRequest was null or undefined when calling subscriptionOfferCodeCustomCodesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeCustomCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionOfferCodeCustomCodeCreateRequestToJSON(requestParameters.subscriptionOfferCodeCustomCodeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeCustomCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeCustomCodesCreateInstance(requestParameters: SubscriptionOfferCodeCustomCodesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeCustomCodeResponse> {
        const response = await this.subscriptionOfferCodeCustomCodesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionOfferCodeCustomCodesGetInstanceRaw(requestParameters: SubscriptionOfferCodeCustomCodesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeCustomCodeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionOfferCodeCustomCodesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionOfferCodeCustomCodes) {
            queryParameters['fields[subscriptionOfferCodeCustomCodes]'] = requestParameters.fieldsSubscriptionOfferCodeCustomCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeCustomCodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeCustomCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeCustomCodesGetInstance(requestParameters: SubscriptionOfferCodeCustomCodesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeCustomCodeResponse> {
        const response = await this.subscriptionOfferCodeCustomCodesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionOfferCodeCustomCodesUpdateInstanceRaw(requestParameters: SubscriptionOfferCodeCustomCodesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeCustomCodeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionOfferCodeCustomCodesUpdateInstance.');
        }

        if (requestParameters.subscriptionOfferCodeCustomCodeUpdateRequest === null || requestParameters.subscriptionOfferCodeCustomCodeUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionOfferCodeCustomCodeUpdateRequest','Required parameter requestParameters.subscriptionOfferCodeCustomCodeUpdateRequest was null or undefined when calling subscriptionOfferCodeCustomCodesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeCustomCodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionOfferCodeCustomCodeUpdateRequestToJSON(requestParameters.subscriptionOfferCodeCustomCodeUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeCustomCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeCustomCodesUpdateInstance(requestParameters: SubscriptionOfferCodeCustomCodesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeCustomCodeResponse> {
        const response = await this.subscriptionOfferCodeCustomCodesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubscriptionOfferCodeCustomCodesGetInstanceFieldsSubscriptionOfferCodeCustomCodesEnum = {
    Active: 'active',
    CreatedDate: 'createdDate',
    CustomCode: 'customCode',
    ExpirationDate: 'expirationDate',
    NumberOfCodes: 'numberOfCodes',
    OfferCode: 'offerCode'
} as const;
export type SubscriptionOfferCodeCustomCodesGetInstanceFieldsSubscriptionOfferCodeCustomCodesEnum = typeof SubscriptionOfferCodeCustomCodesGetInstanceFieldsSubscriptionOfferCodeCustomCodesEnum[keyof typeof SubscriptionOfferCodeCustomCodesGetInstanceFieldsSubscriptionOfferCodeCustomCodesEnum];
/**
 * @export
 */
export const SubscriptionOfferCodeCustomCodesGetInstanceIncludeEnum = {
    OfferCode: 'offerCode'
} as const;
export type SubscriptionOfferCodeCustomCodesGetInstanceIncludeEnum = typeof SubscriptionOfferCodeCustomCodesGetInstanceIncludeEnum[keyof typeof SubscriptionOfferCodeCustomCodesGetInstanceIncludeEnum];
