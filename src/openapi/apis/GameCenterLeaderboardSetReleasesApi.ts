/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterLeaderboardSetReleaseCreateRequest,
  GameCenterLeaderboardSetReleaseResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterLeaderboardSetReleaseCreateRequestFromJSON,
    GameCenterLeaderboardSetReleaseCreateRequestToJSON,
    GameCenterLeaderboardSetReleaseResponseFromJSON,
    GameCenterLeaderboardSetReleaseResponseToJSON,
} from '../models';

export interface GameCenterLeaderboardSetReleasesCreateInstanceRequest {
    gameCenterLeaderboardSetReleaseCreateRequest: GameCenterLeaderboardSetReleaseCreateRequest;
}

export interface GameCenterLeaderboardSetReleasesDeleteInstanceRequest {
    id: string;
}

export interface GameCenterLeaderboardSetReleasesGetInstanceRequest {
    id: string;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterLeaderboardSetReleasesGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum>;
    include?: Array<GameCenterLeaderboardSetReleasesGetInstanceIncludeEnum>;
}

/**
 * 
 */
export class GameCenterLeaderboardSetReleasesApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterLeaderboardSetReleasesCreateInstanceRaw(requestParameters: GameCenterLeaderboardSetReleasesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetReleaseResponse>> {
        if (requestParameters.gameCenterLeaderboardSetReleaseCreateRequest === null || requestParameters.gameCenterLeaderboardSetReleaseCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetReleaseCreateRequest','Required parameter requestParameters.gameCenterLeaderboardSetReleaseCreateRequest was null or undefined when calling gameCenterLeaderboardSetReleasesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetReleases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetReleaseCreateRequestToJSON(requestParameters.gameCenterLeaderboardSetReleaseCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetReleaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetReleasesCreateInstance(requestParameters: GameCenterLeaderboardSetReleasesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetReleaseResponse> {
        const response = await this.gameCenterLeaderboardSetReleasesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetReleasesDeleteInstanceRaw(requestParameters: GameCenterLeaderboardSetReleasesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetReleasesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetReleases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetReleasesDeleteInstance(requestParameters: GameCenterLeaderboardSetReleasesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetReleasesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetReleasesGetInstanceRaw(requestParameters: GameCenterLeaderboardSetReleasesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetReleaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetReleasesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetReleases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetReleaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetReleasesGetInstance(requestParameters: GameCenterLeaderboardSetReleasesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetReleaseResponse> {
        const response = await this.gameCenterLeaderboardSetReleasesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterLeaderboardSetReleasesGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    Live: 'live'
} as const;
export type GameCenterLeaderboardSetReleasesGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterLeaderboardSetReleasesGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterLeaderboardSetReleasesGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetReleasesGetInstanceIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterLeaderboardSetReleasesGetInstanceIncludeEnum = typeof GameCenterLeaderboardSetReleasesGetInstanceIncludeEnum[keyof typeof GameCenterLeaderboardSetReleasesGetInstanceIncludeEnum];
