/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterLeaderboardSetImageResponse,
  GameCenterLeaderboardSetLocalizationCreateRequest,
  GameCenterLeaderboardSetLocalizationResponse,
  GameCenterLeaderboardSetLocalizationUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterLeaderboardSetImageResponseFromJSON,
    GameCenterLeaderboardSetImageResponseToJSON,
    GameCenterLeaderboardSetLocalizationCreateRequestFromJSON,
    GameCenterLeaderboardSetLocalizationCreateRequestToJSON,
    GameCenterLeaderboardSetLocalizationResponseFromJSON,
    GameCenterLeaderboardSetLocalizationResponseToJSON,
    GameCenterLeaderboardSetLocalizationUpdateRequestFromJSON,
    GameCenterLeaderboardSetLocalizationUpdateRequestToJSON,
} from '../models';

export interface GameCenterLeaderboardSetLocalizationsCreateInstanceRequest {
    gameCenterLeaderboardSetLocalizationCreateRequest: GameCenterLeaderboardSetLocalizationCreateRequest;
}

export interface GameCenterLeaderboardSetLocalizationsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboardSetImages?: Array<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetImagesEnum>;
    include?: Array<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardSetLocalizationsGetInstanceRequest {
    id: string;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    include?: Array<GameCenterLeaderboardSetLocalizationsGetInstanceIncludeEnum>;
    fieldsGameCenterLeaderboardSetImages?: Array<GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetImagesEnum>;
}

export interface GameCenterLeaderboardSetLocalizationsUpdateInstanceRequest {
    id: string;
    gameCenterLeaderboardSetLocalizationUpdateRequest: GameCenterLeaderboardSetLocalizationUpdateRequest;
}

/**
 * 
 */
export class GameCenterLeaderboardSetLocalizationsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterLeaderboardSetLocalizationsCreateInstanceRaw(requestParameters: GameCenterLeaderboardSetLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetLocalizationResponse>> {
        if (requestParameters.gameCenterLeaderboardSetLocalizationCreateRequest === null || requestParameters.gameCenterLeaderboardSetLocalizationCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetLocalizationCreateRequest','Required parameter requestParameters.gameCenterLeaderboardSetLocalizationCreateRequest was null or undefined when calling gameCenterLeaderboardSetLocalizationsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetLocalizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetLocalizationCreateRequestToJSON(requestParameters.gameCenterLeaderboardSetLocalizationCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsCreateInstance(requestParameters: GameCenterLeaderboardSetLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetLocalizationResponse> {
        const response = await this.gameCenterLeaderboardSetLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsDeleteInstanceRaw(requestParameters: GameCenterLeaderboardSetLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetLocalizationsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsDeleteInstance(requestParameters: GameCenterLeaderboardSetLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRaw(requestParameters: GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetImages) {
            queryParameters['fields[gameCenterLeaderboardSetImages]'] = requestParameters.fieldsGameCenterLeaderboardSetImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated(requestParameters: GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetImageResponse> {
        const response = await this.gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsGetInstanceRaw(requestParameters: GameCenterLeaderboardSetLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetLocalizationsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetImages) {
            queryParameters['fields[gameCenterLeaderboardSetImages]'] = requestParameters.fieldsGameCenterLeaderboardSetImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsGetInstance(requestParameters: GameCenterLeaderboardSetLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetLocalizationResponse> {
        const response = await this.gameCenterLeaderboardSetLocalizationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsUpdateInstanceRaw(requestParameters: GameCenterLeaderboardSetLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetLocalizationsUpdateInstance.');
        }

        if (requestParameters.gameCenterLeaderboardSetLocalizationUpdateRequest === null || requestParameters.gameCenterLeaderboardSetLocalizationUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetLocalizationUpdateRequest','Required parameter requestParameters.gameCenterLeaderboardSetLocalizationUpdateRequest was null or undefined when calling gameCenterLeaderboardSetLocalizationsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSetLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetLocalizationUpdateRequestToJSON(requestParameters.gameCenterLeaderboardSetLocalizationUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetLocalizationsUpdateInstance(requestParameters: GameCenterLeaderboardSetLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetLocalizationResponse> {
        const response = await this.gameCenterLeaderboardSetLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterLeaderboardSetLocalization: 'gameCenterLeaderboardSetLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetImagesEnum = typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetImagesEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedFieldsGameCenterLeaderboardSetImagesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedIncludeEnum = {
    GameCenterLeaderboardSetLocalization: 'gameCenterLeaderboardSetLocalization'
} as const;
export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedIncludeEnum = typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedIncludeEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGetInstanceIncludeEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage'
} as const;
export type GameCenterLeaderboardSetLocalizationsGetInstanceIncludeEnum = typeof GameCenterLeaderboardSetLocalizationsGetInstanceIncludeEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterLeaderboardSetLocalization: 'gameCenterLeaderboardSetLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetImagesEnum = typeof GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetImagesEnum[keyof typeof GameCenterLeaderboardSetLocalizationsGetInstanceFieldsGameCenterLeaderboardSetImagesEnum];
