/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppPreviewSetAppPreviewsLinkagesRequest,
  AppPreviewSetAppPreviewsLinkagesResponse,
  AppPreviewSetCreateRequest,
  AppPreviewSetResponse,
  AppPreviewsResponse,
  ErrorResponse,
} from '../models';
import {
    AppPreviewSetAppPreviewsLinkagesRequestFromJSON,
    AppPreviewSetAppPreviewsLinkagesRequestToJSON,
    AppPreviewSetAppPreviewsLinkagesResponseFromJSON,
    AppPreviewSetAppPreviewsLinkagesResponseToJSON,
    AppPreviewSetCreateRequestFromJSON,
    AppPreviewSetCreateRequestToJSON,
    AppPreviewSetResponseFromJSON,
    AppPreviewSetResponseToJSON,
    AppPreviewsResponseFromJSON,
    AppPreviewsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppPreviewSetsAppPreviewsGetToManyRelatedRequest {
    id: string;
    fieldsAppPreviews?: Array<AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewsEnum>;
    fieldsAppPreviewSets?: Array<AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewSetsEnum>;
    limit?: number;
    include?: Array<AppPreviewSetsAppPreviewsGetToManyRelatedIncludeEnum>;
}

export interface AppPreviewSetsAppPreviewsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface AppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest {
    id: string;
    appPreviewSetAppPreviewsLinkagesRequest: AppPreviewSetAppPreviewsLinkagesRequest;
}

export interface AppPreviewSetsCreateInstanceRequest {
    appPreviewSetCreateRequest: AppPreviewSetCreateRequest;
}

export interface AppPreviewSetsDeleteInstanceRequest {
    id: string;
}

export interface AppPreviewSetsGetInstanceRequest {
    id: string;
    fieldsAppPreviewSets?: Array<AppPreviewSetsGetInstanceFieldsAppPreviewSetsEnum>;
    include?: Array<AppPreviewSetsGetInstanceIncludeEnum>;
    fieldsAppPreviews?: Array<AppPreviewSetsGetInstanceFieldsAppPreviewsEnum>;
    limitAppPreviews?: number;
}

/**
 * 
 */
export class AppPreviewSetsApi extends runtime.BaseAPI {

    /**
     */
    async appPreviewSetsAppPreviewsGetToManyRelatedRaw(requestParameters: AppPreviewSetsAppPreviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreviewsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreviewSetsAppPreviewsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppPreviews) {
            queryParameters['fields[appPreviews]'] = requestParameters.fieldsAppPreviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPreviewSets) {
            queryParameters['fields[appPreviewSets]'] = requestParameters.fieldsAppPreviewSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets/{id}/appPreviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreviewsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreviewSetsAppPreviewsGetToManyRelated(requestParameters: AppPreviewSetsAppPreviewsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreviewsResponse> {
        const response = await this.appPreviewSetsAppPreviewsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPreviewSetsAppPreviewsGetToManyRelationshipRaw(requestParameters: AppPreviewSetsAppPreviewsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreviewSetAppPreviewsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreviewSetsAppPreviewsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets/{id}/relationships/appPreviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreviewSetAppPreviewsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreviewSetsAppPreviewsGetToManyRelationship(requestParameters: AppPreviewSetsAppPreviewsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreviewSetAppPreviewsLinkagesResponse> {
        const response = await this.appPreviewSetsAppPreviewsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPreviewSetsAppPreviewsReplaceToManyRelationshipRaw(requestParameters: AppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreviewSetsAppPreviewsReplaceToManyRelationship.');
        }

        if (requestParameters.appPreviewSetAppPreviewsLinkagesRequest === null || requestParameters.appPreviewSetAppPreviewsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('appPreviewSetAppPreviewsLinkagesRequest','Required parameter requestParameters.appPreviewSetAppPreviewsLinkagesRequest was null or undefined when calling appPreviewSetsAppPreviewsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets/{id}/relationships/appPreviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppPreviewSetAppPreviewsLinkagesRequestToJSON(requestParameters.appPreviewSetAppPreviewsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPreviewSetsAppPreviewsReplaceToManyRelationship(requestParameters: AppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPreviewSetsAppPreviewsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPreviewSetsCreateInstanceRaw(requestParameters: AppPreviewSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreviewSetResponse>> {
        if (requestParameters.appPreviewSetCreateRequest === null || requestParameters.appPreviewSetCreateRequest === undefined) {
            throw new runtime.RequiredError('appPreviewSetCreateRequest','Required parameter requestParameters.appPreviewSetCreateRequest was null or undefined when calling appPreviewSetsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppPreviewSetCreateRequestToJSON(requestParameters.appPreviewSetCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreviewSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreviewSetsCreateInstance(requestParameters: AppPreviewSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreviewSetResponse> {
        const response = await this.appPreviewSetsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPreviewSetsDeleteInstanceRaw(requestParameters: AppPreviewSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreviewSetsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPreviewSetsDeleteInstance(requestParameters: AppPreviewSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPreviewSetsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPreviewSetsGetInstanceRaw(requestParameters: AppPreviewSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPreviewSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appPreviewSetsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppPreviewSets) {
            queryParameters['fields[appPreviewSets]'] = requestParameters.fieldsAppPreviewSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPreviews) {
            queryParameters['fields[appPreviews]'] = requestParameters.fieldsAppPreviews.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppPreviews !== undefined) {
            queryParameters['limit[appPreviews]'] = requestParameters.limitAppPreviews;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appPreviewSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPreviewSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async appPreviewSetsGetInstance(requestParameters: AppPreviewSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPreviewSetResponse> {
        const response = await this.appPreviewSetsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewsEnum = {
    AppPreviewSet: 'appPreviewSet',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    MimeType: 'mimeType',
    PreviewFrameTimeCode: 'previewFrameTimeCode',
    PreviewImage: 'previewImage',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded',
    VideoUrl: 'videoUrl'
} as const;
export type AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewsEnum = typeof AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewsEnum[keyof typeof AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewsEnum];
/**
 * @export
 */
export const AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewSetsEnum = {
    AppCustomProductPageLocalization: 'appCustomProductPageLocalization',
    AppPreviews: 'appPreviews',
    AppStoreVersionExperimentTreatmentLocalization: 'appStoreVersionExperimentTreatmentLocalization',
    AppStoreVersionLocalization: 'appStoreVersionLocalization',
    PreviewType: 'previewType'
} as const;
export type AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewSetsEnum = typeof AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewSetsEnum[keyof typeof AppPreviewSetsAppPreviewsGetToManyRelatedFieldsAppPreviewSetsEnum];
/**
 * @export
 */
export const AppPreviewSetsAppPreviewsGetToManyRelatedIncludeEnum = {
    AppPreviewSet: 'appPreviewSet'
} as const;
export type AppPreviewSetsAppPreviewsGetToManyRelatedIncludeEnum = typeof AppPreviewSetsAppPreviewsGetToManyRelatedIncludeEnum[keyof typeof AppPreviewSetsAppPreviewsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppPreviewSetsGetInstanceFieldsAppPreviewSetsEnum = {
    AppCustomProductPageLocalization: 'appCustomProductPageLocalization',
    AppPreviews: 'appPreviews',
    AppStoreVersionExperimentTreatmentLocalization: 'appStoreVersionExperimentTreatmentLocalization',
    AppStoreVersionLocalization: 'appStoreVersionLocalization',
    PreviewType: 'previewType'
} as const;
export type AppPreviewSetsGetInstanceFieldsAppPreviewSetsEnum = typeof AppPreviewSetsGetInstanceFieldsAppPreviewSetsEnum[keyof typeof AppPreviewSetsGetInstanceFieldsAppPreviewSetsEnum];
/**
 * @export
 */
export const AppPreviewSetsGetInstanceIncludeEnum = {
    AppCustomProductPageLocalization: 'appCustomProductPageLocalization',
    AppPreviews: 'appPreviews',
    AppStoreVersionExperimentTreatmentLocalization: 'appStoreVersionExperimentTreatmentLocalization',
    AppStoreVersionLocalization: 'appStoreVersionLocalization'
} as const;
export type AppPreviewSetsGetInstanceIncludeEnum = typeof AppPreviewSetsGetInstanceIncludeEnum[keyof typeof AppPreviewSetsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppPreviewSetsGetInstanceFieldsAppPreviewsEnum = {
    AppPreviewSet: 'appPreviewSet',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    MimeType: 'mimeType',
    PreviewFrameTimeCode: 'previewFrameTimeCode',
    PreviewImage: 'previewImage',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded',
    VideoUrl: 'videoUrl'
} as const;
export type AppPreviewSetsGetInstanceFieldsAppPreviewsEnum = typeof AppPreviewSetsGetInstanceFieldsAppPreviewsEnum[keyof typeof AppPreviewSetsGetInstanceFieldsAppPreviewsEnum];
