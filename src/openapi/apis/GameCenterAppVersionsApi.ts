/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppStoreVersionResponse,
  ErrorResponse,
  GameCenterAppVersionCompatibilityVersionsLinkagesRequest,
  GameCenterAppVersionCompatibilityVersionsLinkagesResponse,
  GameCenterAppVersionCreateRequest,
  GameCenterAppVersionResponse,
  GameCenterAppVersionUpdateRequest,
  GameCenterAppVersionsResponse,
} from '../models';
import {
    AppStoreVersionResponseFromJSON,
    AppStoreVersionResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAppVersionCompatibilityVersionsLinkagesRequestFromJSON,
    GameCenterAppVersionCompatibilityVersionsLinkagesRequestToJSON,
    GameCenterAppVersionCompatibilityVersionsLinkagesResponseFromJSON,
    GameCenterAppVersionCompatibilityVersionsLinkagesResponseToJSON,
    GameCenterAppVersionCreateRequestFromJSON,
    GameCenterAppVersionCreateRequestToJSON,
    GameCenterAppVersionResponseFromJSON,
    GameCenterAppVersionResponseToJSON,
    GameCenterAppVersionUpdateRequestFromJSON,
    GameCenterAppVersionUpdateRequestToJSON,
    GameCenterAppVersionsResponseFromJSON,
    GameCenterAppVersionsResponseToJSON,
} from '../models';

export interface GameCenterAppVersionsAppStoreVersionGetToOneRelatedRequest {
    id: string;
    fieldsAgeRatingDeclarations?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppStoreReviewDetails?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum>;
    fieldsAppStoreVersionExperiments?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAlternativeDistributionPackages?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum>;
    fieldsAppStoreVersions?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum>;
    fieldsRoutingAppCoverages?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum>;
    fieldsAppClipDefaultExperiences?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum>;
    limitAppStoreVersionLocalizations?: number;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionExperimentsV2?: number;
    include?: Array<GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum>;
}

export interface GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRequest {
    id: string;
    gameCenterAppVersionCompatibilityVersionsLinkagesRequest: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
}

export interface GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRequest {
    id: string;
    gameCenterAppVersionCompatibilityVersionsLinkagesRequest: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
}

export interface GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRequest {
    id: string;
    filterEnabled?: Array<string>;
    fieldsAppStoreVersions?: Array<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum>;
    fieldsGameCenterAppVersions?: Array<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum>;
    limit?: number;
    limitCompatibilityVersions?: number;
    include?: Array<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum>;
}

export interface GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterAppVersionsCreateInstanceRequest {
    gameCenterAppVersionCreateRequest: GameCenterAppVersionCreateRequest;
}

export interface GameCenterAppVersionsGetInstanceRequest {
    id: string;
    fieldsGameCenterAppVersions?: Array<GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum>;
    include?: Array<GameCenterAppVersionsGetInstanceIncludeEnum>;
    fieldsAppStoreVersions?: Array<GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum>;
    limitCompatibilityVersions?: number;
}

export interface GameCenterAppVersionsUpdateInstanceRequest {
    id: string;
    gameCenterAppVersionUpdateRequest: GameCenterAppVersionUpdateRequest;
}

/**
 * 
 */
export class GameCenterAppVersionsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterAppVersionsAppStoreVersionGetToOneRelatedRaw(requestParameters: GameCenterAppVersionsAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsAppStoreVersionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAlternativeDistributionPackages) {
            queryParameters['fields[alternativeDistributionPackages]'] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }

        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}/appStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsAppStoreVersionGetToOneRelated(requestParameters: GameCenterAppVersionsAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.gameCenterAppVersionsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRaw(requestParameters: GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship.');
        }

        if (requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === null || requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAppVersionCompatibilityVersionsLinkagesRequest','Required parameter requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAppVersionCompatibilityVersionsLinkagesRequestToJSON(requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship(requestParameters: GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRaw(requestParameters: GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship.');
        }

        if (requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === null || requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAppVersionCompatibilityVersionsLinkagesRequest','Required parameter requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAppVersionCompatibilityVersionsLinkagesRequestToJSON(requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship(requestParameters: GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRaw(requestParameters: GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterEnabled) {
            queryParameters['filter[enabled]'] = requestParameters.filterEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.limitCompatibilityVersions !== undefined) {
            queryParameters['limit[compatibilityVersions]'] = requestParameters.limitCompatibilityVersions;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsGetToManyRelated(requestParameters: GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionsResponse> {
        const response = await this.gameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRaw(requestParameters: GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionCompatibilityVersionsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship(requestParameters: GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> {
        const response = await this.gameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAppVersionsCreateInstanceRaw(requestParameters: GameCenterAppVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionResponse>> {
        if (requestParameters.gameCenterAppVersionCreateRequest === null || requestParameters.gameCenterAppVersionCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAppVersionCreateRequest','Required parameter requestParameters.gameCenterAppVersionCreateRequest was null or undefined when calling gameCenterAppVersionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAppVersionCreateRequestToJSON(requestParameters.gameCenterAppVersionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsCreateInstance(requestParameters: GameCenterAppVersionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionResponse> {
        const response = await this.gameCenterAppVersionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAppVersionsGetInstanceRaw(requestParameters: GameCenterAppVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAppVersions) {
            queryParameters['fields[gameCenterAppVersions]'] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitCompatibilityVersions !== undefined) {
            queryParameters['limit[compatibilityVersions]'] = requestParameters.limitCompatibilityVersions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsGetInstance(requestParameters: GameCenterAppVersionsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionResponse> {
        const response = await this.gameCenterAppVersionsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAppVersionsUpdateInstanceRaw(requestParameters: GameCenterAppVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAppVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsUpdateInstance.');
        }

        if (requestParameters.gameCenterAppVersionUpdateRequest === null || requestParameters.gameCenterAppVersionUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAppVersionUpdateRequest','Required parameter requestParameters.gameCenterAppVersionUpdateRequest was null or undefined when calling gameCenterAppVersionsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAppVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAppVersionUpdateRequestToJSON(requestParameters.gameCenterAppVersionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAppVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAppVersionsUpdateInstance(requestParameters: GameCenterAppVersionsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAppVersionResponse> {
        const response = await this.gameCenterAppVersionsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: 'ageRatingOverride',
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    Gambling: 'gambling',
    GamblingAndContests: 'gamblingAndContests',
    GamblingSimulated: 'gamblingSimulated',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    KidsAgeBand: 'kidsAgeBand',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SeventeenPlus: 'seventeenPlus',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealistic: 'violenceRealistic',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersion: 'appStoreVersion',
    Description: 'description',
    Keywords: 'keywords',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: 'app',
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    ControlVersions: 'controlVersions',
    EndDate: 'endDate',
    LatestControlVersion: 'latestControlVersion',
    Name: 'name',
    Platform: 'platform',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: 'appStoreVersion',
    Versions: 'versions'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: 'appStoreVersion',
    CurrentDayNumber: 'currentDayNumber',
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    RoutingAppCoverage: 'routingAppCoverage'
} as const;
export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum = typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum[keyof typeof GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum[keyof typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: 'appStoreVersion',
    CompatibilityVersions: 'compatibilityVersions',
    Enabled: 'enabled'
} as const;
export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum[keyof typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: 'appStoreVersion',
    CompatibilityVersions: 'compatibilityVersions'
} as const;
export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum = typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum[keyof typeof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: 'appStoreVersion',
    CompatibilityVersions: 'compatibilityVersions',
    Enabled: 'enabled'
} as const;
export type GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum = typeof GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum[keyof typeof GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export const GameCenterAppVersionsGetInstanceIncludeEnum = {
    AppStoreVersion: 'appStoreVersion',
    CompatibilityVersions: 'compatibilityVersions'
} as const;
export type GameCenterAppVersionsGetInstanceIncludeEnum = typeof GameCenterAppVersionsGetInstanceIncludeEnum[keyof typeof GameCenterAppVersionsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum = typeof GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum[keyof typeof GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum];
