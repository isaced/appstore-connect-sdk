/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionIntroductoryOfferCreateRequest,
  SubscriptionIntroductoryOfferResponse,
  SubscriptionIntroductoryOfferUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionIntroductoryOfferCreateRequestFromJSON,
    SubscriptionIntroductoryOfferCreateRequestToJSON,
    SubscriptionIntroductoryOfferResponseFromJSON,
    SubscriptionIntroductoryOfferResponseToJSON,
    SubscriptionIntroductoryOfferUpdateRequestFromJSON,
    SubscriptionIntroductoryOfferUpdateRequestToJSON,
} from '../models';

export interface SubscriptionIntroductoryOffersCreateInstanceRequest {
    subscriptionIntroductoryOfferCreateRequest: SubscriptionIntroductoryOfferCreateRequest;
}

export interface SubscriptionIntroductoryOffersDeleteInstanceRequest {
    id: string;
}

export interface SubscriptionIntroductoryOffersUpdateInstanceRequest {
    id: string;
    subscriptionIntroductoryOfferUpdateRequest: SubscriptionIntroductoryOfferUpdateRequest;
}

/**
 * 
 */
export class SubscriptionIntroductoryOffersApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionIntroductoryOffersCreateInstanceRaw(requestParameters: SubscriptionIntroductoryOffersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOfferResponse>> {
        if (requestParameters.subscriptionIntroductoryOfferCreateRequest === null || requestParameters.subscriptionIntroductoryOfferCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionIntroductoryOfferCreateRequest','Required parameter requestParameters.subscriptionIntroductoryOfferCreateRequest was null or undefined when calling subscriptionIntroductoryOffersCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionIntroductoryOffers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionIntroductoryOfferCreateRequestToJSON(requestParameters.subscriptionIntroductoryOfferCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOfferResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionIntroductoryOffersCreateInstance(requestParameters: SubscriptionIntroductoryOffersCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOfferResponse> {
        const response = await this.subscriptionIntroductoryOffersCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionIntroductoryOffersDeleteInstanceRaw(requestParameters: SubscriptionIntroductoryOffersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionIntroductoryOffersDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionIntroductoryOffers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionIntroductoryOffersDeleteInstance(requestParameters: SubscriptionIntroductoryOffersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.subscriptionIntroductoryOffersDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionIntroductoryOffersUpdateInstanceRaw(requestParameters: SubscriptionIntroductoryOffersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionIntroductoryOfferResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionIntroductoryOffersUpdateInstance.');
        }

        if (requestParameters.subscriptionIntroductoryOfferUpdateRequest === null || requestParameters.subscriptionIntroductoryOfferUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionIntroductoryOfferUpdateRequest','Required parameter requestParameters.subscriptionIntroductoryOfferUpdateRequest was null or undefined when calling subscriptionIntroductoryOffersUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionIntroductoryOffers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionIntroductoryOfferUpdateRequestToJSON(requestParameters.subscriptionIntroductoryOfferUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionIntroductoryOfferResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionIntroductoryOffersUpdateInstance(requestParameters: SubscriptionIntroductoryOffersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionIntroductoryOfferResponse> {
        const response = await this.subscriptionIntroductoryOffersUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
