/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppsBetaTesterUsagesV1MetricResponse,
  BetaBuildUsagesV1MetricResponse,
  BetaTesterUsagesV1MetricResponse,
  ErrorResponse,
  GameCenterMatchmakingAppRequestsV1MetricResponse,
  GameCenterMatchmakingBooleanRuleResultsV1MetricResponse,
  GameCenterMatchmakingNumberRuleResultsV1MetricResponse,
  GameCenterMatchmakingQueueRequestsV1MetricResponse,
  GameCenterMatchmakingQueueSizesV1MetricResponse,
  GameCenterMatchmakingRuleErrorsV1MetricResponse,
  GameCenterMatchmakingSessionsV1MetricResponse,
} from '../models';
import {
    AppsBetaTesterUsagesV1MetricResponseFromJSON,
    AppsBetaTesterUsagesV1MetricResponseToJSON,
    BetaBuildUsagesV1MetricResponseFromJSON,
    BetaBuildUsagesV1MetricResponseToJSON,
    BetaTesterUsagesV1MetricResponseFromJSON,
    BetaTesterUsagesV1MetricResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON,
    GameCenterMatchmakingAppRequestsV1MetricResponseToJSON,
    GameCenterMatchmakingBooleanRuleResultsV1MetricResponseFromJSON,
    GameCenterMatchmakingBooleanRuleResultsV1MetricResponseToJSON,
    GameCenterMatchmakingNumberRuleResultsV1MetricResponseFromJSON,
    GameCenterMatchmakingNumberRuleResultsV1MetricResponseToJSON,
    GameCenterMatchmakingQueueRequestsV1MetricResponseFromJSON,
    GameCenterMatchmakingQueueRequestsV1MetricResponseToJSON,
    GameCenterMatchmakingQueueSizesV1MetricResponseFromJSON,
    GameCenterMatchmakingQueueSizesV1MetricResponseToJSON,
    GameCenterMatchmakingRuleErrorsV1MetricResponseFromJSON,
    GameCenterMatchmakingRuleErrorsV1MetricResponseToJSON,
    GameCenterMatchmakingSessionsV1MetricResponseFromJSON,
    GameCenterMatchmakingSessionsV1MetricResponseToJSON,
} from '../models';

export interface AppsBetaTesterUsagesGetMetricsRequest {
    id: string;
    limit?: number;
    groupBy?: Array<AppsBetaTesterUsagesGetMetricsGroupByEnum>;
    filterBetaTesters?: string;
    period?: AppsBetaTesterUsagesGetMetricsPeriodEnum;
}

export interface BetaGroupsBetaTesterUsagesGetMetricsRequest {
    id: string;
    limit?: number;
    groupBy?: Array<BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum>;
    filterBetaTesters?: string;
    period?: BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum;
}

export interface BetaTestersBetaTesterUsagesGetMetricsRequest {
    id: string;
    filterApps: string;
    limit?: number;
    period?: BetaTestersBetaTesterUsagesGetMetricsPeriodEnum;
}

export interface BuildsBetaBuildUsagesGetMetricsRequest {
    id: string;
    limit?: number;
}

export interface GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum;
    sort?: Array<GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum>;
}

export interface GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum;
    sort?: Array<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum;
    limit?: number;
    sort?: Array<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum;
    filterGameCenterDetail?: string;
    sort?: Array<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum;
    limit?: number;
    sort?: Array<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum>;
    filterResult?: GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum;
    filterGameCenterDetail?: string;
    sort?: Array<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum;
    limit?: number;
    sort?: Array<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum>;
    filterResult?: string;
    filterGameCenterMatchmakingQueue?: string;
    sort?: Array<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum>;
    filterGameCenterMatchmakingQueue?: string;
    sort?: Array<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum>;
}

export interface GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
    id: string;
    granularity: GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum;
    limit?: number;
    groupBy?: Array<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum>;
    filterGameCenterMatchmakingQueue?: string;
    sort?: Array<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum>;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     */
    async appsBetaTesterUsagesGetMetricsRaw(requestParameters: AppsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appsBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaTesters !== undefined) {
            queryParameters['filter[betaTesters]'] = requestParameters.filterBetaTesters;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/apps/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsBetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async appsBetaTesterUsagesGetMetrics(requestParameters: AppsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsBetaTesterUsagesV1MetricResponse> {
        const response = await this.appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters: BetaGroupsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaTesters !== undefined) {
            queryParameters['filter[betaTesters]'] = requestParameters.filterBetaTesters;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaGroups/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsBetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaGroupsBetaTesterUsagesGetMetrics(requestParameters: BetaGroupsBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsBetaTesterUsagesV1MetricResponse> {
        const response = await this.betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters: BetaTestersBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTesterUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.');
        }

        if (requestParameters.filterApps === null || requestParameters.filterApps === undefined) {
            throw new runtime.RequiredError('filterApps','Required parameter requestParameters.filterApps was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.filterApps !== undefined) {
            queryParameters['filter[apps]'] = requestParameters.filterApps;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaTesters/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTesterUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaTestersBetaTesterUsagesGetMetrics(requestParameters: BetaTestersBetaTesterUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTesterUsagesV1MetricResponse> {
        const response = await this.betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsBetaBuildUsagesGetMetricsRaw(requestParameters: BuildsBetaBuildUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaBuildUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/metrics/betaBuildUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaBuildUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsBetaBuildUsagesGetMetrics(requestParameters: BuildsBetaBuildUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaBuildUsagesV1MetricResponse> {
        const response = await this.buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsClassicMatchmakingRequestsGetMetrics(requestParameters: GameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        const response = await this.gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(requestParameters: GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        const response = await this.gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRaw(requestParameters: GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingQueueSizesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(requestParameters: GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        const response = await this.gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.filterGameCenterDetail !== undefined) {
            queryParameters['filter[gameCenterDetail]'] = requestParameters.filterGameCenterDetail;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingQueueRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(requestParameters: GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRaw(requestParameters: GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingQueueSizesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(requestParameters: GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        const response = await this.gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRaw(requestParameters: GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.filterGameCenterDetail !== undefined) {
            queryParameters['filter[gameCenterDetail]'] = requestParameters.filterGameCenterDetail;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingQueueRequestsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(requestParameters: GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRaw(requestParameters: GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingSessionsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(requestParameters: GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingSessionsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRaw(requestParameters: GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterResult !== undefined) {
            queryParameters['filter[result]'] = requestParameters.filterResult;
        }

        if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
            queryParameters['filter[gameCenterMatchmakingQueue]'] = requestParameters.filterGameCenterMatchmakingQueue;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingBooleanRuleResultsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(requestParameters: GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRaw(requestParameters: GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
            queryParameters['filter[gameCenterMatchmakingQueue]'] = requestParameters.filterGameCenterMatchmakingQueue;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingNumberRuleResultsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(requestParameters: GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRaw(requestParameters: GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.groupBy) {
            queryParameters['groupBy'] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
            queryParameters['filter[gameCenterMatchmakingQueue]'] = requestParameters.filterGameCenterMatchmakingQueue;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingRuleErrorsV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(requestParameters: GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingRuleErrorsV1MetricResponse> {
        const response = await this.gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: 'betaTesters'
} as const;
export type AppsBetaTesterUsagesGetMetricsGroupByEnum = typeof AppsBetaTesterUsagesGetMetricsGroupByEnum[keyof typeof AppsBetaTesterUsagesGetMetricsGroupByEnum];
/**
 * @export
 */
export const AppsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type AppsBetaTesterUsagesGetMetricsPeriodEnum = typeof AppsBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof AppsBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: 'betaTesters'
} as const;
export type BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = typeof BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum[keyof typeof BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum];
/**
 * @export
 */
export const BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = typeof BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: 'P7D',
    P30D: 'P30D',
    P90D: 'P90D',
    P365D: 'P365D'
} as const;
export type BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = typeof BetaTestersBetaTesterUsagesGetMetricsPeriodEnum[keyof typeof BetaTestersBetaTesterUsagesGetMetricsPeriodEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: 'result'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    Count: 'count',
    Count: '-count',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: 'result'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    Count: 'count',
    Count: '-count',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum = {
    AverageNumberOfRequests: 'averageNumberOfRequests',
    AverageNumberOfRequests: '-averageNumberOfRequests',
    Count: 'count',
    Count: '-count',
    P50NumberOfRequests: 'p50NumberOfRequests',
    P50NumberOfRequests: '-p50NumberOfRequests',
    P95NumberOfRequests: 'p95NumberOfRequests',
    P95NumberOfRequests: '-p95NumberOfRequests'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum = {
    GameCenterDetail: 'gameCenterDetail',
    Result: 'result'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    Count: 'count',
    Count: '-count',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum = typeof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum = {
    AverageNumberOfRequests: 'averageNumberOfRequests',
    AverageNumberOfRequests: '-averageNumberOfRequests',
    Count: 'count',
    Count: '-count',
    P50NumberOfRequests: 'p50NumberOfRequests',
    P50NumberOfRequests: '-p50NumberOfRequests',
    P95NumberOfRequests: 'p95NumberOfRequests',
    P95NumberOfRequests: '-p95NumberOfRequests'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum = typeof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum = typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum = {
    GameCenterDetail: 'gameCenterDetail',
    Result: 'result'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum = typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: 'MATCHED',
    Canceled: 'CANCELED',
    Expired: 'EXPIRED'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum = typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: 'averageSecondsInQueue',
    AverageSecondsInQueue: '-averageSecondsInQueue',
    Count: 'count',
    Count: '-count',
    P50SecondsInQueue: 'p50SecondsInQueue',
    P50SecondsInQueue: '-p50SecondsInQueue',
    P95SecondsInQueue: 'p95SecondsInQueue',
    P95SecondsInQueue: '-p95SecondsInQueue'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum = typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum = typeof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum = {
    AveragePlayerCount: 'averagePlayerCount',
    AveragePlayerCount: '-averagePlayerCount',
    Count: 'count',
    Count: '-count',
    P50PlayerCount: 'p50PlayerCount',
    P50PlayerCount: '-p50PlayerCount',
    P95PlayerCount: 'p95PlayerCount',
    P95PlayerCount: '-p95PlayerCount'
} as const;
export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum = typeof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum = typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: 'gameCenterMatchmakingQueue',
    Result: 'result'
} as const;
export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum = typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum = {
    Count: 'count',
    Count: '-count'
} as const;
export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum = typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum = typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: 'gameCenterMatchmakingQueue'
} as const;
export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum = typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum = {
    AverageResult: 'averageResult',
    AverageResult: '-averageResult',
    Count: 'count',
    Count: '-count',
    P50Result: 'p50Result',
    P50Result: '-p50Result',
    P95Result: 'p95Result',
    P95Result: '-p95Result'
} as const;
export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum = typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum = {
    P1D: 'P1D',
    Pt1H: 'PT1H',
    Pt15M: 'PT15M'
} as const;
export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum = typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: 'gameCenterMatchmakingQueue'
} as const;
export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum = typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum];
/**
 * @export
 */
export const GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum = {
    Count: 'count',
    Count: '-count'
} as const;
export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum = typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum[keyof typeof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum];
