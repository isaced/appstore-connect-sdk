/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionGroupSubmissionCreateRequest,
  SubscriptionGroupSubmissionResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionGroupSubmissionCreateRequestFromJSON,
    SubscriptionGroupSubmissionCreateRequestToJSON,
    SubscriptionGroupSubmissionResponseFromJSON,
    SubscriptionGroupSubmissionResponseToJSON,
} from '../models';

export interface SubscriptionGroupSubmissionsCreateInstanceRequest {
    subscriptionGroupSubmissionCreateRequest: SubscriptionGroupSubmissionCreateRequest;
}

/**
 * 
 */
export class SubscriptionGroupSubmissionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionGroupSubmissionsCreateInstanceRaw(requestParameters: SubscriptionGroupSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionGroupSubmissionResponse>> {
        if (requestParameters.subscriptionGroupSubmissionCreateRequest === null || requestParameters.subscriptionGroupSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionGroupSubmissionCreateRequest','Required parameter requestParameters.subscriptionGroupSubmissionCreateRequest was null or undefined when calling subscriptionGroupSubmissionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionGroupSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionGroupSubmissionCreateRequestToJSON(requestParameters.subscriptionGroupSubmissionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionGroupSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionGroupSubmissionsCreateInstance(requestParameters: SubscriptionGroupSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionGroupSubmissionResponse> {
        const response = await this.subscriptionGroupSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
