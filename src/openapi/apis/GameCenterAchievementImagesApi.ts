/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterAchievementImageCreateRequest,
  GameCenterAchievementImageResponse,
  GameCenterAchievementImageUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterAchievementImageCreateRequestFromJSON,
    GameCenterAchievementImageCreateRequestToJSON,
    GameCenterAchievementImageResponseFromJSON,
    GameCenterAchievementImageResponseToJSON,
    GameCenterAchievementImageUpdateRequestFromJSON,
    GameCenterAchievementImageUpdateRequestToJSON,
} from '../models';

export interface GameCenterAchievementImagesCreateInstanceRequest {
    gameCenterAchievementImageCreateRequest: GameCenterAchievementImageCreateRequest;
}

export interface GameCenterAchievementImagesDeleteInstanceRequest {
    id: string;
}

export interface GameCenterAchievementImagesGetInstanceRequest {
    id: string;
    fieldsGameCenterAchievementImages?: Array<GameCenterAchievementImagesGetInstanceFieldsGameCenterAchievementImagesEnum>;
    include?: Array<GameCenterAchievementImagesGetInstanceIncludeEnum>;
}

export interface GameCenterAchievementImagesUpdateInstanceRequest {
    id: string;
    gameCenterAchievementImageUpdateRequest: GameCenterAchievementImageUpdateRequest;
}

/**
 * 
 */
export class GameCenterAchievementImagesApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterAchievementImagesCreateInstanceRaw(requestParameters: GameCenterAchievementImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementImageResponse>> {
        if (requestParameters.gameCenterAchievementImageCreateRequest === null || requestParameters.gameCenterAchievementImageCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementImageCreateRequest','Required parameter requestParameters.gameCenterAchievementImageCreateRequest was null or undefined when calling gameCenterAchievementImagesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementImageCreateRequestToJSON(requestParameters.gameCenterAchievementImageCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementImagesCreateInstance(requestParameters: GameCenterAchievementImagesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementImageResponse> {
        const response = await this.gameCenterAchievementImagesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementImagesDeleteInstanceRaw(requestParameters: GameCenterAchievementImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementImagesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterAchievementImagesDeleteInstance(requestParameters: GameCenterAchievementImagesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterAchievementImagesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterAchievementImagesGetInstanceRaw(requestParameters: GameCenterAchievementImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementImagesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterAchievementImages) {
            queryParameters['fields[gameCenterAchievementImages]'] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementImagesGetInstance(requestParameters: GameCenterAchievementImagesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementImageResponse> {
        const response = await this.gameCenterAchievementImagesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterAchievementImagesUpdateInstanceRaw(requestParameters: GameCenterAchievementImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementImageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementImagesUpdateInstance.');
        }

        if (requestParameters.gameCenterAchievementImageUpdateRequest === null || requestParameters.gameCenterAchievementImageUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterAchievementImageUpdateRequest','Required parameter requestParameters.gameCenterAchievementImageUpdateRequest was null or undefined when calling gameCenterAchievementImagesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterAchievementImages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterAchievementImageUpdateRequestToJSON(requestParameters.gameCenterAchievementImageUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterAchievementImageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterAchievementImagesUpdateInstance(requestParameters: GameCenterAchievementImagesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementImageResponse> {
        const response = await this.gameCenterAchievementImagesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterAchievementImagesGetInstanceFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterAchievementImagesGetInstanceFieldsGameCenterAchievementImagesEnum = typeof GameCenterAchievementImagesGetInstanceFieldsGameCenterAchievementImagesEnum[keyof typeof GameCenterAchievementImagesGetInstanceFieldsGameCenterAchievementImagesEnum];
/**
 * @export
 */
export const GameCenterAchievementImagesGetInstanceIncludeEnum = {
    GameCenterAchievementLocalization: 'gameCenterAchievementLocalization'
} as const;
export type GameCenterAchievementImagesGetInstanceIncludeEnum = typeof GameCenterAchievementImagesGetInstanceIncludeEnum[keyof typeof GameCenterAchievementImagesGetInstanceIncludeEnum];
