/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsReportInstancesResponse,
  AnalyticsReportResponse,
  ErrorResponse,
} from '../models';
import {
    AnalyticsReportInstancesResponseFromJSON,
    AnalyticsReportInstancesResponseToJSON,
    AnalyticsReportResponseFromJSON,
    AnalyticsReportResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AnalyticsReportsGetInstanceRequest {
    id: string;
    fieldsAnalyticsReports?: Array<AnalyticsReportsGetInstanceFieldsAnalyticsReportsEnum>;
    fieldsAnalyticsReportInstances?: Array<AnalyticsReportsGetInstanceFieldsAnalyticsReportInstancesEnum>;
}

export interface AnalyticsReportsInstancesGetToManyRelatedRequest {
    id: string;
    filterGranularity?: Array<AnalyticsReportsInstancesGetToManyRelatedFilterGranularityEnum>;
    filterProcessingDate?: Array<string>;
    fieldsAnalyticsReportInstances?: Array<AnalyticsReportsInstancesGetToManyRelatedFieldsAnalyticsReportInstancesEnum>;
    limit?: number;
}

/**
 * 
 */
export class AnalyticsReportsApi extends runtime.BaseAPI {

    /**
     */
    async analyticsReportsGetInstanceRaw(requestParameters: AnalyticsReportsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling analyticsReportsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAnalyticsReports) {
            queryParameters['fields[analyticsReports]'] = requestParameters.fieldsAnalyticsReports.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReportInstances) {
            queryParameters['fields[analyticsReportInstances]'] = requestParameters.fieldsAnalyticsReportInstances.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportResponseFromJSON(jsonValue));
    }

    /**
     */
    async analyticsReportsGetInstance(requestParameters: AnalyticsReportsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportResponse> {
        const response = await this.analyticsReportsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async analyticsReportsInstancesGetToManyRelatedRaw(requestParameters: AnalyticsReportsInstancesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportInstancesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling analyticsReportsInstancesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterGranularity) {
            queryParameters['filter[granularity]'] = requestParameters.filterGranularity.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterProcessingDate) {
            queryParameters['filter[processingDate]'] = requestParameters.filterProcessingDate.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReportInstances) {
            queryParameters['fields[analyticsReportInstances]'] = requestParameters.fieldsAnalyticsReportInstances.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReports/{id}/instances`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportInstancesResponseFromJSON(jsonValue));
    }

    /**
     */
    async analyticsReportsInstancesGetToManyRelated(requestParameters: AnalyticsReportsInstancesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportInstancesResponse> {
        const response = await this.analyticsReportsInstancesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AnalyticsReportsGetInstanceFieldsAnalyticsReportsEnum = {
    Category: 'category',
    Instances: 'instances',
    Name: 'name'
} as const;
export type AnalyticsReportsGetInstanceFieldsAnalyticsReportsEnum = typeof AnalyticsReportsGetInstanceFieldsAnalyticsReportsEnum[keyof typeof AnalyticsReportsGetInstanceFieldsAnalyticsReportsEnum];
/**
 * @export
 */
export const AnalyticsReportsGetInstanceFieldsAnalyticsReportInstancesEnum = {
    Granularity: 'granularity',
    ProcessingDate: 'processingDate',
    Segments: 'segments'
} as const;
export type AnalyticsReportsGetInstanceFieldsAnalyticsReportInstancesEnum = typeof AnalyticsReportsGetInstanceFieldsAnalyticsReportInstancesEnum[keyof typeof AnalyticsReportsGetInstanceFieldsAnalyticsReportInstancesEnum];
/**
 * @export
 */
export const AnalyticsReportsInstancesGetToManyRelatedFilterGranularityEnum = {
    Daily: 'DAILY',
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY'
} as const;
export type AnalyticsReportsInstancesGetToManyRelatedFilterGranularityEnum = typeof AnalyticsReportsInstancesGetToManyRelatedFilterGranularityEnum[keyof typeof AnalyticsReportsInstancesGetToManyRelatedFilterGranularityEnum];
/**
 * @export
 */
export const AnalyticsReportsInstancesGetToManyRelatedFieldsAnalyticsReportInstancesEnum = {
    Granularity: 'granularity',
    ProcessingDate: 'processingDate',
    Segments: 'segments'
} as const;
export type AnalyticsReportsInstancesGetToManyRelatedFieldsAnalyticsReportInstancesEnum = typeof AnalyticsReportsInstancesGetToManyRelatedFieldsAnalyticsReportInstancesEnum[keyof typeof AnalyticsReportsInstancesGetToManyRelatedFieldsAnalyticsReportInstancesEnum];
