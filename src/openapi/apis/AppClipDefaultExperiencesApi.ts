/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppClipAppStoreReviewDetailResponse,
  AppClipDefaultExperienceCreateRequest,
  AppClipDefaultExperienceLocalizationsResponse,
  AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest,
  AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse,
  AppClipDefaultExperienceResponse,
  AppClipDefaultExperienceUpdateRequest,
  AppStoreVersionResponse,
  ErrorResponse,
} from '../models';
import {
    AppClipAppStoreReviewDetailResponseFromJSON,
    AppClipAppStoreReviewDetailResponseToJSON,
    AppClipDefaultExperienceCreateRequestFromJSON,
    AppClipDefaultExperienceCreateRequestToJSON,
    AppClipDefaultExperienceLocalizationsResponseFromJSON,
    AppClipDefaultExperienceLocalizationsResponseToJSON,
    AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequestFromJSON,
    AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequestToJSON,
    AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponseFromJSON,
    AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponseToJSON,
    AppClipDefaultExperienceResponseFromJSON,
    AppClipDefaultExperienceResponseToJSON,
    AppClipDefaultExperienceUpdateRequestFromJSON,
    AppClipDefaultExperienceUpdateRequestToJSON,
    AppStoreVersionResponseFromJSON,
    AppStoreVersionResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest {
    id: string;
    fieldsAppClipAppStoreReviewDetails?: Array<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    include?: Array<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedIncludeEnum>;
}

export interface AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
    id: string;
    filterLocale?: Array<string>;
    fieldsAppClipDefaultExperiences?: Array<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppClipDefaultExperienceLocalizations?: Array<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperienceLocalizationsEnum>;
    fieldsAppClipHeaderImages?: Array<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipHeaderImagesEnum>;
    limit?: number;
    include?: Array<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedIncludeEnum>;
}

export interface AppClipDefaultExperiencesCreateInstanceRequest {
    appClipDefaultExperienceCreateRequest: AppClipDefaultExperienceCreateRequest;
}

export interface AppClipDefaultExperiencesDeleteInstanceRequest {
    id: string;
}

export interface AppClipDefaultExperiencesGetInstanceRequest {
    id: string;
    fieldsAppClipDefaultExperiences?: Array<AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperiencesEnum>;
    include?: Array<AppClipDefaultExperiencesGetInstanceIncludeEnum>;
    fieldsAppClipAppStoreReviewDetails?: Array<AppClipDefaultExperiencesGetInstanceFieldsAppClipAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersions?: Array<AppClipDefaultExperiencesGetInstanceFieldsAppStoreVersionsEnum>;
    fieldsAppClipDefaultExperienceLocalizations?: Array<AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperienceLocalizationsEnum>;
    limitAppClipDefaultExperienceLocalizations?: number;
}

export interface AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
    id: string;
    fieldsAgeRatingDeclarations?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppStoreReviewDetails?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum>;
    fieldsAppStoreVersionExperiments?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAlternativeDistributionPackages?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum>;
    fieldsAppStoreVersions?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppsEnum>;
    fieldsRoutingAppCoverages?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum>;
    fieldsAppClipDefaultExperiences?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsBuildsEnum>;
    limitAppStoreVersionLocalizations?: number;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionExperimentsV2?: number;
    include?: Array<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedIncludeEnum>;
}

export interface AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest {
    id: string;
}

export interface AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest {
    id: string;
    appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;
}

export interface AppClipDefaultExperiencesUpdateInstanceRequest {
    id: string;
    appClipDefaultExperienceUpdateRequest: AppClipDefaultExperienceUpdateRequest;
}

/**
 * 
 */
export class AppClipDefaultExperiencesApi extends runtime.BaseAPI {

    /**
     */
    async appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRaw(requestParameters: AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipAppStoreReviewDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
            queryParameters['fields[appClipAppStoreReviewDetails]'] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipAppStoreReviewDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(requestParameters: AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipAppStoreReviewDetailResponse> {
        const response = await this.appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRaw(requestParameters: AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLocale) {
            queryParameters['filter[locale]'] = requestParameters.filterLocale.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
            queryParameters['fields[appClipDefaultExperienceLocalizations]'] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipHeaderImages) {
            queryParameters['fields[appClipHeaderImages]'] = requestParameters.fieldsAppClipHeaderImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(requestParameters: AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceLocalizationsResponse> {
        const response = await this.appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesCreateInstanceRaw(requestParameters: AppClipDefaultExperiencesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceResponse>> {
        if (requestParameters.appClipDefaultExperienceCreateRequest === null || requestParameters.appClipDefaultExperienceCreateRequest === undefined) {
            throw new runtime.RequiredError('appClipDefaultExperienceCreateRequest','Required parameter requestParameters.appClipDefaultExperienceCreateRequest was null or undefined when calling appClipDefaultExperiencesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppClipDefaultExperienceCreateRequestToJSON(requestParameters.appClipDefaultExperienceCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesCreateInstance(requestParameters: AppClipDefaultExperiencesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceResponse> {
        const response = await this.appClipDefaultExperiencesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesDeleteInstanceRaw(requestParameters: AppClipDefaultExperiencesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appClipDefaultExperiencesDeleteInstance(requestParameters: AppClipDefaultExperiencesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appClipDefaultExperiencesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appClipDefaultExperiencesGetInstanceRaw(requestParameters: AppClipDefaultExperiencesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
            queryParameters['fields[appClipAppStoreReviewDetails]'] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
            queryParameters['fields[appClipDefaultExperienceLocalizations]'] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppClipDefaultExperienceLocalizations !== undefined) {
            queryParameters['limit[appClipDefaultExperienceLocalizations]'] = requestParameters.limitAppClipDefaultExperienceLocalizations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesGetInstance(requestParameters: AppClipDefaultExperiencesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceResponse> {
        const response = await this.appClipDefaultExperiencesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRaw(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAlternativeDistributionPackages) {
            queryParameters['fields[alternativeDistributionPackages]'] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }

        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRaw(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> {
        const response = await this.appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRaw(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship.');
        }

        if (requestParameters.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest === null || requestParameters.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest === undefined) {
            throw new runtime.RequiredError('appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest','Required parameter requestParameters.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest was null or undefined when calling appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequestToJSON(requestParameters.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(requestParameters: AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appClipDefaultExperiencesUpdateInstanceRaw(requestParameters: AppClipDefaultExperiencesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppClipDefaultExperienceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appClipDefaultExperiencesUpdateInstance.');
        }

        if (requestParameters.appClipDefaultExperienceUpdateRequest === null || requestParameters.appClipDefaultExperienceUpdateRequest === undefined) {
            throw new runtime.RequiredError('appClipDefaultExperienceUpdateRequest','Required parameter requestParameters.appClipDefaultExperienceUpdateRequest was null or undefined when calling appClipDefaultExperiencesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appClipDefaultExperiences/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppClipDefaultExperienceUpdateRequestToJSON(requestParameters.appClipDefaultExperienceUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppClipDefaultExperienceResponseFromJSON(jsonValue));
    }

    /**
     */
    async appClipDefaultExperiencesUpdateInstance(requestParameters: AppClipDefaultExperiencesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppClipDefaultExperienceResponse> {
        const response = await this.appClipDefaultExperiencesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    InvocationUrls: 'invocationUrls'
} as const;
export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum[keyof typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedIncludeEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience'
} as const;
export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedIncludeEnum = typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedIncludeEnum[keyof typeof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppClipHeaderImage: 'appClipHeaderImage',
    Locale: 'locale',
    Subtitle: 'subtitle'
} as const;
export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperienceLocalizationsEnum[keyof typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipDefaultExperienceLocalizationsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipHeaderImagesEnum = {
    AppClipDefaultExperienceLocalization: 'appClipDefaultExperienceLocalization',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    ImageAsset: 'imageAsset',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipHeaderImagesEnum = typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipHeaderImagesEnum[keyof typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedFieldsAppClipHeaderImagesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedIncludeEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppClipHeaderImage: 'appClipHeaderImage'
} as const;
export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedIncludeEnum = typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedIncludeEnum[keyof typeof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperiencesEnum = typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperiencesEnum[keyof typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesGetInstanceIncludeEnum = {
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppClipDefaultExperiencesGetInstanceIncludeEnum = typeof AppClipDefaultExperiencesGetInstanceIncludeEnum[keyof typeof AppClipDefaultExperiencesGetInstanceIncludeEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesGetInstanceFieldsAppClipAppStoreReviewDetailsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    InvocationUrls: 'invocationUrls'
} as const;
export type AppClipDefaultExperiencesGetInstanceFieldsAppClipAppStoreReviewDetailsEnum = typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipAppStoreReviewDetailsEnum[keyof typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppClipDefaultExperiencesGetInstanceFieldsAppStoreVersionsEnum = typeof AppClipDefaultExperiencesGetInstanceFieldsAppStoreVersionsEnum[keyof typeof AppClipDefaultExperiencesGetInstanceFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperienceLocalizationsEnum = {
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppClipHeaderImage: 'appClipHeaderImage',
    Locale: 'locale',
    Subtitle: 'subtitle'
} as const;
export type AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperienceLocalizationsEnum = typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperienceLocalizationsEnum[keyof typeof AppClipDefaultExperiencesGetInstanceFieldsAppClipDefaultExperienceLocalizationsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: 'ageRatingOverride',
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    Gambling: 'gambling',
    GamblingAndContests: 'gamblingAndContests',
    GamblingSimulated: 'gamblingSimulated',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    KidsAgeBand: 'kidsAgeBand',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SeventeenPlus: 'seventeenPlus',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealistic: 'violenceRealistic',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersion: 'appStoreVersion',
    Description: 'description',
    Keywords: 'keywords',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: 'app',
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    ControlVersions: 'controlVersions',
    EndDate: 'endDate',
    LatestControlVersion: 'latestControlVersion',
    Name: 'name',
    Platform: 'platform',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: 'appStoreVersion',
    Versions: 'versions'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: 'appStoreVersion',
    CurrentDayNumber: 'currentDayNumber',
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsBuildsEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsBuildsEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedIncludeEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    RoutingAppCoverage: 'routingAppCoverage'
} as const;
export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedIncludeEnum = typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedIncludeEnum[keyof typeof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedIncludeEnum];
