/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterLeaderboardSetCreateRequest,
  GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest,
  GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse,
  GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest,
  GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse,
  GameCenterLeaderboardSetLocalizationsResponse,
  GameCenterLeaderboardSetReleasesResponse,
  GameCenterLeaderboardSetResponse,
  GameCenterLeaderboardSetUpdateRequest,
  GameCenterLeaderboardsResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterLeaderboardSetCreateRequestFromJSON,
    GameCenterLeaderboardSetCreateRequestToJSON,
    GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestFromJSON,
    GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON,
    GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponseFromJSON,
    GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponseToJSON,
    GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequestFromJSON,
    GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequestToJSON,
    GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponseFromJSON,
    GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponseToJSON,
    GameCenterLeaderboardSetLocalizationsResponseFromJSON,
    GameCenterLeaderboardSetLocalizationsResponseToJSON,
    GameCenterLeaderboardSetReleasesResponseFromJSON,
    GameCenterLeaderboardSetReleasesResponseToJSON,
    GameCenterLeaderboardSetResponseFromJSON,
    GameCenterLeaderboardSetResponseToJSON,
    GameCenterLeaderboardSetUpdateRequestFromJSON,
    GameCenterLeaderboardSetUpdateRequestToJSON,
    GameCenterLeaderboardsResponseFromJSON,
    GameCenterLeaderboardsResponseToJSON,
} from '../models';

export interface GameCenterLeaderboardSetsCreateInstanceRequest {
    gameCenterLeaderboardSetCreateRequest: GameCenterLeaderboardSetCreateRequest;
}

export interface GameCenterLeaderboardSetsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest {
    id: string;
    gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
}

export interface GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest {
    id: string;
    gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
}

export interface GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
    id: string;
    filterArchived?: Array<string>;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    limit?: number;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
}

export interface GameCenterLeaderboardSetsGetInstanceRequest {
    id: string;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum>;
    include?: Array<GameCenterLeaderboardSetsGetInstanceIncludeEnum>;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum>;
    limitGameCenterLeaderboards?: number;
    limitLocalizations?: number;
    limitReleases?: number;
}

export interface GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum>;
    limitLocalizations?: number;
    limitGameCenterLeaderboards?: number;
    limitReleases?: number;
    include?: Array<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest {
    id: string;
}

export interface GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest {
    id: string;
    gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;
}

export interface GameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterLeaderboardSetImages?: Array<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum>;
    limit?: number;
    include?: Array<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterDetail?: Array<string>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    limit?: number;
    include?: Array<GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum>;
}

export interface GameCenterLeaderboardSetsUpdateInstanceRequest {
    id: string;
    gameCenterLeaderboardSetUpdateRequest: GameCenterLeaderboardSetUpdateRequest;
}

/**
 * 
 */
export class GameCenterLeaderboardSetsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterLeaderboardSetsCreateInstanceRaw(requestParameters: GameCenterLeaderboardSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetResponse>> {
        if (requestParameters.gameCenterLeaderboardSetCreateRequest === null || requestParameters.gameCenterLeaderboardSetCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetCreateRequest','Required parameter requestParameters.gameCenterLeaderboardSetCreateRequest was null or undefined when calling gameCenterLeaderboardSetsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetCreateRequestToJSON(requestParameters.gameCenterLeaderboardSetCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsCreateInstance(requestParameters: GameCenterLeaderboardSetsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetResponse> {
        const response = await this.gameCenterLeaderboardSetsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsDeleteInstanceRaw(requestParameters: GameCenterLeaderboardSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetsDeleteInstance(requestParameters: GameCenterLeaderboardSetsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship.');
        }

        if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest','Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship.');
        }

        if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest','Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterArchived) {
            queryParameters['filter[archived]'] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterReferenceName) {
            queryParameters['filter[referenceName]'] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
            queryParameters['fields[gameCenterLeaderboardLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardReleases) {
            queryParameters['fields[gameCenterLeaderboardReleases]'] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
            queryParameters['limit[gameCenterLeaderboardSets]'] = requestParameters.limitGameCenterLeaderboardSets;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardsResponse> {
        const response = await this.gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> {
        const response = await this.gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest','Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters: GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetsGetInstanceRaw(requestParameters: GameCenterLeaderboardSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsGetInstance(requestParameters: GameCenterLeaderboardSetsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetResponse> {
        const response = await this.gameCenterLeaderboardSetsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRaw(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterGroups) {
            queryParameters['fields[gameCenterGroups]'] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboards) {
            queryParameters['fields[gameCenterLeaderboards]'] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitLocalizations !== undefined) {
            queryParameters['limit[localizations]'] = requestParameters.limitLocalizations;
        }

        if (requestParameters.limitGameCenterLeaderboards !== undefined) {
            queryParameters['limit[gameCenterLeaderboards]'] = requestParameters.limitGameCenterLeaderboards;
        }

        if (requestParameters.limitReleases !== undefined) {
            queryParameters['limit[releases]'] = requestParameters.limitReleases;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetResponse> {
        const response = await this.gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> {
        const response = await this.gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRaw(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship.');
        }

        if (requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === null || requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest','Required parameter requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequestToJSON(requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(requestParameters: GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterLeaderboardSetsLocalizationsGetToManyRelatedRaw(requestParameters: GameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetLocalizationsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
            queryParameters['fields[gameCenterLeaderboardSetLocalizations]'] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetImages) {
            queryParameters['fields[gameCenterLeaderboardSetImages]'] = requestParameters.fieldsGameCenterLeaderboardSetImages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsLocalizationsGetToManyRelated(requestParameters: GameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetLocalizationsResponse> {
        const response = await this.gameCenterLeaderboardSetsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsReleasesGetToManyRelatedRaw(requestParameters: GameCenterLeaderboardSetsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetReleasesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsReleasesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterLive) {
            queryParameters['filter[live]'] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterGameCenterDetail) {
            queryParameters['filter[gameCenterDetail]'] = requestParameters.filterGameCenterDetail.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
            queryParameters['fields[gameCenterLeaderboardSetReleases]'] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterLeaderboardSets) {
            queryParameters['fields[gameCenterLeaderboardSets]'] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}/releases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetReleasesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsReleasesGetToManyRelated(requestParameters: GameCenterLeaderboardSetsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetReleasesResponse> {
        const response = await this.gameCenterLeaderboardSetsReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterLeaderboardSetsUpdateInstanceRaw(requestParameters: GameCenterLeaderboardSetsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsUpdateInstance.');
        }

        if (requestParameters.gameCenterLeaderboardSetUpdateRequest === null || requestParameters.gameCenterLeaderboardSetUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterLeaderboardSetUpdateRequest','Required parameter requestParameters.gameCenterLeaderboardSetUpdateRequest was null or undefined when calling gameCenterLeaderboardSetsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterLeaderboardSetUpdateRequestToJSON(requestParameters.gameCenterLeaderboardSetUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterLeaderboardSetResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterLeaderboardSetsUpdateInstance(requestParameters: GameCenterLeaderboardSetsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetResponse> {
        const response = await this.gameCenterLeaderboardSetsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    FormatterOverride: 'formatterOverride',
    FormatterSuffix: 'formatterSuffix',
    FormatterSuffixSingular: 'formatterSuffixSingular',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    GameCenterLeaderboardImage: 'gameCenterLeaderboardImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    ReferenceName: 'referenceName'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: 'archived',
    DefaultFormatter: 'defaultFormatter',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GroupLeaderboard: 'groupLeaderboard',
    Localizations: 'localizations',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    RecurrenceStartDate: 'recurrenceStartDate',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    ScoreRangeEnd: 'scoreRangeEnd',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreSortType: 'scoreSortType',
    SubmissionType: 'submissionType',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboard: 'gameCenterLeaderboard',
    Live: 'live'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GroupLeaderboard: 'groupLeaderboard',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum[keyof typeof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGetInstanceIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardSetsGetInstanceIncludeEnum = typeof GameCenterLeaderboardSetsGetInstanceIncludeEnum[keyof typeof GameCenterLeaderboardSetsGetInstanceIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    Live: 'live'
} as const;
export type GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    Archived: 'archived',
    DefaultFormatter: 'defaultFormatter',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GroupLeaderboard: 'groupLeaderboard',
    Localizations: 'localizations',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    RecurrenceStartDate: 'recurrenceStartDate',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    ScoreRangeEnd: 'scoreRangeEnd',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreSortType: 'scoreSortType',
    SubmissionType: 'submissionType',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    Live: 'live'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterDetails: 'gameCenterDetails',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    ReferenceName: 'referenceName'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: 'archived',
    DefaultFormatter: 'defaultFormatter',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GroupLeaderboard: 'groupLeaderboard',
    Localizations: 'localizations',
    RecurrenceDuration: 'recurrenceDuration',
    RecurrenceRule: 'recurrenceRule',
    RecurrenceStartDate: 'recurrenceStartDate',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    ScoreRangeEnd: 'scoreRangeEnd',
    ScoreRangeStart: 'scoreRangeStart',
    ScoreSortType: 'scoreSortType',
    SubmissionType: 'submissionType',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    Releases: 'releases'
} as const;
export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum = typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum[keyof typeof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage',
    Locale: 'locale',
    Name: 'name'
} as const;
export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum[keyof typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum = {
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    GameCenterLeaderboardSetLocalization: 'gameCenterLeaderboardSetLocalization',
    ImageAsset: 'imageAsset',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum = typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum[keyof typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum = {
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    GameCenterLeaderboardSetImage: 'gameCenterLeaderboardSetImage'
} as const;
export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum = typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum[keyof typeof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet',
    Live: 'live'
} as const;
export type GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum[keyof typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    GroupLeaderboardSet: 'groupLeaderboardSet',
    Localizations: 'localizations',
    ReferenceName: 'referenceName',
    Releases: 'releases',
    VendorIdentifier: 'vendorIdentifier'
} as const;
export type GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum[keyof typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum[keyof typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: 'gameCenterDetail',
    GameCenterLeaderboardSet: 'gameCenterLeaderboardSet'
} as const;
export type GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum = typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum[keyof typeof GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum];
