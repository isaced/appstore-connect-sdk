/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsReportRequestCreateRequest,
  AnalyticsReportRequestResponse,
  AnalyticsReportsResponse,
  ErrorResponse,
} from '../models';
import {
    AnalyticsReportRequestCreateRequestFromJSON,
    AnalyticsReportRequestCreateRequestToJSON,
    AnalyticsReportRequestResponseFromJSON,
    AnalyticsReportRequestResponseToJSON,
    AnalyticsReportsResponseFromJSON,
    AnalyticsReportsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AnalyticsReportRequestsCreateInstanceRequest {
    analyticsReportRequestCreateRequest: AnalyticsReportRequestCreateRequest;
}

export interface AnalyticsReportRequestsDeleteInstanceRequest {
    id: string;
}

export interface AnalyticsReportRequestsGetInstanceRequest {
    id: string;
    fieldsAnalyticsReportRequests?: Array<AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportRequestsEnum>;
    include?: Array<AnalyticsReportRequestsGetInstanceIncludeEnum>;
    fieldsAnalyticsReports?: Array<AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportsEnum>;
    limitReports?: number;
}

export interface AnalyticsReportRequestsReportsGetToManyRelatedRequest {
    id: string;
    filterCategory?: Array<AnalyticsReportRequestsReportsGetToManyRelatedFilterCategoryEnum>;
    filterName?: Array<string>;
    fieldsAnalyticsReports?: Array<AnalyticsReportRequestsReportsGetToManyRelatedFieldsAnalyticsReportsEnum>;
    limit?: number;
}

/**
 * 
 */
export class AnalyticsReportRequestsApi extends runtime.BaseAPI {

    /**
     */
    async analyticsReportRequestsCreateInstanceRaw(requestParameters: AnalyticsReportRequestsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportRequestResponse>> {
        if (requestParameters.analyticsReportRequestCreateRequest === null || requestParameters.analyticsReportRequestCreateRequest === undefined) {
            throw new runtime.RequiredError('analyticsReportRequestCreateRequest','Required parameter requestParameters.analyticsReportRequestCreateRequest was null or undefined when calling analyticsReportRequestsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReportRequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticsReportRequestCreateRequestToJSON(requestParameters.analyticsReportRequestCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async analyticsReportRequestsCreateInstance(requestParameters: AnalyticsReportRequestsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportRequestResponse> {
        const response = await this.analyticsReportRequestsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async analyticsReportRequestsDeleteInstanceRaw(requestParameters: AnalyticsReportRequestsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling analyticsReportRequestsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReportRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async analyticsReportRequestsDeleteInstance(requestParameters: AnalyticsReportRequestsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsReportRequestsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async analyticsReportRequestsGetInstanceRaw(requestParameters: AnalyticsReportRequestsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportRequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling analyticsReportRequestsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAnalyticsReportRequests) {
            queryParameters['fields[analyticsReportRequests]'] = requestParameters.fieldsAnalyticsReportRequests.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReports) {
            queryParameters['fields[analyticsReports]'] = requestParameters.fieldsAnalyticsReports.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitReports !== undefined) {
            queryParameters['limit[reports]'] = requestParameters.limitReports;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReportRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async analyticsReportRequestsGetInstance(requestParameters: AnalyticsReportRequestsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportRequestResponse> {
        const response = await this.analyticsReportRequestsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async analyticsReportRequestsReportsGetToManyRelatedRaw(requestParameters: AnalyticsReportRequestsReportsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticsReportsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling analyticsReportRequestsReportsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterCategory) {
            queryParameters['filter[category]'] = requestParameters.filterCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAnalyticsReports) {
            queryParameters['fields[analyticsReports]'] = requestParameters.fieldsAnalyticsReports.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/analyticsReportRequests/{id}/reports`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticsReportsResponseFromJSON(jsonValue));
    }

    /**
     */
    async analyticsReportRequestsReportsGetToManyRelated(requestParameters: AnalyticsReportRequestsReportsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticsReportsResponse> {
        const response = await this.analyticsReportRequestsReportsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportRequestsEnum = {
    AccessType: 'accessType',
    App: 'app',
    Reports: 'reports',
    StoppedDueToInactivity: 'stoppedDueToInactivity'
} as const;
export type AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportRequestsEnum = typeof AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportRequestsEnum[keyof typeof AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportRequestsEnum];
/**
 * @export
 */
export const AnalyticsReportRequestsGetInstanceIncludeEnum = {
    Reports: 'reports'
} as const;
export type AnalyticsReportRequestsGetInstanceIncludeEnum = typeof AnalyticsReportRequestsGetInstanceIncludeEnum[keyof typeof AnalyticsReportRequestsGetInstanceIncludeEnum];
/**
 * @export
 */
export const AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportsEnum = {
    Category: 'category',
    Instances: 'instances',
    Name: 'name'
} as const;
export type AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportsEnum = typeof AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportsEnum[keyof typeof AnalyticsReportRequestsGetInstanceFieldsAnalyticsReportsEnum];
/**
 * @export
 */
export const AnalyticsReportRequestsReportsGetToManyRelatedFilterCategoryEnum = {
    AppUsage: 'APP_USAGE',
    AppStoreEngagement: 'APP_STORE_ENGAGEMENT',
    Commerce: 'COMMERCE',
    FrameworkUsage: 'FRAMEWORK_USAGE',
    Performance: 'PERFORMANCE'
} as const;
export type AnalyticsReportRequestsReportsGetToManyRelatedFilterCategoryEnum = typeof AnalyticsReportRequestsReportsGetToManyRelatedFilterCategoryEnum[keyof typeof AnalyticsReportRequestsReportsGetToManyRelatedFilterCategoryEnum];
/**
 * @export
 */
export const AnalyticsReportRequestsReportsGetToManyRelatedFieldsAnalyticsReportsEnum = {
    Category: 'category',
    Instances: 'instances',
    Name: 'name'
} as const;
export type AnalyticsReportRequestsReportsGetToManyRelatedFieldsAnalyticsReportsEnum = typeof AnalyticsReportRequestsReportsGetToManyRelatedFieldsAnalyticsReportsEnum[keyof typeof AnalyticsReportRequestsReportsGetToManyRelatedFieldsAnalyticsReportsEnum];
