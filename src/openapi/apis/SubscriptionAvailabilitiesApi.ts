/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionAvailabilityCreateRequest,
  SubscriptionAvailabilityResponse,
  TerritoriesResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionAvailabilityCreateRequestFromJSON,
    SubscriptionAvailabilityCreateRequestToJSON,
    SubscriptionAvailabilityResponseFromJSON,
    SubscriptionAvailabilityResponseToJSON,
    TerritoriesResponseFromJSON,
    TerritoriesResponseToJSON,
} from '../models';

export interface SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest {
    id: string;
    fieldsTerritories?: Array<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedFieldsTerritoriesEnum>;
    limit?: number;
}

export interface SubscriptionAvailabilitiesCreateInstanceRequest {
    subscriptionAvailabilityCreateRequest: SubscriptionAvailabilityCreateRequest;
}

export interface SubscriptionAvailabilitiesGetInstanceRequest {
    id: string;
    fieldsSubscriptionAvailabilities?: Array<SubscriptionAvailabilitiesGetInstanceFieldsSubscriptionAvailabilitiesEnum>;
    include?: Array<SubscriptionAvailabilitiesGetInstanceIncludeEnum>;
    fieldsTerritories?: Array<SubscriptionAvailabilitiesGetInstanceFieldsTerritoriesEnum>;
    limitAvailableTerritories?: number;
}

/**
 * 
 */
export class SubscriptionAvailabilitiesApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRaw(requestParameters: SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerritoriesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionAvailabilities/{id}/availableTerritories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerritoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated(requestParameters: SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerritoriesResponse> {
        const response = await this.subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionAvailabilitiesCreateInstanceRaw(requestParameters: SubscriptionAvailabilitiesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAvailabilityResponse>> {
        if (requestParameters.subscriptionAvailabilityCreateRequest === null || requestParameters.subscriptionAvailabilityCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionAvailabilityCreateRequest','Required parameter requestParameters.subscriptionAvailabilityCreateRequest was null or undefined when calling subscriptionAvailabilitiesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionAvailabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionAvailabilityCreateRequestToJSON(requestParameters.subscriptionAvailabilityCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionAvailabilitiesCreateInstance(requestParameters: SubscriptionAvailabilitiesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAvailabilityResponse> {
        const response = await this.subscriptionAvailabilitiesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionAvailabilitiesGetInstanceRaw(requestParameters: SubscriptionAvailabilitiesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionAvailabilityResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionAvailabilitiesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionAvailabilities) {
            queryParameters['fields[subscriptionAvailabilities]'] = requestParameters.fieldsSubscriptionAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsTerritories) {
            queryParameters['fields[territories]'] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAvailableTerritories !== undefined) {
            queryParameters['limit[availableTerritories]'] = requestParameters.limitAvailableTerritories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionAvailabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionAvailabilitiesGetInstance(requestParameters: SubscriptionAvailabilitiesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionAvailabilityResponse> {
        const response = await this.subscriptionAvailabilitiesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedFieldsTerritoriesEnum = typeof SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedFieldsTerritoriesEnum[keyof typeof SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedFieldsTerritoriesEnum];
/**
 * @export
 */
export const SubscriptionAvailabilitiesGetInstanceFieldsSubscriptionAvailabilitiesEnum = {
    AvailableInNewTerritories: 'availableInNewTerritories',
    AvailableTerritories: 'availableTerritories',
    Subscription: 'subscription'
} as const;
export type SubscriptionAvailabilitiesGetInstanceFieldsSubscriptionAvailabilitiesEnum = typeof SubscriptionAvailabilitiesGetInstanceFieldsSubscriptionAvailabilitiesEnum[keyof typeof SubscriptionAvailabilitiesGetInstanceFieldsSubscriptionAvailabilitiesEnum];
/**
 * @export
 */
export const SubscriptionAvailabilitiesGetInstanceIncludeEnum = {
    AvailableTerritories: 'availableTerritories',
    Subscription: 'subscription'
} as const;
export type SubscriptionAvailabilitiesGetInstanceIncludeEnum = typeof SubscriptionAvailabilitiesGetInstanceIncludeEnum[keyof typeof SubscriptionAvailabilitiesGetInstanceIncludeEnum];
/**
 * @export
 */
export const SubscriptionAvailabilitiesGetInstanceFieldsTerritoriesEnum = {
    Currency: 'currency'
} as const;
export type SubscriptionAvailabilitiesGetInstanceFieldsTerritoriesEnum = typeof SubscriptionAvailabilitiesGetInstanceFieldsTerritoriesEnum[keyof typeof SubscriptionAvailabilitiesGetInstanceFieldsTerritoriesEnum];
