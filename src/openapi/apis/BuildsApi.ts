/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppEncryptionDeclarationWithoutIncludesResponse,
  AppStoreVersionResponse,
  AppWithoutIncludesResponse,
  BetaAppReviewSubmissionWithoutIncludesResponse,
  BetaBuildLocalizationsWithoutIncludesResponse,
  BetaBuildUsagesV1MetricResponse,
  BetaTestersWithoutIncludesResponse,
  BuildAppEncryptionDeclarationLinkageRequest,
  BuildAppEncryptionDeclarationLinkageResponse,
  BuildBetaDetailResponse,
  BuildBetaGroupsLinkagesRequest,
  BuildIconsWithoutIncludesResponse,
  BuildIndividualTestersLinkagesRequest,
  BuildIndividualTestersLinkagesResponse,
  BuildResponse,
  BuildUpdateRequest,
  BuildsResponse,
  DiagnosticSignaturesResponse,
  ErrorResponse,
  PrereleaseVersionWithoutIncludesResponse,
  XcodeMetrics,
} from '../models';
import {
    AppEncryptionDeclarationWithoutIncludesResponseFromJSON,
    AppEncryptionDeclarationWithoutIncludesResponseToJSON,
    AppStoreVersionResponseFromJSON,
    AppStoreVersionResponseToJSON,
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    BetaAppReviewSubmissionWithoutIncludesResponseFromJSON,
    BetaAppReviewSubmissionWithoutIncludesResponseToJSON,
    BetaBuildLocalizationsWithoutIncludesResponseFromJSON,
    BetaBuildLocalizationsWithoutIncludesResponseToJSON,
    BetaBuildUsagesV1MetricResponseFromJSON,
    BetaBuildUsagesV1MetricResponseToJSON,
    BetaTestersWithoutIncludesResponseFromJSON,
    BetaTestersWithoutIncludesResponseToJSON,
    BuildAppEncryptionDeclarationLinkageRequestFromJSON,
    BuildAppEncryptionDeclarationLinkageRequestToJSON,
    BuildAppEncryptionDeclarationLinkageResponseFromJSON,
    BuildAppEncryptionDeclarationLinkageResponseToJSON,
    BuildBetaDetailResponseFromJSON,
    BuildBetaDetailResponseToJSON,
    BuildBetaGroupsLinkagesRequestFromJSON,
    BuildBetaGroupsLinkagesRequestToJSON,
    BuildIconsWithoutIncludesResponseFromJSON,
    BuildIconsWithoutIncludesResponseToJSON,
    BuildIndividualTestersLinkagesRequestFromJSON,
    BuildIndividualTestersLinkagesRequestToJSON,
    BuildIndividualTestersLinkagesResponseFromJSON,
    BuildIndividualTestersLinkagesResponseToJSON,
    BuildResponseFromJSON,
    BuildResponseToJSON,
    BuildUpdateRequestFromJSON,
    BuildUpdateRequestToJSON,
    BuildsResponseFromJSON,
    BuildsResponseToJSON,
    DiagnosticSignaturesResponseFromJSON,
    DiagnosticSignaturesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PrereleaseVersionWithoutIncludesResponseFromJSON,
    PrereleaseVersionWithoutIncludesResponseToJSON,
    XcodeMetricsFromJSON,
    XcodeMetricsToJSON,
} from '../models';

export interface BuildsAppEncryptionDeclarationGetToOneRelatedRequest {
    id: string;
    fieldsAppEncryptionDeclarations?: Array<BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum>;
}

export interface BuildsAppEncryptionDeclarationGetToOneRelationshipRequest {
    id: string;
}

export interface BuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
    id: string;
    buildAppEncryptionDeclarationLinkageRequest: BuildAppEncryptionDeclarationLinkageRequest;
}

export interface BuildsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BuildsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface BuildsAppStoreVersionGetToOneRelatedRequest {
    id: string;
    fieldsAgeRatingDeclarations?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum>;
    fieldsAppStoreReviewDetails?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum>;
    fieldsAppStoreVersionLocalizations?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum>;
    fieldsAppStoreVersionExperiments?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsAppStoreVersionSubmissions?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum>;
    fieldsAlternativeDistributionPackages?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum>;
    fieldsAppStoreVersions?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsApps?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum>;
    fieldsRoutingAppCoverages?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum>;
    fieldsAppClipDefaultExperiences?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum>;
    fieldsAppStoreVersionPhasedReleases?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum>;
    fieldsBuilds?: Array<BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum>;
    limitAppStoreVersionLocalizations?: number;
    limitAppStoreVersionExperiments?: number;
    limitAppStoreVersionExperimentsV2?: number;
    include?: Array<BuildsAppStoreVersionGetToOneRelatedIncludeEnum>;
}

export interface BuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
    id: string;
    fieldsBetaAppReviewSubmissions?: Array<BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum>;
}

export interface BuildsBetaBuildLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsBetaBuildLocalizations?: Array<BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum>;
    limit?: number;
}

export interface BuildsBetaBuildUsagesGetMetricsRequest {
    id: string;
    limit?: number;
}

export interface BuildsBetaGroupsCreateToManyRelationshipRequest {
    id: string;
    buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest;
}

export interface BuildsBetaGroupsDeleteToManyRelationshipRequest {
    id: string;
    buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest;
}

export interface BuildsBuildBetaDetailGetToOneRelatedRequest {
    id: string;
    fieldsBuildBetaDetails?: Array<BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum>;
    fieldsBuilds?: Array<BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum>;
    include?: Array<BuildsBuildBetaDetailGetToOneRelatedIncludeEnum>;
}

export interface BuildsDiagnosticSignaturesGetToManyRelatedRequest {
    id: string;
    filterDiagnosticType?: Array<BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum>;
    fieldsDiagnosticSignatures?: Array<BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum>;
    limit?: number;
}

export interface BuildsGetCollectionRequest {
    filterBetaAppReviewSubmissionBetaReviewState?: Array<BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum>;
    filterBuildAudienceType?: Array<BuildsGetCollectionFilterBuildAudienceTypeEnum>;
    filterExpired?: Array<string>;
    filterPreReleaseVersionPlatform?: Array<BuildsGetCollectionFilterPreReleaseVersionPlatformEnum>;
    filterPreReleaseVersionVersion?: Array<string>;
    filterProcessingState?: Array<BuildsGetCollectionFilterProcessingStateEnum>;
    filterUsesNonExemptEncryption?: Array<string>;
    filterVersion?: Array<string>;
    filterApp?: Array<string>;
    filterAppStoreVersion?: Array<string>;
    filterBetaGroups?: Array<string>;
    filterPreReleaseVersion?: Array<string>;
    filterId?: Array<string>;
    sort?: Array<BuildsGetCollectionSortEnum>;
    fieldsBuilds?: Array<BuildsGetCollectionFieldsBuildsEnum>;
    limit?: number;
    include?: Array<BuildsGetCollectionIncludeEnum>;
    fieldsDiagnosticSignatures?: Array<BuildsGetCollectionFieldsDiagnosticSignaturesEnum>;
    fieldsBuildIcons?: Array<BuildsGetCollectionFieldsBuildIconsEnum>;
    fieldsBuildBetaDetails?: Array<BuildsGetCollectionFieldsBuildBetaDetailsEnum>;
    fieldsBetaAppReviewSubmissions?: Array<BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum>;
    fieldsBetaTesters?: Array<BuildsGetCollectionFieldsBetaTestersEnum>;
    fieldsAppStoreVersions?: Array<BuildsGetCollectionFieldsAppStoreVersionsEnum>;
    fieldsBetaBuildLocalizations?: Array<BuildsGetCollectionFieldsBetaBuildLocalizationsEnum>;
    fieldsPreReleaseVersions?: Array<BuildsGetCollectionFieldsPreReleaseVersionsEnum>;
    fieldsAppEncryptionDeclarations?: Array<BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum>;
    fieldsApps?: Array<BuildsGetCollectionFieldsAppsEnum>;
    fieldsPerfPowerMetrics?: Array<BuildsGetCollectionFieldsPerfPowerMetricsEnum>;
    limitBetaBuildLocalizations?: number;
    limitBetaGroups?: number;
    limitBuildBundles?: number;
    limitIcons?: number;
    limitIndividualTesters?: number;
}

export interface BuildsGetInstanceRequest {
    id: string;
    fieldsBuilds?: Array<BuildsGetInstanceFieldsBuildsEnum>;
    include?: Array<BuildsGetInstanceIncludeEnum>;
    fieldsDiagnosticSignatures?: Array<BuildsGetInstanceFieldsDiagnosticSignaturesEnum>;
    fieldsBuildIcons?: Array<BuildsGetInstanceFieldsBuildIconsEnum>;
    fieldsBuildBetaDetails?: Array<BuildsGetInstanceFieldsBuildBetaDetailsEnum>;
    fieldsBetaAppReviewSubmissions?: Array<BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum>;
    fieldsBetaTesters?: Array<BuildsGetInstanceFieldsBetaTestersEnum>;
    fieldsAppStoreVersions?: Array<BuildsGetInstanceFieldsAppStoreVersionsEnum>;
    fieldsBetaBuildLocalizations?: Array<BuildsGetInstanceFieldsBetaBuildLocalizationsEnum>;
    fieldsPreReleaseVersions?: Array<BuildsGetInstanceFieldsPreReleaseVersionsEnum>;
    fieldsAppEncryptionDeclarations?: Array<BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum>;
    fieldsApps?: Array<BuildsGetInstanceFieldsAppsEnum>;
    fieldsPerfPowerMetrics?: Array<BuildsGetInstanceFieldsPerfPowerMetricsEnum>;
    limitBetaBuildLocalizations?: number;
    limitBetaGroups?: number;
    limitBuildBundles?: number;
    limitIcons?: number;
    limitIndividualTesters?: number;
}

export interface BuildsIconsGetToManyRelatedRequest {
    id: string;
    fieldsBuildIcons?: Array<BuildsIconsGetToManyRelatedFieldsBuildIconsEnum>;
    limit?: number;
}

export interface BuildsIndividualTestersCreateToManyRelationshipRequest {
    id: string;
    buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest;
}

export interface BuildsIndividualTestersDeleteToManyRelationshipRequest {
    id: string;
    buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest;
}

export interface BuildsIndividualTestersGetToManyRelatedRequest {
    id: string;
    fieldsBetaTesters?: Array<BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum>;
    limit?: number;
}

export interface BuildsIndividualTestersGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface BuildsPerfPowerMetricsGetToManyRelatedRequest {
    id: string;
    filterDeviceType?: Array<string>;
    filterMetricType?: Array<BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum>;
    filterPlatform?: Array<BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum>;
}

export interface BuildsPreReleaseVersionGetToOneRelatedRequest {
    id: string;
    fieldsPreReleaseVersions?: Array<BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum>;
}

export interface BuildsUpdateInstanceRequest {
    id: string;
    buildUpdateRequest: BuildUpdateRequest;
}

/**
 * 
 */
export class BuildsApi extends runtime.BaseAPI {

    /**
     */
    async buildsAppEncryptionDeclarationGetToOneRelatedRaw(requestParameters: BuildsAppEncryptionDeclarationGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEncryptionDeclarationWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsAppEncryptionDeclarationGetToOneRelated(requestParameters: BuildsAppEncryptionDeclarationGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEncryptionDeclarationWithoutIncludesResponse> {
        const response = await this.buildsAppEncryptionDeclarationGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsAppEncryptionDeclarationGetToOneRelationshipRaw(requestParameters: BuildsAppEncryptionDeclarationGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildAppEncryptionDeclarationLinkageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationGetToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildAppEncryptionDeclarationLinkageResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsAppEncryptionDeclarationGetToOneRelationship(requestParameters: BuildsAppEncryptionDeclarationGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildAppEncryptionDeclarationLinkageResponse> {
        const response = await this.buildsAppEncryptionDeclarationGetToOneRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsAppEncryptionDeclarationUpdateToOneRelationshipRaw(requestParameters: BuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationUpdateToOneRelationship.');
        }

        if (requestParameters.buildAppEncryptionDeclarationLinkageRequest === null || requestParameters.buildAppEncryptionDeclarationLinkageRequest === undefined) {
            throw new runtime.RequiredError('buildAppEncryptionDeclarationLinkageRequest','Required parameter requestParameters.buildAppEncryptionDeclarationLinkageRequest was null or undefined when calling buildsAppEncryptionDeclarationUpdateToOneRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BuildAppEncryptionDeclarationLinkageRequestToJSON(requestParameters.buildAppEncryptionDeclarationLinkageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildsAppEncryptionDeclarationUpdateToOneRelationship(requestParameters: BuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildsAppEncryptionDeclarationUpdateToOneRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildsAppGetToOneRelatedRaw(requestParameters: BuildsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsAppGetToOneRelated(requestParameters: BuildsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.buildsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsAppStoreVersionGetToOneRelatedRaw(requestParameters: BuildsAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsAppStoreVersionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAgeRatingDeclarations) {
            queryParameters['fields[ageRatingDeclarations]'] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreReviewDetails) {
            queryParameters['fields[appStoreReviewDetails]'] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionLocalizations) {
            queryParameters['fields[appStoreVersionLocalizations]'] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionSubmissions) {
            queryParameters['fields[appStoreVersionSubmissions]'] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAlternativeDistributionPackages) {
            queryParameters['fields[alternativeDistributionPackages]'] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClipDefaultExperiences) {
            queryParameters['fields[appClipDefaultExperiences]'] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
            queryParameters['fields[appStoreVersionPhasedReleases]'] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
            queryParameters['limit[appStoreVersionLocalizations]'] = requestParameters.limitAppStoreVersionLocalizations;
        }

        if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
            queryParameters['limit[appStoreVersionExperiments]'] = requestParameters.limitAppStoreVersionExperiments;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/appStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsAppStoreVersionGetToOneRelated(requestParameters: BuildsAppStoreVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionResponse> {
        const response = await this.buildsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsBetaAppReviewSubmissionGetToOneRelatedRaw(requestParameters: BuildsBetaAppReviewSubmissionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaAppReviewSubmissionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/betaAppReviewSubmission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppReviewSubmissionWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsBetaAppReviewSubmissionGetToOneRelated(requestParameters: BuildsBetaAppReviewSubmissionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppReviewSubmissionWithoutIncludesResponse> {
        const response = await this.buildsBetaAppReviewSubmissionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsBetaBuildLocalizationsGetToManyRelatedRaw(requestParameters: BuildsBetaBuildLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildLocalizationsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaBuildLocalizations) {
            queryParameters['fields[betaBuildLocalizations]'] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/betaBuildLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaBuildLocalizationsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsBetaBuildLocalizationsGetToManyRelated(requestParameters: BuildsBetaBuildLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaBuildLocalizationsWithoutIncludesResponse> {
        const response = await this.buildsBetaBuildLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsBetaBuildUsagesGetMetricsRaw(requestParameters: BuildsBetaBuildUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaBuildUsagesV1MetricResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildUsagesGetMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/metrics/betaBuildUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaBuildUsagesV1MetricResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsBetaBuildUsagesGetMetrics(requestParameters: BuildsBetaBuildUsagesGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaBuildUsagesV1MetricResponse> {
        const response = await this.buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsBetaGroupsCreateToManyRelationshipRaw(requestParameters: BuildsBetaGroupsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaGroupsCreateToManyRelationship.');
        }

        if (requestParameters.buildBetaGroupsLinkagesRequest === null || requestParameters.buildBetaGroupsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('buildBetaGroupsLinkagesRequest','Required parameter requestParameters.buildBetaGroupsLinkagesRequest was null or undefined when calling buildsBetaGroupsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildBetaGroupsLinkagesRequestToJSON(requestParameters.buildBetaGroupsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildsBetaGroupsCreateToManyRelationship(requestParameters: BuildsBetaGroupsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildsBetaGroupsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildsBetaGroupsDeleteToManyRelationshipRaw(requestParameters: BuildsBetaGroupsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBetaGroupsDeleteToManyRelationship.');
        }

        if (requestParameters.buildBetaGroupsLinkagesRequest === null || requestParameters.buildBetaGroupsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('buildBetaGroupsLinkagesRequest','Required parameter requestParameters.buildBetaGroupsLinkagesRequest was null or undefined when calling buildsBetaGroupsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BuildBetaGroupsLinkagesRequestToJSON(requestParameters.buildBetaGroupsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildsBetaGroupsDeleteToManyRelationship(requestParameters: BuildsBetaGroupsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildsBetaGroupsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildsBuildBetaDetailGetToOneRelatedRaw(requestParameters: BuildsBuildBetaDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildBetaDetailResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsBuildBetaDetailGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/buildBetaDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildBetaDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsBuildBetaDetailGetToOneRelated(requestParameters: BuildsBuildBetaDetailGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildBetaDetailResponse> {
        const response = await this.buildsBuildBetaDetailGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsDiagnosticSignaturesGetToManyRelatedRaw(requestParameters: BuildsDiagnosticSignaturesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiagnosticSignaturesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsDiagnosticSignaturesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterDiagnosticType) {
            queryParameters['filter[diagnosticType]'] = requestParameters.filterDiagnosticType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsDiagnosticSignatures) {
            queryParameters['fields[diagnosticSignatures]'] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/diagnosticSignatures`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiagnosticSignaturesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsDiagnosticSignaturesGetToManyRelated(requestParameters: BuildsDiagnosticSignaturesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiagnosticSignaturesResponse> {
        const response = await this.buildsDiagnosticSignaturesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsGetCollectionRaw(requestParameters: BuildsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterBetaAppReviewSubmissionBetaReviewState) {
            queryParameters['filter[betaAppReviewSubmission.betaReviewState]'] = requestParameters.filterBetaAppReviewSubmissionBetaReviewState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBuildAudienceType) {
            queryParameters['filter[buildAudienceType]'] = requestParameters.filterBuildAudienceType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterExpired) {
            queryParameters['filter[expired]'] = requestParameters.filterExpired.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPreReleaseVersionPlatform) {
            queryParameters['filter[preReleaseVersion.platform]'] = requestParameters.filterPreReleaseVersionPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPreReleaseVersionVersion) {
            queryParameters['filter[preReleaseVersion.version]'] = requestParameters.filterPreReleaseVersionVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterProcessingState) {
            queryParameters['filter[processingState]'] = requestParameters.filterProcessingState.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterUsesNonExemptEncryption) {
            queryParameters['filter[usesNonExemptEncryption]'] = requestParameters.filterUsesNonExemptEncryption.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVersion) {
            queryParameters['filter[version]'] = requestParameters.filterVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterAppStoreVersion) {
            queryParameters['filter[appStoreVersion]'] = requestParameters.filterAppStoreVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterBetaGroups) {
            queryParameters['filter[betaGroups]'] = requestParameters.filterBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPreReleaseVersion) {
            queryParameters['filter[preReleaseVersion]'] = requestParameters.filterPreReleaseVersion.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsDiagnosticSignatures) {
            queryParameters['fields[diagnosticSignatures]'] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildIcons) {
            queryParameters['fields[buildIcons]'] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaBuildLocalizations) {
            queryParameters['fields[betaBuildLocalizations]'] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPerfPowerMetrics) {
            queryParameters['fields[perfPowerMetrics]'] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBetaBuildLocalizations !== undefined) {
            queryParameters['limit[betaBuildLocalizations]'] = requestParameters.limitBetaBuildLocalizations;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuildBundles !== undefined) {
            queryParameters['limit[buildBundles]'] = requestParameters.limitBuildBundles;
        }

        if (requestParameters.limitIcons !== undefined) {
            queryParameters['limit[icons]'] = requestParameters.limitIcons;
        }

        if (requestParameters.limitIndividualTesters !== undefined) {
            queryParameters['limit[individualTesters]'] = requestParameters.limitIndividualTesters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildsResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsGetCollection(requestParameters: BuildsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildsResponse> {
        const response = await this.buildsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsGetInstanceRaw(requestParameters: BuildsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsDiagnosticSignatures) {
            queryParameters['fields[diagnosticSignatures]'] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildIcons) {
            queryParameters['fields[buildIcons]'] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuildBetaDetails) {
            queryParameters['fields[buildBetaDetails]'] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppReviewSubmissions) {
            queryParameters['fields[betaAppReviewSubmissions]'] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaBuildLocalizations) {
            queryParameters['fields[betaBuildLocalizations]'] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPerfPowerMetrics) {
            queryParameters['fields[perfPowerMetrics]'] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitBetaBuildLocalizations !== undefined) {
            queryParameters['limit[betaBuildLocalizations]'] = requestParameters.limitBetaBuildLocalizations;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitBuildBundles !== undefined) {
            queryParameters['limit[buildBundles]'] = requestParameters.limitBuildBundles;
        }

        if (requestParameters.limitIcons !== undefined) {
            queryParameters['limit[icons]'] = requestParameters.limitIcons;
        }

        if (requestParameters.limitIndividualTesters !== undefined) {
            queryParameters['limit[individualTesters]'] = requestParameters.limitIndividualTesters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsGetInstance(requestParameters: BuildsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.buildsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsIconsGetToManyRelatedRaw(requestParameters: BuildsIconsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildIconsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsIconsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBuildIcons) {
            queryParameters['fields[buildIcons]'] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/icons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildIconsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsIconsGetToManyRelated(requestParameters: BuildsIconsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildIconsWithoutIncludesResponse> {
        const response = await this.buildsIconsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsIndividualTestersCreateToManyRelationshipRaw(requestParameters: BuildsIndividualTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersCreateToManyRelationship.');
        }

        if (requestParameters.buildIndividualTestersLinkagesRequest === null || requestParameters.buildIndividualTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('buildIndividualTestersLinkagesRequest','Required parameter requestParameters.buildIndividualTestersLinkagesRequest was null or undefined when calling buildsIndividualTestersCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildIndividualTestersLinkagesRequestToJSON(requestParameters.buildIndividualTestersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildsIndividualTestersCreateToManyRelationship(requestParameters: BuildsIndividualTestersCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildsIndividualTestersCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildsIndividualTestersDeleteToManyRelationshipRaw(requestParameters: BuildsIndividualTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersDeleteToManyRelationship.');
        }

        if (requestParameters.buildIndividualTestersLinkagesRequest === null || requestParameters.buildIndividualTestersLinkagesRequest === undefined) {
            throw new runtime.RequiredError('buildIndividualTestersLinkagesRequest','Required parameter requestParameters.buildIndividualTestersLinkagesRequest was null or undefined when calling buildsIndividualTestersDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BuildIndividualTestersLinkagesRequestToJSON(requestParameters.buildIndividualTestersLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildsIndividualTestersDeleteToManyRelationship(requestParameters: BuildsIndividualTestersDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildsIndividualTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildsIndividualTestersGetToManyRelatedRaw(requestParameters: BuildsIndividualTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaTestersWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaTesters) {
            queryParameters['fields[betaTesters]'] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaTestersWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsIndividualTestersGetToManyRelated(requestParameters: BuildsIndividualTestersGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaTestersWithoutIncludesResponse> {
        const response = await this.buildsIndividualTestersGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsIndividualTestersGetToManyRelationshipRaw(requestParameters: BuildsIndividualTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildIndividualTestersLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildIndividualTestersLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsIndividualTestersGetToManyRelationship(requestParameters: BuildsIndividualTestersGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildIndividualTestersLinkagesResponse> {
        const response = await this.buildsIndividualTestersGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsPerfPowerMetricsGetToManyRelatedRaw(requestParameters: BuildsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XcodeMetrics>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsPerfPowerMetricsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterDeviceType) {
            queryParameters['filter[deviceType]'] = requestParameters.filterDeviceType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterMetricType) {
            queryParameters['filter[metricType]'] = requestParameters.filterMetricType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterPlatform) {
            queryParameters['filter[platform]'] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/perfPowerMetrics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => XcodeMetricsFromJSON(jsonValue));
    }

    /**
     */
    async buildsPerfPowerMetricsGetToManyRelated(requestParameters: BuildsPerfPowerMetricsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XcodeMetrics> {
        const response = await this.buildsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsPreReleaseVersionGetToOneRelatedRaw(requestParameters: BuildsPreReleaseVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrereleaseVersionWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsPreReleaseVersionGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}/preReleaseVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrereleaseVersionWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsPreReleaseVersionGetToOneRelated(requestParameters: BuildsPreReleaseVersionGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrereleaseVersionWithoutIncludesResponse> {
        const response = await this.buildsPreReleaseVersionGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async buildsUpdateInstanceRaw(requestParameters: BuildsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling buildsUpdateInstance.');
        }

        if (requestParameters.buildUpdateRequest === null || requestParameters.buildUpdateRequest === undefined) {
            throw new runtime.RequiredError('buildUpdateRequest','Required parameter requestParameters.buildUpdateRequest was null or undefined when calling buildsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/builds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BuildUpdateRequestToJSON(requestParameters.buildUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildsUpdateInstance(requestParameters: BuildsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildResponse> {
        const response = await this.buildsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = typeof BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum[keyof typeof BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const BuildsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BuildsAppGetToOneRelatedFieldsAppsEnum = typeof BuildsAppGetToOneRelatedFieldsAppsEnum[keyof typeof BuildsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: 'ageRatingOverride',
    AlcoholTobaccoOrDrugUseOrReferences: 'alcoholTobaccoOrDrugUseOrReferences',
    Contests: 'contests',
    Gambling: 'gambling',
    GamblingAndContests: 'gamblingAndContests',
    GamblingSimulated: 'gamblingSimulated',
    HorrorOrFearThemes: 'horrorOrFearThemes',
    KidsAgeBand: 'kidsAgeBand',
    MatureOrSuggestiveThemes: 'matureOrSuggestiveThemes',
    MedicalOrTreatmentInformation: 'medicalOrTreatmentInformation',
    ProfanityOrCrudeHumor: 'profanityOrCrudeHumor',
    SeventeenPlus: 'seventeenPlus',
    SexualContentGraphicAndNudity: 'sexualContentGraphicAndNudity',
    SexualContentOrNudity: 'sexualContentOrNudity',
    UnrestrictedWebAccess: 'unrestrictedWebAccess',
    ViolenceCartoonOrFantasy: 'violenceCartoonOrFantasy',
    ViolenceRealistic: 'violenceRealistic',
    ViolenceRealisticProlongedGraphicOrSadistic: 'violenceRealisticProlongedGraphicOrSadistic'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: 'appStoreReviewAttachments',
    AppStoreVersion: 'appStoreVersion',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: 'appPreviewSets',
    AppScreenshotSets: 'appScreenshotSets',
    AppStoreVersion: 'appStoreVersion',
    Description: 'description',
    Keywords: 'keywords',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PromotionalText: 'promotionalText',
    SupportUrl: 'supportUrl',
    WhatsNew: 'whatsNew'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: 'app',
    AppStoreVersion: 'appStoreVersion',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    ControlVersions: 'controlVersions',
    EndDate: 'endDate',
    LatestControlVersion: 'latestControlVersion',
    Name: 'name',
    Platform: 'platform',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: 'appStoreVersion',
    Versions: 'versions'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: 'action',
    AppClip: 'appClip',
    AppClipAppStoreReviewDetail: 'appClipAppStoreReviewDetail',
    AppClipDefaultExperienceLocalizations: 'appClipDefaultExperienceLocalizations',
    AppClipDefaultExperienceTemplate: 'appClipDefaultExperienceTemplate',
    ReleaseWithAppStoreVersion: 'releaseWithAppStoreVersion'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: 'appStoreVersion',
    CurrentDayNumber: 'currentDayNumber',
    PhasedReleaseState: 'phasedReleaseState',
    StartDate: 'startDate',
    TotalPauseDuration: 'totalPauseDuration'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = typeof BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BuildsAppStoreVersionGetToOneRelatedIncludeEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    Build: 'build',
    RoutingAppCoverage: 'routingAppCoverage'
} as const;
export type BuildsAppStoreVersionGetToOneRelatedIncludeEnum = typeof BuildsAppStoreVersionGetToOneRelatedIncludeEnum[keyof typeof BuildsAppStoreVersionGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    Build: 'build',
    SubmittedDate: 'submittedDate'
} as const;
export type BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = typeof BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum[keyof typeof BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = {
    Build: 'build',
    Locale: 'locale',
    WhatsNew: 'whatsNew'
} as const;
export type BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = typeof BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum[keyof typeof BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum];
/**
 * @export
 */
export const BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    Build: 'build',
    ExternalBuildState: 'externalBuildState',
    InternalBuildState: 'internalBuildState'
} as const;
export type BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum = typeof BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum[keyof typeof BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum = typeof BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum[keyof typeof BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const BuildsBuildBetaDetailGetToOneRelatedIncludeEnum = {
    Build: 'build'
} as const;
export type BuildsBuildBetaDetailGetToOneRelatedIncludeEnum = typeof BuildsBuildBetaDetailGetToOneRelatedIncludeEnum[keyof typeof BuildsBuildBetaDetailGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum = {
    DiskWrites: 'DISK_WRITES',
    Hangs: 'HANGS',
    Launches: 'LAUNCHES'
} as const;
export type BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum = typeof BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum[keyof typeof BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum];
/**
 * @export
 */
export const BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: 'diagnosticType',
    Insight: 'insight',
    Logs: 'logs',
    Signature: 'signature',
    Weight: 'weight'
} as const;
export type BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum = typeof BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum[keyof typeof BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum];
/**
 * @export
 */
export const BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum = {
    WaitingForReview: 'WAITING_FOR_REVIEW',
    InReview: 'IN_REVIEW',
    Rejected: 'REJECTED',
    Approved: 'APPROVED'
} as const;
export type BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum = typeof BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum[keyof typeof BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum];
/**
 * @export
 */
export const BuildsGetCollectionFilterBuildAudienceTypeEnum = {
    InternalOnly: 'INTERNAL_ONLY',
    AppStoreEligible: 'APP_STORE_ELIGIBLE'
} as const;
export type BuildsGetCollectionFilterBuildAudienceTypeEnum = typeof BuildsGetCollectionFilterBuildAudienceTypeEnum[keyof typeof BuildsGetCollectionFilterBuildAudienceTypeEnum];
/**
 * @export
 */
export const BuildsGetCollectionFilterPreReleaseVersionPlatformEnum = {
    Ios: 'IOS',
    MacOs: 'MAC_OS',
    TvOs: 'TV_OS',
    VisionOs: 'VISION_OS'
} as const;
export type BuildsGetCollectionFilterPreReleaseVersionPlatformEnum = typeof BuildsGetCollectionFilterPreReleaseVersionPlatformEnum[keyof typeof BuildsGetCollectionFilterPreReleaseVersionPlatformEnum];
/**
 * @export
 */
export const BuildsGetCollectionFilterProcessingStateEnum = {
    Processing: 'PROCESSING',
    Failed: 'FAILED',
    Invalid: 'INVALID',
    Valid: 'VALID'
} as const;
export type BuildsGetCollectionFilterProcessingStateEnum = typeof BuildsGetCollectionFilterProcessingStateEnum[keyof typeof BuildsGetCollectionFilterProcessingStateEnum];
/**
 * @export
 */
export const BuildsGetCollectionSortEnum = {
    PreReleaseVersion: 'preReleaseVersion',
    PreReleaseVersion: '-preReleaseVersion',
    UploadedDate: 'uploadedDate',
    UploadedDate: '-uploadedDate',
    Version: 'version',
    Version: '-version'
} as const;
export type BuildsGetCollectionSortEnum = typeof BuildsGetCollectionSortEnum[keyof typeof BuildsGetCollectionSortEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BuildsGetCollectionFieldsBuildsEnum = typeof BuildsGetCollectionFieldsBuildsEnum[keyof typeof BuildsGetCollectionFieldsBuildsEnum];
/**
 * @export
 */
export const BuildsGetCollectionIncludeEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    PreReleaseVersion: 'preReleaseVersion'
} as const;
export type BuildsGetCollectionIncludeEnum = typeof BuildsGetCollectionIncludeEnum[keyof typeof BuildsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: 'diagnosticType',
    Insight: 'insight',
    Logs: 'logs',
    Signature: 'signature',
    Weight: 'weight'
} as const;
export type BuildsGetCollectionFieldsDiagnosticSignaturesEnum = typeof BuildsGetCollectionFieldsDiagnosticSignaturesEnum[keyof typeof BuildsGetCollectionFieldsDiagnosticSignaturesEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBuildIconsEnum = {
    IconAsset: 'iconAsset',
    IconType: 'iconType',
    Name: 'name'
} as const;
export type BuildsGetCollectionFieldsBuildIconsEnum = typeof BuildsGetCollectionFieldsBuildIconsEnum[keyof typeof BuildsGetCollectionFieldsBuildIconsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    Build: 'build',
    ExternalBuildState: 'externalBuildState',
    InternalBuildState: 'internalBuildState'
} as const;
export type BuildsGetCollectionFieldsBuildBetaDetailsEnum = typeof BuildsGetCollectionFieldsBuildBetaDetailsEnum[keyof typeof BuildsGetCollectionFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    Build: 'build',
    SubmittedDate: 'submittedDate'
} as const;
export type BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum = typeof BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum[keyof typeof BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BuildsGetCollectionFieldsBetaTestersEnum = typeof BuildsGetCollectionFieldsBetaTestersEnum[keyof typeof BuildsGetCollectionFieldsBetaTestersEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type BuildsGetCollectionFieldsAppStoreVersionsEnum = typeof BuildsGetCollectionFieldsAppStoreVersionsEnum[keyof typeof BuildsGetCollectionFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsBetaBuildLocalizationsEnum = {
    Build: 'build',
    Locale: 'locale',
    WhatsNew: 'whatsNew'
} as const;
export type BuildsGetCollectionFieldsBetaBuildLocalizationsEnum = typeof BuildsGetCollectionFieldsBetaBuildLocalizationsEnum[keyof typeof BuildsGetCollectionFieldsBetaBuildLocalizationsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsPreReleaseVersionsEnum = {
    App: 'app',
    Builds: 'builds',
    Platform: 'platform',
    Version: 'version'
} as const;
export type BuildsGetCollectionFieldsPreReleaseVersionsEnum = typeof BuildsGetCollectionFieldsPreReleaseVersionsEnum[keyof typeof BuildsGetCollectionFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum = typeof BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum[keyof typeof BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BuildsGetCollectionFieldsAppsEnum = typeof BuildsGetCollectionFieldsAppsEnum[keyof typeof BuildsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const BuildsGetCollectionFieldsPerfPowerMetricsEnum = {
    DeviceType: 'deviceType',
    MetricType: 'metricType',
    Platform: 'platform'
} as const;
export type BuildsGetCollectionFieldsPerfPowerMetricsEnum = typeof BuildsGetCollectionFieldsPerfPowerMetricsEnum[keyof typeof BuildsGetCollectionFieldsPerfPowerMetricsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type BuildsGetInstanceFieldsBuildsEnum = typeof BuildsGetInstanceFieldsBuildsEnum[keyof typeof BuildsGetInstanceFieldsBuildsEnum];
/**
 * @export
 */
export const BuildsGetInstanceIncludeEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    PreReleaseVersion: 'preReleaseVersion'
} as const;
export type BuildsGetInstanceIncludeEnum = typeof BuildsGetInstanceIncludeEnum[keyof typeof BuildsGetInstanceIncludeEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: 'diagnosticType',
    Insight: 'insight',
    Logs: 'logs',
    Signature: 'signature',
    Weight: 'weight'
} as const;
export type BuildsGetInstanceFieldsDiagnosticSignaturesEnum = typeof BuildsGetInstanceFieldsDiagnosticSignaturesEnum[keyof typeof BuildsGetInstanceFieldsDiagnosticSignaturesEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBuildIconsEnum = {
    IconAsset: 'iconAsset',
    IconType: 'iconType',
    Name: 'name'
} as const;
export type BuildsGetInstanceFieldsBuildIconsEnum = typeof BuildsGetInstanceFieldsBuildIconsEnum[keyof typeof BuildsGetInstanceFieldsBuildIconsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: 'autoNotifyEnabled',
    Build: 'build',
    ExternalBuildState: 'externalBuildState',
    InternalBuildState: 'internalBuildState'
} as const;
export type BuildsGetInstanceFieldsBuildBetaDetailsEnum = typeof BuildsGetInstanceFieldsBuildBetaDetailsEnum[keyof typeof BuildsGetInstanceFieldsBuildBetaDetailsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: 'betaReviewState',
    Build: 'build',
    SubmittedDate: 'submittedDate'
} as const;
export type BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum = typeof BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum[keyof typeof BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BuildsGetInstanceFieldsBetaTestersEnum = typeof BuildsGetInstanceFieldsBetaTestersEnum[keyof typeof BuildsGetInstanceFieldsBetaTestersEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type BuildsGetInstanceFieldsAppStoreVersionsEnum = typeof BuildsGetInstanceFieldsAppStoreVersionsEnum[keyof typeof BuildsGetInstanceFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsBetaBuildLocalizationsEnum = {
    Build: 'build',
    Locale: 'locale',
    WhatsNew: 'whatsNew'
} as const;
export type BuildsGetInstanceFieldsBetaBuildLocalizationsEnum = typeof BuildsGetInstanceFieldsBetaBuildLocalizationsEnum[keyof typeof BuildsGetInstanceFieldsBetaBuildLocalizationsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsPreReleaseVersionsEnum = {
    App: 'app',
    Builds: 'builds',
    Platform: 'platform',
    Version: 'version'
} as const;
export type BuildsGetInstanceFieldsPreReleaseVersionsEnum = typeof BuildsGetInstanceFieldsPreReleaseVersionsEnum[keyof typeof BuildsGetInstanceFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum = typeof BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum[keyof typeof BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BuildsGetInstanceFieldsAppsEnum = typeof BuildsGetInstanceFieldsAppsEnum[keyof typeof BuildsGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const BuildsGetInstanceFieldsPerfPowerMetricsEnum = {
    DeviceType: 'deviceType',
    MetricType: 'metricType',
    Platform: 'platform'
} as const;
export type BuildsGetInstanceFieldsPerfPowerMetricsEnum = typeof BuildsGetInstanceFieldsPerfPowerMetricsEnum[keyof typeof BuildsGetInstanceFieldsPerfPowerMetricsEnum];
/**
 * @export
 */
export const BuildsIconsGetToManyRelatedFieldsBuildIconsEnum = {
    IconAsset: 'iconAsset',
    IconType: 'iconType',
    Name: 'name'
} as const;
export type BuildsIconsGetToManyRelatedFieldsBuildIconsEnum = typeof BuildsIconsGetToManyRelatedFieldsBuildIconsEnum[keyof typeof BuildsIconsGetToManyRelatedFieldsBuildIconsEnum];
/**
 * @export
 */
export const BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum = {
    Apps: 'apps',
    BetaGroups: 'betaGroups',
    Builds: 'builds',
    Email: 'email',
    FirstName: 'firstName',
    InviteType: 'inviteType',
    LastName: 'lastName',
    State: 'state'
} as const;
export type BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum = typeof BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum[keyof typeof BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum];
/**
 * @export
 */
export const BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = {
    Disk: 'DISK',
    Hang: 'HANG',
    Battery: 'BATTERY',
    Launch: 'LAUNCH',
    Memory: 'MEMORY',
    Animation: 'ANIMATION',
    Termination: 'TERMINATION'
} as const;
export type BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = typeof BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum[keyof typeof BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum];
/**
 * @export
 */
export const BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = {
    Ios: 'IOS'
} as const;
export type BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = typeof BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum[keyof typeof BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum];
/**
 * @export
 */
export const BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum = {
    App: 'app',
    Builds: 'builds',
    Platform: 'platform',
    Version: 'version'
} as const;
export type BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum = typeof BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum[keyof typeof BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum];
