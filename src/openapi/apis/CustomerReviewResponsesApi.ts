/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomerReviewResponseV1CreateRequest,
  CustomerReviewResponseV1Response,
  ErrorResponse,
} from '../models';
import {
    CustomerReviewResponseV1CreateRequestFromJSON,
    CustomerReviewResponseV1CreateRequestToJSON,
    CustomerReviewResponseV1ResponseFromJSON,
    CustomerReviewResponseV1ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CustomerReviewResponsesCreateInstanceRequest {
    customerReviewResponseV1CreateRequest: CustomerReviewResponseV1CreateRequest;
}

export interface CustomerReviewResponsesDeleteInstanceRequest {
    id: string;
}

export interface CustomerReviewResponsesGetInstanceRequest {
    id: string;
    fieldsCustomerReviewResponses?: Array<CustomerReviewResponsesGetInstanceFieldsCustomerReviewResponsesEnum>;
    include?: Array<CustomerReviewResponsesGetInstanceIncludeEnum>;
}

/**
 * 
 */
export class CustomerReviewResponsesApi extends runtime.BaseAPI {

    /**
     */
    async customerReviewResponsesCreateInstanceRaw(requestParameters: CustomerReviewResponsesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewResponseV1Response>> {
        if (requestParameters.customerReviewResponseV1CreateRequest === null || requestParameters.customerReviewResponseV1CreateRequest === undefined) {
            throw new runtime.RequiredError('customerReviewResponseV1CreateRequest','Required parameter requestParameters.customerReviewResponseV1CreateRequest was null or undefined when calling customerReviewResponsesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/customerReviewResponses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerReviewResponseV1CreateRequestToJSON(requestParameters.customerReviewResponseV1CreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewResponseV1ResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerReviewResponsesCreateInstance(requestParameters: CustomerReviewResponsesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewResponseV1Response> {
        const response = await this.customerReviewResponsesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerReviewResponsesDeleteInstanceRaw(requestParameters: CustomerReviewResponsesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerReviewResponsesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/customerReviewResponses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customerReviewResponsesDeleteInstance(requestParameters: CustomerReviewResponsesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customerReviewResponsesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async customerReviewResponsesGetInstanceRaw(requestParameters: CustomerReviewResponsesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerReviewResponseV1Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerReviewResponsesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCustomerReviewResponses) {
            queryParameters['fields[customerReviewResponses]'] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/customerReviewResponses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerReviewResponseV1ResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerReviewResponsesGetInstance(requestParameters: CustomerReviewResponsesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerReviewResponseV1Response> {
        const response = await this.customerReviewResponsesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CustomerReviewResponsesGetInstanceFieldsCustomerReviewResponsesEnum = {
    LastModifiedDate: 'lastModifiedDate',
    ResponseBody: 'responseBody',
    Review: 'review',
    State: 'state'
} as const;
export type CustomerReviewResponsesGetInstanceFieldsCustomerReviewResponsesEnum = typeof CustomerReviewResponsesGetInstanceFieldsCustomerReviewResponsesEnum[keyof typeof CustomerReviewResponsesGetInstanceFieldsCustomerReviewResponsesEnum];
/**
 * @export
 */
export const CustomerReviewResponsesGetInstanceIncludeEnum = {
    Review: 'review'
} as const;
export type CustomerReviewResponsesGetInstanceIncludeEnum = typeof CustomerReviewResponsesGetInstanceIncludeEnum[keyof typeof CustomerReviewResponsesGetInstanceIncludeEnum];
