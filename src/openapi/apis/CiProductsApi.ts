/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppResponse,
  CiBuildRunsResponse,
  CiProductResponse,
  CiProductsResponse,
  CiWorkflowsResponse,
  ErrorResponse,
  ScmRepositoriesResponse,
} from '../models';
import {
    AppResponseFromJSON,
    AppResponseToJSON,
    CiBuildRunsResponseFromJSON,
    CiBuildRunsResponseToJSON,
    CiProductResponseFromJSON,
    CiProductResponseToJSON,
    CiProductsResponseFromJSON,
    CiProductsResponseToJSON,
    CiWorkflowsResponseFromJSON,
    CiWorkflowsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ScmRepositoriesResponseFromJSON,
    ScmRepositoriesResponseToJSON,
} from '../models';

export interface CiProductsAdditionalRepositoriesGetToManyRelatedRequest {
    id: string;
    filterId?: Array<string>;
    fieldsScmGitReferences?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsScmProviders?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum>;
    fieldsScmRepositories?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum>;
}

export interface CiProductsAppGetToOneRelatedRequest {
    id: string;
    fieldsBetaAppReviewDetails?: Array<CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum>;
    fieldsGameCenterDetails?: Array<CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsCiProducts?: Array<CiProductsAppGetToOneRelatedFieldsCiProductsEnum>;
    fieldsReviewSubmissions?: Array<CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum>;
    fieldsBetaGroups?: Array<CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum>;
    fieldsPromotedPurchases?: Array<CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum>;
    fieldsApps?: Array<CiProductsAppGetToOneRelatedFieldsAppsEnum>;
    fieldsAppEvents?: Array<CiProductsAppGetToOneRelatedFieldsAppEventsEnum>;
    fieldsBuilds?: Array<CiProductsAppGetToOneRelatedFieldsBuildsEnum>;
    fieldsBetaLicenseAgreements?: Array<CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum>;
    fieldsAppClips?: Array<CiProductsAppGetToOneRelatedFieldsAppClipsEnum>;
    fieldsBetaAppLocalizations?: Array<CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum>;
    fieldsAppInfos?: Array<CiProductsAppGetToOneRelatedFieldsAppInfosEnum>;
    fieldsPreReleaseVersions?: Array<CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum>;
    fieldsInAppPurchases?: Array<CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum>;
    fieldsSubscriptionGroups?: Array<CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum>;
    fieldsAppPreOrders?: Array<CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum>;
    fieldsGameCenterEnabledVersions?: Array<CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum>;
    fieldsAppStoreVersionExperiments?: Array<CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum>;
    fieldsSubscriptionGracePeriods?: Array<CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum>;
    fieldsEndUserLicenseAgreements?: Array<CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum>;
    fieldsAppStoreVersions?: Array<CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum>;
    fieldsAppEncryptionDeclarations?: Array<CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum>;
    fieldsAppCustomProductPages?: Array<CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum>;
    limitAppEncryptionDeclarations?: number;
    limitBetaGroups?: number;
    limitAppStoreVersions?: number;
    limitPreReleaseVersions?: number;
    limitBetaAppLocalizations?: number;
    limitBuilds?: number;
    limitAppInfos?: number;
    limitAppClips?: number;
    limitInAppPurchases?: number;
    limitSubscriptionGroups?: number;
    limitGameCenterEnabledVersions?: number;
    limitAppCustomProductPages?: number;
    limitInAppPurchasesV2?: number;
    limitPromotedPurchases?: number;
    limitAppEvents?: number;
    limitReviewSubmissions?: number;
    limitAppStoreVersionExperimentsV2?: number;
    include?: Array<CiProductsAppGetToOneRelatedIncludeEnum>;
}

export interface CiProductsBuildRunsGetToManyRelatedRequest {
    id: string;
    filterBuilds?: Array<string>;
    sort?: Array<CiProductsBuildRunsGetToManyRelatedSortEnum>;
    fieldsScmGitReferences?: Array<CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsCiBuildRuns?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum>;
    fieldsScmPullRequests?: Array<CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum>;
    fieldsCiProducts?: Array<CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum>;
    fieldsBuilds?: Array<CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
    limitBuilds?: number;
    include?: Array<CiProductsBuildRunsGetToManyRelatedIncludeEnum>;
}

export interface CiProductsDeleteInstanceRequest {
    id: string;
}

export interface CiProductsGetCollectionRequest {
    filterProductType?: Array<CiProductsGetCollectionFilterProductTypeEnum>;
    filterApp?: Array<string>;
    fieldsCiProducts?: Array<CiProductsGetCollectionFieldsCiProductsEnum>;
    limit?: number;
    include?: Array<CiProductsGetCollectionIncludeEnum>;
    fieldsCiBuildRuns?: Array<CiProductsGetCollectionFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsGetCollectionFieldsCiWorkflowsEnum>;
    fieldsApps?: Array<CiProductsGetCollectionFieldsAppsEnum>;
    fieldsScmRepositories?: Array<CiProductsGetCollectionFieldsScmRepositoriesEnum>;
    limitPrimaryRepositories?: number;
}

export interface CiProductsGetInstanceRequest {
    id: string;
    fieldsCiProducts?: Array<CiProductsGetInstanceFieldsCiProductsEnum>;
    include?: Array<CiProductsGetInstanceIncludeEnum>;
    fieldsCiBuildRuns?: Array<CiProductsGetInstanceFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiProductsGetInstanceFieldsCiWorkflowsEnum>;
    fieldsApps?: Array<CiProductsGetInstanceFieldsAppsEnum>;
    fieldsScmRepositories?: Array<CiProductsGetInstanceFieldsScmRepositoriesEnum>;
    limitPrimaryRepositories?: number;
}

export interface CiProductsPrimaryRepositoriesGetToManyRelatedRequest {
    id: string;
    filterId?: Array<string>;
    fieldsScmGitReferences?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsScmProviders?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum>;
    fieldsScmRepositories?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum>;
}

export interface CiProductsWorkflowsGetToManyRelatedRequest {
    id: string;
    fieldsCiXcodeVersions?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum>;
    fieldsCiWorkflows?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum>;
    fieldsCiMacOsVersions?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum>;
    fieldsCiProducts?: Array<CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum>;
    fieldsScmRepositories?: Array<CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<CiProductsWorkflowsGetToManyRelatedIncludeEnum>;
}

/**
 * 
 */
export class CiProductsApi extends runtime.BaseAPI {

    /**
     */
    async ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters: CiProductsAdditionalRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoriesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsAdditionalRepositoriesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmProviders) {
            queryParameters['fields[scmProviders]'] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/additionalRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScmRepositoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsAdditionalRepositoriesGetToManyRelated(requestParameters: CiProductsAdditionalRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoriesResponse> {
        const response = await this.ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsAppGetToOneRelatedRaw(requestParameters: CiProductsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppReviewDetails) {
            queryParameters['fields[betaAppReviewDetails]'] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterDetails) {
            queryParameters['fields[gameCenterDetails]'] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsReviewSubmissions) {
            queryParameters['fields[reviewSubmissions]'] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaGroups) {
            queryParameters['fields[betaGroups]'] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPromotedPurchases) {
            queryParameters['fields[promotedPurchases]'] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEvents) {
            queryParameters['fields[appEvents]'] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaLicenseAgreements) {
            queryParameters['fields[betaLicenseAgreements]'] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppClips) {
            queryParameters['fields[appClips]'] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppInfos) {
            queryParameters['fields[appInfos]'] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsPreReleaseVersions) {
            queryParameters['fields[preReleaseVersions]'] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsInAppPurchases) {
            queryParameters['fields[inAppPurchases]'] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGroups) {
            queryParameters['fields[subscriptionGroups]'] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppPreOrders) {
            queryParameters['fields[appPreOrders]'] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsGameCenterEnabledVersions) {
            queryParameters['fields[gameCenterEnabledVersions]'] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersionExperiments) {
            queryParameters['fields[appStoreVersionExperiments]'] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsSubscriptionGracePeriods) {
            queryParameters['fields[subscriptionGracePeriods]'] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsEndUserLicenseAgreements) {
            queryParameters['fields[endUserLicenseAgreements]'] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppStoreVersions) {
            queryParameters['fields[appStoreVersions]'] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppEncryptionDeclarations) {
            queryParameters['fields[appEncryptionDeclarations]'] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsAppCustomProductPages) {
            queryParameters['fields[appCustomProductPages]'] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
            queryParameters['limit[appEncryptionDeclarations]'] = requestParameters.limitAppEncryptionDeclarations;
        }

        if (requestParameters.limitBetaGroups !== undefined) {
            queryParameters['limit[betaGroups]'] = requestParameters.limitBetaGroups;
        }

        if (requestParameters.limitAppStoreVersions !== undefined) {
            queryParameters['limit[appStoreVersions]'] = requestParameters.limitAppStoreVersions;
        }

        if (requestParameters.limitPreReleaseVersions !== undefined) {
            queryParameters['limit[preReleaseVersions]'] = requestParameters.limitPreReleaseVersions;
        }

        if (requestParameters.limitBetaAppLocalizations !== undefined) {
            queryParameters['limit[betaAppLocalizations]'] = requestParameters.limitBetaAppLocalizations;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        if (requestParameters.limitAppInfos !== undefined) {
            queryParameters['limit[appInfos]'] = requestParameters.limitAppInfos;
        }

        if (requestParameters.limitAppClips !== undefined) {
            queryParameters['limit[appClips]'] = requestParameters.limitAppClips;
        }

        if (requestParameters.limitInAppPurchases !== undefined) {
            queryParameters['limit[inAppPurchases]'] = requestParameters.limitInAppPurchases;
        }

        if (requestParameters.limitSubscriptionGroups !== undefined) {
            queryParameters['limit[subscriptionGroups]'] = requestParameters.limitSubscriptionGroups;
        }

        if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
            queryParameters['limit[gameCenterEnabledVersions]'] = requestParameters.limitGameCenterEnabledVersions;
        }

        if (requestParameters.limitAppCustomProductPages !== undefined) {
            queryParameters['limit[appCustomProductPages]'] = requestParameters.limitAppCustomProductPages;
        }

        if (requestParameters.limitInAppPurchasesV2 !== undefined) {
            queryParameters['limit[inAppPurchasesV2]'] = requestParameters.limitInAppPurchasesV2;
        }

        if (requestParameters.limitPromotedPurchases !== undefined) {
            queryParameters['limit[promotedPurchases]'] = requestParameters.limitPromotedPurchases;
        }

        if (requestParameters.limitAppEvents !== undefined) {
            queryParameters['limit[appEvents]'] = requestParameters.limitAppEvents;
        }

        if (requestParameters.limitReviewSubmissions !== undefined) {
            queryParameters['limit[reviewSubmissions]'] = requestParameters.limitReviewSubmissions;
        }

        if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
            queryParameters['limit[appStoreVersionExperimentsV2]'] = requestParameters.limitAppStoreVersionExperimentsV2;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsAppGetToOneRelated(requestParameters: CiProductsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppResponse> {
        const response = await this.ciProductsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsBuildRunsGetToManyRelatedRaw(requestParameters: CiProductsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiBuildRunsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsBuildRunsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterBuilds) {
            queryParameters['filter[builds]'] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmPullRequests) {
            queryParameters['fields[scmPullRequests]'] = requestParameters.fieldsScmPullRequests.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBuilds) {
            queryParameters['fields[builds]'] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.limitBuilds !== undefined) {
            queryParameters['limit[builds]'] = requestParameters.limitBuilds;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/buildRuns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CiBuildRunsResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsBuildRunsGetToManyRelated(requestParameters: CiProductsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiBuildRunsResponse> {
        const response = await this.ciProductsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsDeleteInstanceRaw(requestParameters: CiProductsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async ciProductsDeleteInstance(requestParameters: CiProductsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ciProductsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async ciProductsGetCollectionRaw(requestParameters: CiProductsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterProductType) {
            queryParameters['filter[productType]'] = requestParameters.filterProductType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductsResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsGetCollection(requestParameters: CiProductsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductsResponse> {
        const response = await this.ciProductsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsGetInstanceRaw(requestParameters: CiProductsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiProductResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiBuildRuns) {
            queryParameters['fields[ciBuildRuns]'] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitPrimaryRepositories !== undefined) {
            queryParameters['limit[primaryRepositories]'] = requestParameters.limitPrimaryRepositories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CiProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsGetInstance(requestParameters: CiProductsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiProductResponse> {
        const response = await this.ciProductsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters: CiProductsPrimaryRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoriesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsPrimaryRepositoriesGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterId) {
            queryParameters['filter[id]'] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmGitReferences) {
            queryParameters['fields[scmGitReferences]'] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmProviders) {
            queryParameters['fields[scmProviders]'] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/primaryRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScmRepositoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsPrimaryRepositoriesGetToManyRelated(requestParameters: CiProductsPrimaryRepositoriesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoriesResponse> {
        const response = await this.ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ciProductsWorkflowsGetToManyRelatedRaw(requestParameters: CiProductsWorkflowsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiWorkflowsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ciProductsWorkflowsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsCiXcodeVersions) {
            queryParameters['fields[ciXcodeVersions]'] = requestParameters.fieldsCiXcodeVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiWorkflows) {
            queryParameters['fields[ciWorkflows]'] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiMacOsVersions) {
            queryParameters['fields[ciMacOsVersions]'] = requestParameters.fieldsCiMacOsVersions.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsCiProducts) {
            queryParameters['fields[ciProducts]'] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsScmRepositories) {
            queryParameters['fields[scmRepositories]'] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ciProducts/{id}/workflows`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CiWorkflowsResponseFromJSON(jsonValue));
    }

    /**
     */
    async ciProductsWorkflowsGetToManyRelated(requestParameters: CiProductsWorkflowsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiWorkflowsResponse> {
        const response = await this.ciProductsWorkflowsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: 'canonicalName',
    IsDeleted: 'isDeleted',
    Kind: 'kind',
    Name: 'name',
    Repository: 'repository'
} as const;
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum[keyof typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export const CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum = {
    Repositories: 'repositories',
    ScmProviderType: 'scmProviderType',
    Url: 'url'
} as const;
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum = typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum[keyof typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum];
/**
 * @export
 */
export const CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    HttpCloneUrl: 'httpCloneUrl',
    LastAccessedDate: 'lastAccessedDate',
    OwnerName: 'ownerName',
    PullRequests: 'pullRequests',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    SshCloneUrl: 'sshCloneUrl'
} as const;
export type CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum[keyof typeof CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum = {
    DefaultBranch: 'defaultBranch',
    ScmProvider: 'scmProvider'
} as const;
export type CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum = typeof CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum[keyof typeof CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum = {
    App: 'app',
    ContactEmail: 'contactEmail',
    ContactFirstName: 'contactFirstName',
    ContactLastName: 'contactLastName',
    ContactPhone: 'contactPhone',
    DemoAccountName: 'demoAccountName',
    DemoAccountPassword: 'demoAccountPassword',
    DemoAccountRequired: 'demoAccountRequired',
    Notes: 'notes'
} as const;
export type CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum = typeof CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: 'achievementReleases',
    App: 'app',
    ArcadeEnabled: 'arcadeEnabled',
    ChallengeEnabled: 'challengeEnabled',
    DefaultGroupLeaderboard: 'defaultGroupLeaderboard',
    DefaultLeaderboard: 'defaultLeaderboard',
    GameCenterAchievements: 'gameCenterAchievements',
    GameCenterAppVersions: 'gameCenterAppVersions',
    GameCenterGroup: 'gameCenterGroup',
    GameCenterLeaderboardSets: 'gameCenterLeaderboardSets',
    GameCenterLeaderboards: 'gameCenterLeaderboards',
    LeaderboardReleases: 'leaderboardReleases',
    LeaderboardSetReleases: 'leaderboardSetReleases'
} as const;
export type CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum = typeof CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: 'additionalRepositories',
    App: 'app',
    BuildRuns: 'buildRuns',
    BundleId: 'bundleId',
    CreatedDate: 'createdDate',
    Name: 'name',
    PrimaryRepositories: 'primaryRepositories',
    ProductType: 'productType',
    Workflows: 'workflows'
} as const;
export type CiProductsAppGetToOneRelatedFieldsCiProductsEnum = typeof CiProductsAppGetToOneRelatedFieldsCiProductsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsCiProductsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum = {
    App: 'app',
    AppStoreVersionForReview: 'appStoreVersionForReview',
    Canceled: 'canceled',
    Items: 'items',
    LastUpdatedByActor: 'lastUpdatedByActor',
    Platform: 'platform',
    State: 'state',
    Submitted: 'submitted',
    SubmittedByActor: 'submittedByActor',
    SubmittedDate: 'submittedDate'
} as const;
export type CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum = typeof CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum = {
    App: 'app',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    CreatedDate: 'createdDate',
    FeedbackEnabled: 'feedbackEnabled',
    HasAccessToAllBuilds: 'hasAccessToAllBuilds',
    IosBuildsAvailableForAppleSiliconMac: 'iosBuildsAvailableForAppleSiliconMac',
    IsInternalGroup: 'isInternalGroup',
    Name: 'name',
    PublicLink: 'publicLink',
    PublicLinkEnabled: 'publicLinkEnabled',
    PublicLinkId: 'publicLinkId',
    PublicLinkLimit: 'publicLinkLimit',
    PublicLinkLimitEnabled: 'publicLinkLimitEnabled'
} as const;
export type CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum = typeof CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum = {
    App: 'app',
    Enabled: 'enabled',
    InAppPurchaseV2: 'inAppPurchaseV2',
    PromotionImages: 'promotionImages',
    State: 'state',
    Subscription: 'subscription',
    VisibleForAllUsers: 'visibleForAllUsers'
} as const;
export type CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum = typeof CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppEventsEnum = {
    App: 'app',
    ArchivedTerritorySchedules: 'archivedTerritorySchedules',
    Badge: 'badge',
    DeepLink: 'deepLink',
    EventState: 'eventState',
    Localizations: 'localizations',
    PrimaryLocale: 'primaryLocale',
    Priority: 'priority',
    PurchaseRequirement: 'purchaseRequirement',
    Purpose: 'purpose',
    ReferenceName: 'referenceName',
    TerritorySchedules: 'territorySchedules'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppEventsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppEventsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppEventsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type CiProductsAppGetToOneRelatedFieldsBuildsEnum = typeof CiProductsAppGetToOneRelatedFieldsBuildsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app'
} as const;
export type CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum = typeof CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppClipsEnum = {
    App: 'app',
    AppClipAdvancedExperiences: 'appClipAdvancedExperiences',
    AppClipDefaultExperiences: 'appClipDefaultExperiences',
    BundleId: 'bundleId'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppClipsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppClipsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppClipsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum = {
    App: 'app',
    Description: 'description',
    FeedbackEmail: 'feedbackEmail',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy'
} as const;
export type CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum = typeof CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppInfosEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    App: 'app',
    AppInfoLocalizations: 'appInfoLocalizations',
    AppStoreAgeRating: 'appStoreAgeRating',
    AppStoreState: 'appStoreState',
    BrazilAgeRating: 'brazilAgeRating',
    BrazilAgeRatingV2: 'brazilAgeRatingV2',
    KidsAgeBand: 'kidsAgeBand',
    PrimaryCategory: 'primaryCategory',
    PrimarySubcategoryOne: 'primarySubcategoryOne',
    PrimarySubcategoryTwo: 'primarySubcategoryTwo',
    SecondaryCategory: 'secondaryCategory',
    SecondarySubcategoryOne: 'secondarySubcategoryOne',
    SecondarySubcategoryTwo: 'secondarySubcategoryTwo',
    State: 'state'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppInfosEnum = typeof CiProductsAppGetToOneRelatedFieldsAppInfosEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppInfosEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum = {
    App: 'app',
    Builds: 'builds',
    Platform: 'platform',
    Version: 'version'
} as const;
export type CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum = typeof CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum = {
    App: 'app',
    AppStoreReviewScreenshot: 'appStoreReviewScreenshot',
    Apps: 'apps',
    Content: 'content',
    ContentHosting: 'contentHosting',
    FamilySharable: 'familySharable',
    IapPriceSchedule: 'iapPriceSchedule',
    InAppPurchaseAvailability: 'inAppPurchaseAvailability',
    InAppPurchaseLocalizations: 'inAppPurchaseLocalizations',
    InAppPurchaseType: 'inAppPurchaseType',
    Name: 'name',
    PricePoints: 'pricePoints',
    ProductId: 'productId',
    PromotedPurchase: 'promotedPurchase',
    ReferenceName: 'referenceName',
    ReviewNote: 'reviewNote',
    State: 'state'
} as const;
export type CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum = typeof CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum = {
    App: 'app',
    ReferenceName: 'referenceName',
    SubscriptionGroupLocalizations: 'subscriptionGroupLocalizations',
    Subscriptions: 'subscriptions'
} as const;
export type CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum = typeof CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum = {
    App: 'app',
    AppReleaseDate: 'appReleaseDate',
    PreOrderAvailableDate: 'preOrderAvailableDate'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum = typeof CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum = {
    App: 'app',
    CompatibleVersions: 'compatibleVersions',
    IconAsset: 'iconAsset',
    Platform: 'platform',
    VersionString: 'versionString'
} as const;
export type CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum = typeof CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: 'app',
    AppStoreVersionExperimentTreatments: 'appStoreVersionExperimentTreatments',
    ControlVersions: 'controlVersions',
    EndDate: 'endDate',
    LatestControlVersion: 'latestControlVersion',
    Name: 'name',
    Platform: 'platform',
    ReviewRequired: 'reviewRequired',
    StartDate: 'startDate',
    Started: 'started',
    State: 'state',
    TrafficProportion: 'trafficProportion'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = {
    Duration: 'duration',
    OptIn: 'optIn',
    RenewalType: 'renewalType',
    SandboxOptIn: 'sandboxOptIn'
} as const;
export type CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = typeof CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: 'agreementText',
    App: 'app',
    Territories: 'territories'
} as const;
export type CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = typeof CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: 'ageRatingDeclaration',
    AlternativeDistributionPackage: 'alternativeDistributionPackage',
    App: 'app',
    AppClipDefaultExperience: 'appClipDefaultExperience',
    AppStoreReviewDetail: 'appStoreReviewDetail',
    AppStoreState: 'appStoreState',
    AppStoreVersionExperiments: 'appStoreVersionExperiments',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersionLocalizations: 'appStoreVersionLocalizations',
    AppStoreVersionPhasedRelease: 'appStoreVersionPhasedRelease',
    AppStoreVersionSubmission: 'appStoreVersionSubmission',
    AppVersionState: 'appVersionState',
    Build: 'build',
    Copyright: 'copyright',
    CreatedDate: 'createdDate',
    CustomerReviews: 'customerReviews',
    Downloadable: 'downloadable',
    EarliestReleaseDate: 'earliestReleaseDate',
    Platform: 'platform',
    ReleaseType: 'releaseType',
    ReviewType: 'reviewType',
    RoutingAppCoverage: 'routingAppCoverage',
    VersionString: 'versionString'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: 'app',
    AppDescription: 'appDescription',
    AppEncryptionDeclarationDocument: 'appEncryptionDeclarationDocument',
    AppEncryptionDeclarationState: 'appEncryptionDeclarationState',
    AvailableOnFrenchStore: 'availableOnFrenchStore',
    Builds: 'builds',
    CodeValue: 'codeValue',
    ContainsProprietaryCryptography: 'containsProprietaryCryptography',
    ContainsThirdPartyCryptography: 'containsThirdPartyCryptography',
    CreatedDate: 'createdDate',
    DocumentName: 'documentName',
    DocumentType: 'documentType',
    DocumentUrl: 'documentUrl',
    Exempt: 'exempt',
    Platform: 'platform',
    UploadedDate: 'uploadedDate',
    UsesEncryption: 'usesEncryption'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = typeof CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum = {
    App: 'app',
    AppCustomProductPageVersions: 'appCustomProductPageVersions',
    AppStoreVersionTemplate: 'appStoreVersionTemplate',
    CustomProductPageTemplate: 'customProductPageTemplate',
    Name: 'name',
    Url: 'url',
    Visible: 'visible'
} as const;
export type CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum = typeof CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum[keyof typeof CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum];
/**
 * @export
 */
export const CiProductsAppGetToOneRelatedIncludeEnum = {
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    Builds: 'builds',
    CiProduct: 'ciProduct',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups'
} as const;
export type CiProductsAppGetToOneRelatedIncludeEnum = typeof CiProductsAppGetToOneRelatedIncludeEnum[keyof typeof CiProductsAppGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedSortEnum = {
    Number: 'number',
    Number: '-number'
} as const;
export type CiProductsBuildRunsGetToManyRelatedSortEnum = typeof CiProductsBuildRunsGetToManyRelatedSortEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedSortEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: 'canonicalName',
    IsDeleted: 'isDeleted',
    Kind: 'kind',
    Name: 'name',
    Repository: 'repository'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = {
    Actions: 'actions',
    BuildRun: 'buildRun',
    Builds: 'builds',
    CancelReason: 'cancelReason',
    Clean: 'clean',
    CompletionStatus: 'completionStatus',
    CreatedDate: 'createdDate',
    DestinationBranch: 'destinationBranch',
    DestinationCommit: 'destinationCommit',
    ExecutionProgress: 'executionProgress',
    FinishedDate: 'finishedDate',
    IsPullRequestBuild: 'isPullRequestBuild',
    IssueCounts: 'issueCounts',
    Number: 'number',
    Product: 'product',
    PullRequest: 'pullRequest',
    SourceBranchOrTag: 'sourceBranchOrTag',
    SourceCommit: 'sourceCommit',
    StartReason: 'startReason',
    StartedDate: 'startedDate',
    Workflow: 'workflow'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = {
    Actions: 'actions',
    BranchStartCondition: 'branchStartCondition',
    BuildRuns: 'buildRuns',
    Clean: 'clean',
    ContainerFilePath: 'containerFilePath',
    Description: 'description',
    IsEnabled: 'isEnabled',
    IsLockedForEditing: 'isLockedForEditing',
    LastModifiedDate: 'lastModifiedDate',
    MacOsVersion: 'macOsVersion',
    ManualBranchStartCondition: 'manualBranchStartCondition',
    ManualPullRequestStartCondition: 'manualPullRequestStartCondition',
    ManualTagStartCondition: 'manualTagStartCondition',
    Name: 'name',
    Product: 'product',
    PullRequestStartCondition: 'pullRequestStartCondition',
    Repository: 'repository',
    ScheduledStartCondition: 'scheduledStartCondition',
    TagStartCondition: 'tagStartCondition',
    XcodeVersion: 'xcodeVersion'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = {
    DestinationBranchName: 'destinationBranchName',
    DestinationRepositoryName: 'destinationRepositoryName',
    DestinationRepositoryOwner: 'destinationRepositoryOwner',
    IsClosed: 'isClosed',
    IsCrossRepository: 'isCrossRepository',
    Number: 'number',
    Repository: 'repository',
    SourceBranchName: 'sourceBranchName',
    SourceRepositoryName: 'sourceRepositoryName',
    SourceRepositoryOwner: 'sourceRepositoryOwner',
    Title: 'title',
    WebUrl: 'webUrl'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: 'additionalRepositories',
    App: 'app',
    BuildRuns: 'buildRuns',
    BundleId: 'bundleId',
    CreatedDate: 'createdDate',
    Name: 'name',
    PrimaryRepositories: 'primaryRepositories',
    ProductType: 'productType',
    Workflows: 'workflows'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum = {
    App: 'app',
    AppEncryptionDeclaration: 'appEncryptionDeclaration',
    AppStoreVersion: 'appStoreVersion',
    BetaAppReviewSubmission: 'betaAppReviewSubmission',
    BetaBuildLocalizations: 'betaBuildLocalizations',
    BetaGroups: 'betaGroups',
    BuildAudienceType: 'buildAudienceType',
    BuildBetaDetail: 'buildBetaDetail',
    BuildBundles: 'buildBundles',
    ComputedMinMacOsVersion: 'computedMinMacOsVersion',
    DiagnosticSignatures: 'diagnosticSignatures',
    ExpirationDate: 'expirationDate',
    Expired: 'expired',
    IconAssetToken: 'iconAssetToken',
    Icons: 'icons',
    IndividualTesters: 'individualTesters',
    LsMinimumSystemVersion: 'lsMinimumSystemVersion',
    MinOsVersion: 'minOsVersion',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreReleaseVersion: 'preReleaseVersion',
    ProcessingState: 'processingState',
    UploadedDate: 'uploadedDate',
    UsesNonExemptEncryption: 'usesNonExemptEncryption',
    Version: 'version'
} as const;
export type CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum = typeof CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export const CiProductsBuildRunsGetToManyRelatedIncludeEnum = {
    Builds: 'builds',
    DestinationBranch: 'destinationBranch',
    Product: 'product',
    PullRequest: 'pullRequest',
    SourceBranchOrTag: 'sourceBranchOrTag',
    Workflow: 'workflow'
} as const;
export type CiProductsBuildRunsGetToManyRelatedIncludeEnum = typeof CiProductsBuildRunsGetToManyRelatedIncludeEnum[keyof typeof CiProductsBuildRunsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFilterProductTypeEnum = {
    App: 'APP',
    Framework: 'FRAMEWORK'
} as const;
export type CiProductsGetCollectionFilterProductTypeEnum = typeof CiProductsGetCollectionFilterProductTypeEnum[keyof typeof CiProductsGetCollectionFilterProductTypeEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFieldsCiProductsEnum = {
    AdditionalRepositories: 'additionalRepositories',
    App: 'app',
    BuildRuns: 'buildRuns',
    BundleId: 'bundleId',
    CreatedDate: 'createdDate',
    Name: 'name',
    PrimaryRepositories: 'primaryRepositories',
    ProductType: 'productType',
    Workflows: 'workflows'
} as const;
export type CiProductsGetCollectionFieldsCiProductsEnum = typeof CiProductsGetCollectionFieldsCiProductsEnum[keyof typeof CiProductsGetCollectionFieldsCiProductsEnum];
/**
 * @export
 */
export const CiProductsGetCollectionIncludeEnum = {
    App: 'app',
    BundleId: 'bundleId',
    PrimaryRepositories: 'primaryRepositories'
} as const;
export type CiProductsGetCollectionIncludeEnum = typeof CiProductsGetCollectionIncludeEnum[keyof typeof CiProductsGetCollectionIncludeEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFieldsCiBuildRunsEnum = {
    Actions: 'actions',
    BuildRun: 'buildRun',
    Builds: 'builds',
    CancelReason: 'cancelReason',
    Clean: 'clean',
    CompletionStatus: 'completionStatus',
    CreatedDate: 'createdDate',
    DestinationBranch: 'destinationBranch',
    DestinationCommit: 'destinationCommit',
    ExecutionProgress: 'executionProgress',
    FinishedDate: 'finishedDate',
    IsPullRequestBuild: 'isPullRequestBuild',
    IssueCounts: 'issueCounts',
    Number: 'number',
    Product: 'product',
    PullRequest: 'pullRequest',
    SourceBranchOrTag: 'sourceBranchOrTag',
    SourceCommit: 'sourceCommit',
    StartReason: 'startReason',
    StartedDate: 'startedDate',
    Workflow: 'workflow'
} as const;
export type CiProductsGetCollectionFieldsCiBuildRunsEnum = typeof CiProductsGetCollectionFieldsCiBuildRunsEnum[keyof typeof CiProductsGetCollectionFieldsCiBuildRunsEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFieldsCiWorkflowsEnum = {
    Actions: 'actions',
    BranchStartCondition: 'branchStartCondition',
    BuildRuns: 'buildRuns',
    Clean: 'clean',
    ContainerFilePath: 'containerFilePath',
    Description: 'description',
    IsEnabled: 'isEnabled',
    IsLockedForEditing: 'isLockedForEditing',
    LastModifiedDate: 'lastModifiedDate',
    MacOsVersion: 'macOsVersion',
    ManualBranchStartCondition: 'manualBranchStartCondition',
    ManualPullRequestStartCondition: 'manualPullRequestStartCondition',
    ManualTagStartCondition: 'manualTagStartCondition',
    Name: 'name',
    Product: 'product',
    PullRequestStartCondition: 'pullRequestStartCondition',
    Repository: 'repository',
    ScheduledStartCondition: 'scheduledStartCondition',
    TagStartCondition: 'tagStartCondition',
    XcodeVersion: 'xcodeVersion'
} as const;
export type CiProductsGetCollectionFieldsCiWorkflowsEnum = typeof CiProductsGetCollectionFieldsCiWorkflowsEnum[keyof typeof CiProductsGetCollectionFieldsCiWorkflowsEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type CiProductsGetCollectionFieldsAppsEnum = typeof CiProductsGetCollectionFieldsAppsEnum[keyof typeof CiProductsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const CiProductsGetCollectionFieldsScmRepositoriesEnum = {
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    HttpCloneUrl: 'httpCloneUrl',
    LastAccessedDate: 'lastAccessedDate',
    OwnerName: 'ownerName',
    PullRequests: 'pullRequests',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    SshCloneUrl: 'sshCloneUrl'
} as const;
export type CiProductsGetCollectionFieldsScmRepositoriesEnum = typeof CiProductsGetCollectionFieldsScmRepositoriesEnum[keyof typeof CiProductsGetCollectionFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const CiProductsGetInstanceFieldsCiProductsEnum = {
    AdditionalRepositories: 'additionalRepositories',
    App: 'app',
    BuildRuns: 'buildRuns',
    BundleId: 'bundleId',
    CreatedDate: 'createdDate',
    Name: 'name',
    PrimaryRepositories: 'primaryRepositories',
    ProductType: 'productType',
    Workflows: 'workflows'
} as const;
export type CiProductsGetInstanceFieldsCiProductsEnum = typeof CiProductsGetInstanceFieldsCiProductsEnum[keyof typeof CiProductsGetInstanceFieldsCiProductsEnum];
/**
 * @export
 */
export const CiProductsGetInstanceIncludeEnum = {
    App: 'app',
    BundleId: 'bundleId',
    PrimaryRepositories: 'primaryRepositories'
} as const;
export type CiProductsGetInstanceIncludeEnum = typeof CiProductsGetInstanceIncludeEnum[keyof typeof CiProductsGetInstanceIncludeEnum];
/**
 * @export
 */
export const CiProductsGetInstanceFieldsCiBuildRunsEnum = {
    Actions: 'actions',
    BuildRun: 'buildRun',
    Builds: 'builds',
    CancelReason: 'cancelReason',
    Clean: 'clean',
    CompletionStatus: 'completionStatus',
    CreatedDate: 'createdDate',
    DestinationBranch: 'destinationBranch',
    DestinationCommit: 'destinationCommit',
    ExecutionProgress: 'executionProgress',
    FinishedDate: 'finishedDate',
    IsPullRequestBuild: 'isPullRequestBuild',
    IssueCounts: 'issueCounts',
    Number: 'number',
    Product: 'product',
    PullRequest: 'pullRequest',
    SourceBranchOrTag: 'sourceBranchOrTag',
    SourceCommit: 'sourceCommit',
    StartReason: 'startReason',
    StartedDate: 'startedDate',
    Workflow: 'workflow'
} as const;
export type CiProductsGetInstanceFieldsCiBuildRunsEnum = typeof CiProductsGetInstanceFieldsCiBuildRunsEnum[keyof typeof CiProductsGetInstanceFieldsCiBuildRunsEnum];
/**
 * @export
 */
export const CiProductsGetInstanceFieldsCiWorkflowsEnum = {
    Actions: 'actions',
    BranchStartCondition: 'branchStartCondition',
    BuildRuns: 'buildRuns',
    Clean: 'clean',
    ContainerFilePath: 'containerFilePath',
    Description: 'description',
    IsEnabled: 'isEnabled',
    IsLockedForEditing: 'isLockedForEditing',
    LastModifiedDate: 'lastModifiedDate',
    MacOsVersion: 'macOsVersion',
    ManualBranchStartCondition: 'manualBranchStartCondition',
    ManualPullRequestStartCondition: 'manualPullRequestStartCondition',
    ManualTagStartCondition: 'manualTagStartCondition',
    Name: 'name',
    Product: 'product',
    PullRequestStartCondition: 'pullRequestStartCondition',
    Repository: 'repository',
    ScheduledStartCondition: 'scheduledStartCondition',
    TagStartCondition: 'tagStartCondition',
    XcodeVersion: 'xcodeVersion'
} as const;
export type CiProductsGetInstanceFieldsCiWorkflowsEnum = typeof CiProductsGetInstanceFieldsCiWorkflowsEnum[keyof typeof CiProductsGetInstanceFieldsCiWorkflowsEnum];
/**
 * @export
 */
export const CiProductsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type CiProductsGetInstanceFieldsAppsEnum = typeof CiProductsGetInstanceFieldsAppsEnum[keyof typeof CiProductsGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const CiProductsGetInstanceFieldsScmRepositoriesEnum = {
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    HttpCloneUrl: 'httpCloneUrl',
    LastAccessedDate: 'lastAccessedDate',
    OwnerName: 'ownerName',
    PullRequests: 'pullRequests',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    SshCloneUrl: 'sshCloneUrl'
} as const;
export type CiProductsGetInstanceFieldsScmRepositoriesEnum = typeof CiProductsGetInstanceFieldsScmRepositoriesEnum[keyof typeof CiProductsGetInstanceFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: 'canonicalName',
    IsDeleted: 'isDeleted',
    Kind: 'kind',
    Name: 'name',
    Repository: 'repository'
} as const;
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum[keyof typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export const CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum = {
    Repositories: 'repositories',
    ScmProviderType: 'scmProviderType',
    Url: 'url'
} as const;
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum = typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum[keyof typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum];
/**
 * @export
 */
export const CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    HttpCloneUrl: 'httpCloneUrl',
    LastAccessedDate: 'lastAccessedDate',
    OwnerName: 'ownerName',
    PullRequests: 'pullRequests',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    SshCloneUrl: 'sshCloneUrl'
} as const;
export type CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum[keyof typeof CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum = {
    DefaultBranch: 'defaultBranch',
    ScmProvider: 'scmProvider'
} as const;
export type CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum = typeof CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum[keyof typeof CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum = {
    MacOsVersions: 'macOsVersions',
    Name: 'name',
    TestDestinations: 'testDestinations',
    Version: 'version'
} as const;
export type CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum = typeof CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum = {
    Actions: 'actions',
    BranchStartCondition: 'branchStartCondition',
    BuildRuns: 'buildRuns',
    Clean: 'clean',
    ContainerFilePath: 'containerFilePath',
    Description: 'description',
    IsEnabled: 'isEnabled',
    IsLockedForEditing: 'isLockedForEditing',
    LastModifiedDate: 'lastModifiedDate',
    MacOsVersion: 'macOsVersion',
    ManualBranchStartCondition: 'manualBranchStartCondition',
    ManualPullRequestStartCondition: 'manualPullRequestStartCondition',
    ManualTagStartCondition: 'manualTagStartCondition',
    Name: 'name',
    Product: 'product',
    PullRequestStartCondition: 'pullRequestStartCondition',
    Repository: 'repository',
    ScheduledStartCondition: 'scheduledStartCondition',
    TagStartCondition: 'tagStartCondition',
    XcodeVersion: 'xcodeVersion'
} as const;
export type CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum = typeof CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum = {
    Name: 'name',
    Version: 'version',
    XcodeVersions: 'xcodeVersions'
} as const;
export type CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum = typeof CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: 'additionalRepositories',
    App: 'app',
    BuildRuns: 'buildRuns',
    BundleId: 'bundleId',
    CreatedDate: 'createdDate',
    Name: 'name',
    PrimaryRepositories: 'primaryRepositories',
    ProductType: 'productType',
    Workflows: 'workflows'
} as const;
export type CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum = typeof CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: 'defaultBranch',
    GitReferences: 'gitReferences',
    HttpCloneUrl: 'httpCloneUrl',
    LastAccessedDate: 'lastAccessedDate',
    OwnerName: 'ownerName',
    PullRequests: 'pullRequests',
    RepositoryName: 'repositoryName',
    ScmProvider: 'scmProvider',
    SshCloneUrl: 'sshCloneUrl'
} as const;
export type CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum = typeof CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export const CiProductsWorkflowsGetToManyRelatedIncludeEnum = {
    MacOsVersion: 'macOsVersion',
    Product: 'product',
    Repository: 'repository',
    XcodeVersion: 'xcodeVersion'
} as const;
export type CiProductsWorkflowsGetToManyRelatedIncludeEnum = typeof CiProductsWorkflowsGetToManyRelatedIncludeEnum[keyof typeof CiProductsWorkflowsGetToManyRelatedIncludeEnum];
