/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppStoreVersionSubmissionCreateRequest,
  AppStoreVersionSubmissionResponse,
  ErrorResponse,
} from '../models';
import {
    AppStoreVersionSubmissionCreateRequestFromJSON,
    AppStoreVersionSubmissionCreateRequestToJSON,
    AppStoreVersionSubmissionResponseFromJSON,
    AppStoreVersionSubmissionResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AppStoreVersionSubmissionsCreateInstanceRequest {
    appStoreVersionSubmissionCreateRequest: AppStoreVersionSubmissionCreateRequest;
}

export interface AppStoreVersionSubmissionsDeleteInstanceRequest {
    id: string;
}

/**
 * 
 */
export class AppStoreVersionSubmissionsApi extends runtime.BaseAPI {

    /**
     */
    async appStoreVersionSubmissionsCreateInstanceRaw(requestParameters: AppStoreVersionSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppStoreVersionSubmissionResponse>> {
        if (requestParameters.appStoreVersionSubmissionCreateRequest === null || requestParameters.appStoreVersionSubmissionCreateRequest === undefined) {
            throw new runtime.RequiredError('appStoreVersionSubmissionCreateRequest','Required parameter requestParameters.appStoreVersionSubmissionCreateRequest was null or undefined when calling appStoreVersionSubmissionsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionSubmissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppStoreVersionSubmissionCreateRequestToJSON(requestParameters.appStoreVersionSubmissionCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppStoreVersionSubmissionResponseFromJSON(jsonValue));
    }

    /**
     */
    async appStoreVersionSubmissionsCreateInstance(requestParameters: AppStoreVersionSubmissionsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppStoreVersionSubmissionResponse> {
        const response = await this.appStoreVersionSubmissionsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appStoreVersionSubmissionsDeleteInstanceRaw(requestParameters: AppStoreVersionSubmissionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appStoreVersionSubmissionsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/appStoreVersionSubmissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appStoreVersionSubmissionsDeleteInstance(requestParameters: AppStoreVersionSubmissionsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appStoreVersionSubmissionsDeleteInstanceRaw(requestParameters, initOverrides);
    }

}
