/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppsWithoutIncludesResponse,
  ErrorResponse,
  UserResponse,
  UserUpdateRequest,
  UserVisibleAppsLinkagesRequest,
  UserVisibleAppsLinkagesResponse,
  UsersResponse,
} from '../models';
import {
    AppsWithoutIncludesResponseFromJSON,
    AppsWithoutIncludesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UserUpdateRequestFromJSON,
    UserUpdateRequestToJSON,
    UserVisibleAppsLinkagesRequestFromJSON,
    UserVisibleAppsLinkagesRequestToJSON,
    UserVisibleAppsLinkagesResponseFromJSON,
    UserVisibleAppsLinkagesResponseToJSON,
    UsersResponseFromJSON,
    UsersResponseToJSON,
} from '../models';

export interface UsersDeleteInstanceRequest {
    id: string;
}

export interface UsersGetCollectionRequest {
    filterRoles?: Array<UsersGetCollectionFilterRolesEnum>;
    filterUsername?: Array<string>;
    filterVisibleApps?: Array<string>;
    sort?: Array<UsersGetCollectionSortEnum>;
    fieldsUsers?: Array<UsersGetCollectionFieldsUsersEnum>;
    limit?: number;
    include?: Array<UsersGetCollectionIncludeEnum>;
    fieldsApps?: Array<UsersGetCollectionFieldsAppsEnum>;
    limitVisibleApps?: number;
}

export interface UsersGetInstanceRequest {
    id: string;
    fieldsUsers?: Array<UsersGetInstanceFieldsUsersEnum>;
    include?: Array<UsersGetInstanceIncludeEnum>;
    fieldsApps?: Array<UsersGetInstanceFieldsAppsEnum>;
    limitVisibleApps?: number;
}

export interface UsersUpdateInstanceRequest {
    id: string;
    userUpdateRequest: UserUpdateRequest;
}

export interface UsersVisibleAppsCreateToManyRelationshipRequest {
    id: string;
    userVisibleAppsLinkagesRequest: UserVisibleAppsLinkagesRequest;
}

export interface UsersVisibleAppsDeleteToManyRelationshipRequest {
    id: string;
    userVisibleAppsLinkagesRequest: UserVisibleAppsLinkagesRequest;
}

export interface UsersVisibleAppsGetToManyRelatedRequest {
    id: string;
    fieldsApps?: Array<UsersVisibleAppsGetToManyRelatedFieldsAppsEnum>;
    limit?: number;
}

export interface UsersVisibleAppsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}

export interface UsersVisibleAppsReplaceToManyRelationshipRequest {
    id: string;
    userVisibleAppsLinkagesRequest: UserVisibleAppsLinkagesRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersDeleteInstanceRaw(requestParameters: UsersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersDeleteInstance(requestParameters: UsersDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersGetCollectionRaw(requestParameters: UsersGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterRoles) {
            queryParameters['filter[roles]'] = requestParameters.filterRoles.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterUsername) {
            queryParameters['filter[username]'] = requestParameters.filterUsername.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterVisibleApps) {
            queryParameters['filter[visibleApps]'] = requestParameters.filterVisibleApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsUsers) {
            queryParameters['fields[users]'] = requestParameters.fieldsUsers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitVisibleApps !== undefined) {
            queryParameters['limit[visibleApps]'] = requestParameters.limitVisibleApps;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersGetCollection(requestParameters: UsersGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse> {
        const response = await this.usersGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetInstanceRaw(requestParameters: UsersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsUsers) {
            queryParameters['fields[users]'] = requestParameters.fieldsUsers.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limitVisibleApps !== undefined) {
            queryParameters['limit[visibleApps]'] = requestParameters.limitVisibleApps;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersGetInstance(requestParameters: UsersGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.usersGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUpdateInstanceRaw(requestParameters: UsersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUpdateInstance.');
        }

        if (requestParameters.userUpdateRequest === null || requestParameters.userUpdateRequest === undefined) {
            throw new runtime.RequiredError('userUpdateRequest','Required parameter requestParameters.userUpdateRequest was null or undefined when calling usersUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateRequestToJSON(requestParameters.userUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersUpdateInstance(requestParameters: UsersUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.usersUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersVisibleAppsCreateToManyRelationshipRaw(requestParameters: UsersVisibleAppsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersVisibleAppsCreateToManyRelationship.');
        }

        if (requestParameters.userVisibleAppsLinkagesRequest === null || requestParameters.userVisibleAppsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('userVisibleAppsLinkagesRequest','Required parameter requestParameters.userVisibleAppsLinkagesRequest was null or undefined when calling usersVisibleAppsCreateToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}/relationships/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserVisibleAppsLinkagesRequestToJSON(requestParameters.userVisibleAppsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersVisibleAppsCreateToManyRelationship(requestParameters: UsersVisibleAppsCreateToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersVisibleAppsCreateToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersVisibleAppsDeleteToManyRelationshipRaw(requestParameters: UsersVisibleAppsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersVisibleAppsDeleteToManyRelationship.');
        }

        if (requestParameters.userVisibleAppsLinkagesRequest === null || requestParameters.userVisibleAppsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('userVisibleAppsLinkagesRequest','Required parameter requestParameters.userVisibleAppsLinkagesRequest was null or undefined when calling usersVisibleAppsDeleteToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}/relationships/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UserVisibleAppsLinkagesRequestToJSON(requestParameters.userVisibleAppsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersVisibleAppsDeleteToManyRelationship(requestParameters: UsersVisibleAppsDeleteToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersVisibleAppsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersVisibleAppsGetToManyRelatedRaw(requestParameters: UsersVisibleAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppsWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersVisibleAppsGetToManyRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppsWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersVisibleAppsGetToManyRelated(requestParameters: UsersVisibleAppsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppsWithoutIncludesResponse> {
        const response = await this.usersVisibleAppsGetToManyRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersVisibleAppsGetToManyRelationshipRaw(requestParameters: UsersVisibleAppsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserVisibleAppsLinkagesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersVisibleAppsGetToManyRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}/relationships/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVisibleAppsLinkagesResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersVisibleAppsGetToManyRelationship(requestParameters: UsersVisibleAppsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserVisibleAppsLinkagesResponse> {
        const response = await this.usersVisibleAppsGetToManyRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersVisibleAppsReplaceToManyRelationshipRaw(requestParameters: UsersVisibleAppsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersVisibleAppsReplaceToManyRelationship.');
        }

        if (requestParameters.userVisibleAppsLinkagesRequest === null || requestParameters.userVisibleAppsLinkagesRequest === undefined) {
            throw new runtime.RequiredError('userVisibleAppsLinkagesRequest','Required parameter requestParameters.userVisibleAppsLinkagesRequest was null or undefined when calling usersVisibleAppsReplaceToManyRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/{id}/relationships/visibleApps`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserVisibleAppsLinkagesRequestToJSON(requestParameters.userVisibleAppsLinkagesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersVisibleAppsReplaceToManyRelationship(requestParameters: UsersVisibleAppsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersVisibleAppsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const UsersGetCollectionFilterRolesEnum = {
    Admin: 'ADMIN',
    Finance: 'FINANCE',
    AccountHolder: 'ACCOUNT_HOLDER',
    Sales: 'SALES',
    Marketing: 'MARKETING',
    AppManager: 'APP_MANAGER',
    Developer: 'DEVELOPER',
    AccessToReports: 'ACCESS_TO_REPORTS',
    CustomerSupport: 'CUSTOMER_SUPPORT',
    CreateApps: 'CREATE_APPS',
    CloudManagedDeveloperId: 'CLOUD_MANAGED_DEVELOPER_ID',
    CloudManagedAppDistribution: 'CLOUD_MANAGED_APP_DISTRIBUTION',
    GenerateIndividualKeys: 'GENERATE_INDIVIDUAL_KEYS'
} as const;
export type UsersGetCollectionFilterRolesEnum = typeof UsersGetCollectionFilterRolesEnum[keyof typeof UsersGetCollectionFilterRolesEnum];
/**
 * @export
 */
export const UsersGetCollectionSortEnum = {
    LastName: 'lastName',
    LastName: '-lastName',
    Username: 'username',
    Username: '-username'
} as const;
export type UsersGetCollectionSortEnum = typeof UsersGetCollectionSortEnum[keyof typeof UsersGetCollectionSortEnum];
/**
 * @export
 */
export const UsersGetCollectionFieldsUsersEnum = {
    AllAppsVisible: 'allAppsVisible',
    FirstName: 'firstName',
    LastName: 'lastName',
    ProvisioningAllowed: 'provisioningAllowed',
    Roles: 'roles',
    Username: 'username',
    VisibleApps: 'visibleApps'
} as const;
export type UsersGetCollectionFieldsUsersEnum = typeof UsersGetCollectionFieldsUsersEnum[keyof typeof UsersGetCollectionFieldsUsersEnum];
/**
 * @export
 */
export const UsersGetCollectionIncludeEnum = {
    VisibleApps: 'visibleApps'
} as const;
export type UsersGetCollectionIncludeEnum = typeof UsersGetCollectionIncludeEnum[keyof typeof UsersGetCollectionIncludeEnum];
/**
 * @export
 */
export const UsersGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type UsersGetCollectionFieldsAppsEnum = typeof UsersGetCollectionFieldsAppsEnum[keyof typeof UsersGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const UsersGetInstanceFieldsUsersEnum = {
    AllAppsVisible: 'allAppsVisible',
    FirstName: 'firstName',
    LastName: 'lastName',
    ProvisioningAllowed: 'provisioningAllowed',
    Roles: 'roles',
    Username: 'username',
    VisibleApps: 'visibleApps'
} as const;
export type UsersGetInstanceFieldsUsersEnum = typeof UsersGetInstanceFieldsUsersEnum[keyof typeof UsersGetInstanceFieldsUsersEnum];
/**
 * @export
 */
export const UsersGetInstanceIncludeEnum = {
    VisibleApps: 'visibleApps'
} as const;
export type UsersGetInstanceIncludeEnum = typeof UsersGetInstanceIncludeEnum[keyof typeof UsersGetInstanceIncludeEnum];
/**
 * @export
 */
export const UsersGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type UsersGetInstanceFieldsAppsEnum = typeof UsersGetInstanceFieldsAppsEnum[keyof typeof UsersGetInstanceFieldsAppsEnum];
/**
 * @export
 */
export const UsersVisibleAppsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type UsersVisibleAppsGetToManyRelatedFieldsAppsEnum = typeof UsersVisibleAppsGetToManyRelatedFieldsAppsEnum[keyof typeof UsersVisibleAppsGetToManyRelatedFieldsAppsEnum];
