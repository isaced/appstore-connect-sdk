/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GameCenterMatchmakingTeamCreateRequest,
  GameCenterMatchmakingTeamResponse,
  GameCenterMatchmakingTeamUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GameCenterMatchmakingTeamCreateRequestFromJSON,
    GameCenterMatchmakingTeamCreateRequestToJSON,
    GameCenterMatchmakingTeamResponseFromJSON,
    GameCenterMatchmakingTeamResponseToJSON,
    GameCenterMatchmakingTeamUpdateRequestFromJSON,
    GameCenterMatchmakingTeamUpdateRequestToJSON,
} from '../models';

export interface GameCenterMatchmakingTeamsCreateInstanceRequest {
    gameCenterMatchmakingTeamCreateRequest: GameCenterMatchmakingTeamCreateRequest;
}

export interface GameCenterMatchmakingTeamsDeleteInstanceRequest {
    id: string;
}

export interface GameCenterMatchmakingTeamsUpdateInstanceRequest {
    id: string;
    gameCenterMatchmakingTeamUpdateRequest: GameCenterMatchmakingTeamUpdateRequest;
}

/**
 * 
 */
export class GameCenterMatchmakingTeamsApi extends runtime.BaseAPI {

    /**
     */
    async gameCenterMatchmakingTeamsCreateInstanceRaw(requestParameters: GameCenterMatchmakingTeamsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingTeamResponse>> {
        if (requestParameters.gameCenterMatchmakingTeamCreateRequest === null || requestParameters.gameCenterMatchmakingTeamCreateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterMatchmakingTeamCreateRequest','Required parameter requestParameters.gameCenterMatchmakingTeamCreateRequest was null or undefined when calling gameCenterMatchmakingTeamsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingTeams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterMatchmakingTeamCreateRequestToJSON(requestParameters.gameCenterMatchmakingTeamCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingTeamResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingTeamsCreateInstance(requestParameters: GameCenterMatchmakingTeamsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingTeamResponse> {
        const response = await this.gameCenterMatchmakingTeamsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameCenterMatchmakingTeamsDeleteInstanceRaw(requestParameters: GameCenterMatchmakingTeamsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingTeamsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingTeams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gameCenterMatchmakingTeamsDeleteInstance(requestParameters: GameCenterMatchmakingTeamsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gameCenterMatchmakingTeamsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gameCenterMatchmakingTeamsUpdateInstanceRaw(requestParameters: GameCenterMatchmakingTeamsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterMatchmakingTeamResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingTeamsUpdateInstance.');
        }

        if (requestParameters.gameCenterMatchmakingTeamUpdateRequest === null || requestParameters.gameCenterMatchmakingTeamUpdateRequest === undefined) {
            throw new runtime.RequiredError('gameCenterMatchmakingTeamUpdateRequest','Required parameter requestParameters.gameCenterMatchmakingTeamUpdateRequest was null or undefined when calling gameCenterMatchmakingTeamsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/gameCenterMatchmakingTeams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GameCenterMatchmakingTeamUpdateRequestToJSON(requestParameters.gameCenterMatchmakingTeamUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameCenterMatchmakingTeamResponseFromJSON(jsonValue));
    }

    /**
     */
    async gameCenterMatchmakingTeamsUpdateInstance(requestParameters: GameCenterMatchmakingTeamsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterMatchmakingTeamResponse> {
        const response = await this.gameCenterMatchmakingTeamsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
