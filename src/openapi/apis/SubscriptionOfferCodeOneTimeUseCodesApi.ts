/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SubscriptionOfferCodeOneTimeUseCodeCreateRequest,
  SubscriptionOfferCodeOneTimeUseCodeResponse,
  SubscriptionOfferCodeOneTimeUseCodeUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SubscriptionOfferCodeOneTimeUseCodeCreateRequestFromJSON,
    SubscriptionOfferCodeOneTimeUseCodeCreateRequestToJSON,
    SubscriptionOfferCodeOneTimeUseCodeResponseFromJSON,
    SubscriptionOfferCodeOneTimeUseCodeResponseToJSON,
    SubscriptionOfferCodeOneTimeUseCodeUpdateRequestFromJSON,
    SubscriptionOfferCodeOneTimeUseCodeUpdateRequestToJSON,
} from '../models';

export interface SubscriptionOfferCodeOneTimeUseCodesCreateInstanceRequest {
    subscriptionOfferCodeOneTimeUseCodeCreateRequest: SubscriptionOfferCodeOneTimeUseCodeCreateRequest;
}

export interface SubscriptionOfferCodeOneTimeUseCodesGetInstanceRequest {
    id: string;
    fieldsSubscriptionOfferCodeOneTimeUseCodes?: Array<SubscriptionOfferCodeOneTimeUseCodesGetInstanceFieldsSubscriptionOfferCodeOneTimeUseCodesEnum>;
    include?: Array<SubscriptionOfferCodeOneTimeUseCodesGetInstanceIncludeEnum>;
}

export interface SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceRequest {
    id: string;
    subscriptionOfferCodeOneTimeUseCodeUpdateRequest: SubscriptionOfferCodeOneTimeUseCodeUpdateRequest;
}

export interface SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedRequest {
    id: string;
}

/**
 * 
 */
export class SubscriptionOfferCodeOneTimeUseCodesApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesCreateInstanceRaw(requestParameters: SubscriptionOfferCodeOneTimeUseCodesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeOneTimeUseCodeResponse>> {
        if (requestParameters.subscriptionOfferCodeOneTimeUseCodeCreateRequest === null || requestParameters.subscriptionOfferCodeOneTimeUseCodeCreateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionOfferCodeOneTimeUseCodeCreateRequest','Required parameter requestParameters.subscriptionOfferCodeOneTimeUseCodeCreateRequest was null or undefined when calling subscriptionOfferCodeOneTimeUseCodesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeOneTimeUseCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionOfferCodeOneTimeUseCodeCreateRequestToJSON(requestParameters.subscriptionOfferCodeOneTimeUseCodeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeOneTimeUseCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesCreateInstance(requestParameters: SubscriptionOfferCodeOneTimeUseCodesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        const response = await this.subscriptionOfferCodeOneTimeUseCodesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesGetInstanceRaw(requestParameters: SubscriptionOfferCodeOneTimeUseCodesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeOneTimeUseCodeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionOfferCodeOneTimeUseCodesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes) {
            queryParameters['fields[subscriptionOfferCodeOneTimeUseCodes]'] = requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeOneTimeUseCodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeOneTimeUseCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesGetInstance(requestParameters: SubscriptionOfferCodeOneTimeUseCodesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        const response = await this.subscriptionOfferCodeOneTimeUseCodesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesUpdateInstanceRaw(requestParameters: SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionOfferCodeOneTimeUseCodeResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionOfferCodeOneTimeUseCodesUpdateInstance.');
        }

        if (requestParameters.subscriptionOfferCodeOneTimeUseCodeUpdateRequest === null || requestParameters.subscriptionOfferCodeOneTimeUseCodeUpdateRequest === undefined) {
            throw new runtime.RequiredError('subscriptionOfferCodeOneTimeUseCodeUpdateRequest','Required parameter requestParameters.subscriptionOfferCodeOneTimeUseCodeUpdateRequest was null or undefined when calling subscriptionOfferCodeOneTimeUseCodesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeOneTimeUseCodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionOfferCodeOneTimeUseCodeUpdateRequestToJSON(requestParameters.subscriptionOfferCodeOneTimeUseCodeUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionOfferCodeOneTimeUseCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesUpdateInstance(requestParameters: SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        const response = await this.subscriptionOfferCodeOneTimeUseCodesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedRaw(requestParameters: SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated(requestParameters: SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SubscriptionOfferCodeOneTimeUseCodesGetInstanceFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = {
    Active: 'active',
    CreatedDate: 'createdDate',
    ExpirationDate: 'expirationDate',
    NumberOfCodes: 'numberOfCodes',
    OfferCode: 'offerCode',
    Values: 'values'
} as const;
export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = typeof SubscriptionOfferCodeOneTimeUseCodesGetInstanceFieldsSubscriptionOfferCodeOneTimeUseCodesEnum[keyof typeof SubscriptionOfferCodeOneTimeUseCodesGetInstanceFieldsSubscriptionOfferCodeOneTimeUseCodesEnum];
/**
 * @export
 */
export const SubscriptionOfferCodeOneTimeUseCodesGetInstanceIncludeEnum = {
    OfferCode: 'offerCode'
} as const;
export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceIncludeEnum = typeof SubscriptionOfferCodeOneTimeUseCodesGetInstanceIncludeEnum[keyof typeof SubscriptionOfferCodeOneTimeUseCodesGetInstanceIncludeEnum];
