/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlternativeDistributionPackageVariantResponse,
  ErrorResponse,
} from '../models';
import {
    AlternativeDistributionPackageVariantResponseFromJSON,
    AlternativeDistributionPackageVariantResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AlternativeDistributionPackageVariantsGetInstanceRequest {
    id: string;
    fieldsAlternativeDistributionPackageVariants?: Array<AlternativeDistributionPackageVariantsGetInstanceFieldsAlternativeDistributionPackageVariantsEnum>;
}

/**
 * 
 */
export class AlternativeDistributionPackageVariantsApi extends runtime.BaseAPI {

    /**
     */
    async alternativeDistributionPackageVariantsGetInstanceRaw(requestParameters: AlternativeDistributionPackageVariantsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternativeDistributionPackageVariantResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alternativeDistributionPackageVariantsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsAlternativeDistributionPackageVariants) {
            queryParameters['fields[alternativeDistributionPackageVariants]'] = requestParameters.fieldsAlternativeDistributionPackageVariants.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alternativeDistributionPackageVariants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternativeDistributionPackageVariantResponseFromJSON(jsonValue));
    }

    /**
     */
    async alternativeDistributionPackageVariantsGetInstance(requestParameters: AlternativeDistributionPackageVariantsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternativeDistributionPackageVariantResponse> {
        const response = await this.alternativeDistributionPackageVariantsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AlternativeDistributionPackageVariantsGetInstanceFieldsAlternativeDistributionPackageVariantsEnum = {
    AlternativeDistributionKeyBlob: 'alternativeDistributionKeyBlob',
    FileChecksum: 'fileChecksum',
    Url: 'url',
    UrlExpirationDate: 'urlExpirationDate'
} as const;
export type AlternativeDistributionPackageVariantsGetInstanceFieldsAlternativeDistributionPackageVariantsEnum = typeof AlternativeDistributionPackageVariantsGetInstanceFieldsAlternativeDistributionPackageVariantsEnum[keyof typeof AlternativeDistributionPackageVariantsGetInstanceFieldsAlternativeDistributionPackageVariantsEnum];
