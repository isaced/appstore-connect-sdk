/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppWithoutIncludesResponse,
  BetaAppLocalizationCreateRequest,
  BetaAppLocalizationResponse,
  BetaAppLocalizationUpdateRequest,
  BetaAppLocalizationsResponse,
  ErrorResponse,
} from '../models';
import {
    AppWithoutIncludesResponseFromJSON,
    AppWithoutIncludesResponseToJSON,
    BetaAppLocalizationCreateRequestFromJSON,
    BetaAppLocalizationCreateRequestToJSON,
    BetaAppLocalizationResponseFromJSON,
    BetaAppLocalizationResponseToJSON,
    BetaAppLocalizationUpdateRequestFromJSON,
    BetaAppLocalizationUpdateRequestToJSON,
    BetaAppLocalizationsResponseFromJSON,
    BetaAppLocalizationsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface BetaAppLocalizationsAppGetToOneRelatedRequest {
    id: string;
    fieldsApps?: Array<BetaAppLocalizationsAppGetToOneRelatedFieldsAppsEnum>;
}

export interface BetaAppLocalizationsCreateInstanceRequest {
    betaAppLocalizationCreateRequest: BetaAppLocalizationCreateRequest;
}

export interface BetaAppLocalizationsDeleteInstanceRequest {
    id: string;
}

export interface BetaAppLocalizationsGetCollectionRequest {
    filterLocale?: Array<string>;
    filterApp?: Array<string>;
    fieldsBetaAppLocalizations?: Array<BetaAppLocalizationsGetCollectionFieldsBetaAppLocalizationsEnum>;
    limit?: number;
    include?: Array<BetaAppLocalizationsGetCollectionIncludeEnum>;
    fieldsApps?: Array<BetaAppLocalizationsGetCollectionFieldsAppsEnum>;
}

export interface BetaAppLocalizationsGetInstanceRequest {
    id: string;
    fieldsBetaAppLocalizations?: Array<BetaAppLocalizationsGetInstanceFieldsBetaAppLocalizationsEnum>;
    include?: Array<BetaAppLocalizationsGetInstanceIncludeEnum>;
    fieldsApps?: Array<BetaAppLocalizationsGetInstanceFieldsAppsEnum>;
}

export interface BetaAppLocalizationsUpdateInstanceRequest {
    id: string;
    betaAppLocalizationUpdateRequest: BetaAppLocalizationUpdateRequest;
}

/**
 * 
 */
export class BetaAppLocalizationsApi extends runtime.BaseAPI {

    /**
     */
    async betaAppLocalizationsAppGetToOneRelatedRaw(requestParameters: BetaAppLocalizationsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppWithoutIncludesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppLocalizationsAppGetToOneRelated.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppWithoutIncludesResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppLocalizationsAppGetToOneRelated(requestParameters: BetaAppLocalizationsAppGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppWithoutIncludesResponse> {
        const response = await this.betaAppLocalizationsAppGetToOneRelatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppLocalizationsCreateInstanceRaw(requestParameters: BetaAppLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationResponse>> {
        if (requestParameters.betaAppLocalizationCreateRequest === null || requestParameters.betaAppLocalizationCreateRequest === undefined) {
            throw new runtime.RequiredError('betaAppLocalizationCreateRequest','Required parameter requestParameters.betaAppLocalizationCreateRequest was null or undefined when calling betaAppLocalizationsCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppLocalizationCreateRequestToJSON(requestParameters.betaAppLocalizationCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppLocalizationsCreateInstance(requestParameters: BetaAppLocalizationsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationResponse> {
        const response = await this.betaAppLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppLocalizationsDeleteInstanceRaw(requestParameters: BetaAppLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppLocalizationsDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async betaAppLocalizationsDeleteInstance(requestParameters: BetaAppLocalizationsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.betaAppLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async betaAppLocalizationsGetCollectionRaw(requestParameters: BetaAppLocalizationsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filterLocale) {
            queryParameters['filter[locale]'] = requestParameters.filterLocale.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filterApp) {
            queryParameters['filter[app]'] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppLocalizationsGetCollection(requestParameters: BetaAppLocalizationsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationsResponse> {
        const response = await this.betaAppLocalizationsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppLocalizationsGetInstanceRaw(requestParameters: BetaAppLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppLocalizationsGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsBetaAppLocalizations) {
            queryParameters['fields[betaAppLocalizations]'] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fieldsApps) {
            queryParameters['fields[apps]'] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppLocalizationsGetInstance(requestParameters: BetaAppLocalizationsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationResponse> {
        const response = await this.betaAppLocalizationsGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async betaAppLocalizationsUpdateInstanceRaw(requestParameters: BetaAppLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BetaAppLocalizationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling betaAppLocalizationsUpdateInstance.');
        }

        if (requestParameters.betaAppLocalizationUpdateRequest === null || requestParameters.betaAppLocalizationUpdateRequest === undefined) {
            throw new runtime.RequiredError('betaAppLocalizationUpdateRequest','Required parameter requestParameters.betaAppLocalizationUpdateRequest was null or undefined when calling betaAppLocalizationsUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/betaAppLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BetaAppLocalizationUpdateRequestToJSON(requestParameters.betaAppLocalizationUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BetaAppLocalizationResponseFromJSON(jsonValue));
    }

    /**
     */
    async betaAppLocalizationsUpdateInstance(requestParameters: BetaAppLocalizationsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BetaAppLocalizationResponse> {
        const response = await this.betaAppLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BetaAppLocalizationsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaAppLocalizationsAppGetToOneRelatedFieldsAppsEnum = typeof BetaAppLocalizationsAppGetToOneRelatedFieldsAppsEnum[keyof typeof BetaAppLocalizationsAppGetToOneRelatedFieldsAppsEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetCollectionFieldsBetaAppLocalizationsEnum = {
    App: 'app',
    Description: 'description',
    FeedbackEmail: 'feedbackEmail',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy'
} as const;
export type BetaAppLocalizationsGetCollectionFieldsBetaAppLocalizationsEnum = typeof BetaAppLocalizationsGetCollectionFieldsBetaAppLocalizationsEnum[keyof typeof BetaAppLocalizationsGetCollectionFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetCollectionIncludeEnum = {
    App: 'app'
} as const;
export type BetaAppLocalizationsGetCollectionIncludeEnum = typeof BetaAppLocalizationsGetCollectionIncludeEnum[keyof typeof BetaAppLocalizationsGetCollectionIncludeEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaAppLocalizationsGetCollectionFieldsAppsEnum = typeof BetaAppLocalizationsGetCollectionFieldsAppsEnum[keyof typeof BetaAppLocalizationsGetCollectionFieldsAppsEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetInstanceFieldsBetaAppLocalizationsEnum = {
    App: 'app',
    Description: 'description',
    FeedbackEmail: 'feedbackEmail',
    Locale: 'locale',
    MarketingUrl: 'marketingUrl',
    PrivacyPolicyUrl: 'privacyPolicyUrl',
    TvOsPrivacyPolicy: 'tvOsPrivacyPolicy'
} as const;
export type BetaAppLocalizationsGetInstanceFieldsBetaAppLocalizationsEnum = typeof BetaAppLocalizationsGetInstanceFieldsBetaAppLocalizationsEnum[keyof typeof BetaAppLocalizationsGetInstanceFieldsBetaAppLocalizationsEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetInstanceIncludeEnum = {
    App: 'app'
} as const;
export type BetaAppLocalizationsGetInstanceIncludeEnum = typeof BetaAppLocalizationsGetInstanceIncludeEnum[keyof typeof BetaAppLocalizationsGetInstanceIncludeEnum];
/**
 * @export
 */
export const BetaAppLocalizationsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: 'alternativeDistributionKey',
    AnalyticsReportRequests: 'analyticsReportRequests',
    AppAvailability: 'appAvailability',
    AppClips: 'appClips',
    AppCustomProductPages: 'appCustomProductPages',
    AppEncryptionDeclarations: 'appEncryptionDeclarations',
    AppEvents: 'appEvents',
    AppInfos: 'appInfos',
    AppPricePoints: 'appPricePoints',
    AppPriceSchedule: 'appPriceSchedule',
    AppStoreVersionExperimentsV2: 'appStoreVersionExperimentsV2',
    AppStoreVersions: 'appStoreVersions',
    BetaAppLocalizations: 'betaAppLocalizations',
    BetaAppReviewDetail: 'betaAppReviewDetail',
    BetaGroups: 'betaGroups',
    BetaLicenseAgreement: 'betaLicenseAgreement',
    BetaTesters: 'betaTesters',
    Builds: 'builds',
    BundleId: 'bundleId',
    CiProduct: 'ciProduct',
    ContentRightsDeclaration: 'contentRightsDeclaration',
    CustomerReviews: 'customerReviews',
    EndUserLicenseAgreement: 'endUserLicenseAgreement',
    GameCenterDetail: 'gameCenterDetail',
    GameCenterEnabledVersions: 'gameCenterEnabledVersions',
    InAppPurchases: 'inAppPurchases',
    InAppPurchasesV2: 'inAppPurchasesV2',
    IsOrEverWasMadeForKids: 'isOrEverWasMadeForKids',
    MarketplaceSearchDetail: 'marketplaceSearchDetail',
    Name: 'name',
    PerfPowerMetrics: 'perfPowerMetrics',
    PreOrder: 'preOrder',
    PreReleaseVersions: 'preReleaseVersions',
    PrimaryLocale: 'primaryLocale',
    PromotedPurchases: 'promotedPurchases',
    ReviewSubmissions: 'reviewSubmissions',
    Sku: 'sku',
    SubscriptionGracePeriod: 'subscriptionGracePeriod',
    SubscriptionGroups: 'subscriptionGroups',
    SubscriptionStatusUrl: 'subscriptionStatusUrl',
    SubscriptionStatusUrlForSandbox: 'subscriptionStatusUrlForSandbox',
    SubscriptionStatusUrlVersion: 'subscriptionStatusUrlVersion',
    SubscriptionStatusUrlVersionForSandbox: 'subscriptionStatusUrlVersionForSandbox'
} as const;
export type BetaAppLocalizationsGetInstanceFieldsAppsEnum = typeof BetaAppLocalizationsGetInstanceFieldsAppsEnum[keyof typeof BetaAppLocalizationsGetInstanceFieldsAppsEnum];
