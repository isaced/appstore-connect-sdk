/* tslint:disable */
/* eslint-disable */
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  RoutingAppCoverageCreateRequest,
  RoutingAppCoverageResponse,
  RoutingAppCoverageUpdateRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RoutingAppCoverageCreateRequestFromJSON,
    RoutingAppCoverageCreateRequestToJSON,
    RoutingAppCoverageResponseFromJSON,
    RoutingAppCoverageResponseToJSON,
    RoutingAppCoverageUpdateRequestFromJSON,
    RoutingAppCoverageUpdateRequestToJSON,
} from '../models';

export interface RoutingAppCoveragesCreateInstanceRequest {
    routingAppCoverageCreateRequest: RoutingAppCoverageCreateRequest;
}

export interface RoutingAppCoveragesDeleteInstanceRequest {
    id: string;
}

export interface RoutingAppCoveragesGetInstanceRequest {
    id: string;
    fieldsRoutingAppCoverages?: Array<RoutingAppCoveragesGetInstanceFieldsRoutingAppCoveragesEnum>;
    include?: Array<RoutingAppCoveragesGetInstanceIncludeEnum>;
}

export interface RoutingAppCoveragesUpdateInstanceRequest {
    id: string;
    routingAppCoverageUpdateRequest: RoutingAppCoverageUpdateRequest;
}

/**
 * 
 */
export class RoutingAppCoveragesApi extends runtime.BaseAPI {

    /**
     */
    async routingAppCoveragesCreateInstanceRaw(requestParameters: RoutingAppCoveragesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingAppCoverageResponse>> {
        if (requestParameters.routingAppCoverageCreateRequest === null || requestParameters.routingAppCoverageCreateRequest === undefined) {
            throw new runtime.RequiredError('routingAppCoverageCreateRequest','Required parameter requestParameters.routingAppCoverageCreateRequest was null or undefined when calling routingAppCoveragesCreateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routingAppCoverages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingAppCoverageCreateRequestToJSON(requestParameters.routingAppCoverageCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingAppCoverageResponseFromJSON(jsonValue));
    }

    /**
     */
    async routingAppCoveragesCreateInstance(requestParameters: RoutingAppCoveragesCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingAppCoverageResponse> {
        const response = await this.routingAppCoveragesCreateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async routingAppCoveragesDeleteInstanceRaw(requestParameters: RoutingAppCoveragesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling routingAppCoveragesDeleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routingAppCoverages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async routingAppCoveragesDeleteInstance(requestParameters: RoutingAppCoveragesDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.routingAppCoveragesDeleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async routingAppCoveragesGetInstanceRaw(requestParameters: RoutingAppCoveragesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingAppCoverageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling routingAppCoveragesGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.fieldsRoutingAppCoverages) {
            queryParameters['fields[routingAppCoverages]'] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routingAppCoverages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingAppCoverageResponseFromJSON(jsonValue));
    }

    /**
     */
    async routingAppCoveragesGetInstance(requestParameters: RoutingAppCoveragesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingAppCoverageResponse> {
        const response = await this.routingAppCoveragesGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async routingAppCoveragesUpdateInstanceRaw(requestParameters: RoutingAppCoveragesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingAppCoverageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling routingAppCoveragesUpdateInstance.');
        }

        if (requestParameters.routingAppCoverageUpdateRequest === null || requestParameters.routingAppCoverageUpdateRequest === undefined) {
            throw new runtime.RequiredError('routingAppCoverageUpdateRequest','Required parameter requestParameters.routingAppCoverageUpdateRequest was null or undefined when calling routingAppCoveragesUpdateInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("itc-bearer-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/routingAppCoverages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingAppCoverageUpdateRequestToJSON(requestParameters.routingAppCoverageUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingAppCoverageResponseFromJSON(jsonValue));
    }

    /**
     */
    async routingAppCoveragesUpdateInstance(requestParameters: RoutingAppCoveragesUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingAppCoverageResponse> {
        const response = await this.routingAppCoveragesUpdateInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RoutingAppCoveragesGetInstanceFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: 'appStoreVersion',
    AssetDeliveryState: 'assetDeliveryState',
    FileName: 'fileName',
    FileSize: 'fileSize',
    SourceFileChecksum: 'sourceFileChecksum',
    UploadOperations: 'uploadOperations',
    Uploaded: 'uploaded'
} as const;
export type RoutingAppCoveragesGetInstanceFieldsRoutingAppCoveragesEnum = typeof RoutingAppCoveragesGetInstanceFieldsRoutingAppCoveragesEnum[keyof typeof RoutingAppCoveragesGetInstanceFieldsRoutingAppCoveragesEnum];
/**
 * @export
 */
export const RoutingAppCoveragesGetInstanceIncludeEnum = {
    AppStoreVersion: 'appStoreVersion'
} as const;
export type RoutingAppCoveragesGetInstanceIncludeEnum = typeof RoutingAppCoveragesGetInstanceIncludeEnum[keyof typeof RoutingAppCoveragesGetInstanceIncludeEnum];
